#!/usr/bin/env node
/* eslint-disable no-console */
const debug = require('debug');
const log = debug('pie-element:scripts:build');
const argv = require('minimist')(process.argv.slice(2));
const { readdirSync, pathExistsSync } = require('fs-extra');
const _ = require('lodash');
const { Commands } = require('@pie-framework/build-helper');
const { resolve, relative } = require('path');
const minimist = require('minimist');

log('scope: ', argv.scope);

const args = minimist(process.argv.slice(2));

const r = (...parts) =>
  resolve.apply(null, [__dirname, '..', 'packages'].concat(parts));

const rel = p => relative(resolve(__dirname, '..'), p);

class ElementsCommands extends Commands {
  constructor(root, args) {
    super(root, args);
  }

  expandPkg(d) {
    const out = [];
    if (pathExistsSync(r(d, 'src'))) {
      out.push(rel(r(d)));
    }

    if (pathExistsSync(r(d, 'controller', 'src'))) {
      out.push(rel(r(d, 'controller')));
    }

    if (pathExistsSync(r(d, 'configure', 'src'))) {
      out.push(rel(r(d, 'configure')));
    }

    return out;
  }

  packages() {
    if (args.scope) {
      const arr = Array.isArray(argv.scope) ? argv.scope : [argv.scope];
      return _.flatten(arr.map(p => this.expandPkg(p)));
    }
    const dirs = readdirSync(resolve(__dirname, '..', 'packages'));
    const all = _.flatten(dirs.map(d => this.expandPkg(d)));
    return all;
  }

  clean() {
    return Promise.all(
      this.packages().map(p => {
        const cwd = resolve(__dirname, '..', p);
        log('cwd:', cwd);
        return this.runCmd('rm -fr lib', { cwd });
      })
    );
  }

  babel() {
    return Promise.all(
      this.packages().map(p => {
        const cwd = resolve(__dirname, '..', p);
        const cmd = `${
          this.p.babel
        } --ignore '**/__test__/**','**/__tests__/**','**/__mocks__/**' src -d lib --source-maps --root-mode upward`;
        return this.runCmd(cmd, { cwd });
      })
    );
  }
}

const cmds = new ElementsCommands(resolve(__dirname, '..'), args);

cmds
  .execute()
  .then(() => {
    console.log('all done');
    process.exit(0);
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
