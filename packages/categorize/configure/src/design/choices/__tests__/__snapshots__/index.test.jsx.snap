// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`choices snapshot renders 1`] = `
<div
  className=""
>
  <WithStyles(Header)
    buttonLabel="ADD A CHOICE"
    label="Choices"
    onAdd={[Function]}
  />
  <WithStyles(Config)
    allChoicesHaveCount={[Function]}
    categoryCountIsOne={false}
    config={
      Object {
        "categories": Array [
          Object {
            "choices": Array [],
            "id": "0",
            "label": "Category 0",
          },
        ],
        "categoriesPerRow": 2,
        "choices": Array [],
        "choicesLabel": "",
        "choicesPerRow": 2,
        "choicesPosition": "below",
        "correctResponse": Array [],
        "lockChoiceOrder": true,
        "partialScoring": true,
        "removeTilesAfterPlacing": false,
      }
    }
    onModelChanged={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "choices": Array [
                Object {
                  "content": "Choice 0",
                  "id": "0",
                },
                Object {
                  "content": "Choice 1",
                  "id": "1",
                },
              ],
            },
          ],
          Array [
            Object {
              "categories": Array [
                Object {
                  "choices": Array [],
                  "id": "0",
                  "label": "Category 0",
                },
              ],
              "categoriesPerRow": 2,
              "choices": Array [],
              "choicesLabel": "",
              "choicesPerRow": 2,
              "choicesPosition": "below",
              "correctResponse": Array [],
              "lockChoiceOrder": true,
              "partialScoring": true,
              "removeTilesAfterPlacing": false,
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />
  <div
    style={
      Object {
        "gridTemplateColumns": "repeat(2, 1fr)",
      }
    }
  >
    <DragSource(WithStyles(Choice))
      choice={
        Object {
          "content": "Choice 0",
          "id": "0",
        }
      }
      key="0"
      onChange={[Function]}
      onDelete={[Function]}
    />
  </div>
  <WithStyles(Component) />
</div>
`;
