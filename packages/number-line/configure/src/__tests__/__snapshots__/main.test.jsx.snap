// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`main snapshot renders 1`] = `
<ConfigLayout
  dimensions={Object {}}
  hideSettings={false}
  settings={
    <Panel
      configuration={
        Object {
          "availableTools": Array [
            "PF",
            "LFF",
            "LEF",
            "LFE",
            "LEE",
            "RFN",
            "RFP",
            "REN",
            "REP",
          ],
          "baseInputConfiguration": Object {
            "audio": Object {
              "disabled": false,
            },
            "image": Object {
              "disabled": false,
            },
            "video": Object {
              "disabled": false,
            },
          },
          "hidePointConfigButtons": false,
          "instruction": Object {
            "enabled": true,
            "label": "Number line questions involve plotting points or other objects. To create one, first set up the number line, then select the plotting tools students will be offered and use them to define the correct answer.",
            "settings": false,
          },
          "language": Object {
            "enabled": false,
            "label": "Specify Language",
            "settings": false,
          },
          "languageChoices": Object {
            "label": "Language Choices",
            "options": Array [],
          },
          "mathMlOptions": Object {
            "mmlEditing": false,
            "mmlOutput": false,
          },
          "maxMaxElements": 20,
          "numberLineDimensions": Object {
            "enabled": true,
            "label": "Width",
            "max": 800,
            "min": 200,
            "settings": true,
            "step": 20,
          },
          "prompt": Object {
            "inputConfiguration": Object {
              "audio": Object {
                "disabled": false,
              },
              "image": Object {
                "disabled": false,
              },
              "video": Object {
                "disabled": false,
              },
            },
            "label": "Item Stem",
            "required": false,
            "settings": true,
          },
          "rationale": Object {
            "inputConfiguration": Object {
              "audio": Object {
                "disabled": false,
              },
              "image": Object {
                "disabled": false,
              },
              "video": Object {
                "disabled": false,
              },
            },
            "label": "Rationale",
            "required": false,
            "settings": true,
          },
          "settingsPanelDisabled": false,
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "teacherInstructions": Object {
            "inputConfiguration": Object {
              "audio": Object {
                "disabled": false,
              },
              "image": Object {
                "disabled": false,
              },
              "video": Object {
                "disabled": false,
              },
            },
            "label": "Teacher Instructions",
            "required": false,
            "settings": true,
          },
          "title": Object {
            "enabled": true,
            "inputConfiguration": Object {
              "audio": Object {
                "disabled": false,
              },
              "image": Object {
                "disabled": false,
              },
              "video": Object {
                "disabled": false,
              },
            },
            "label": "Title",
            "settings": true,
          },
        }
      }
      groups={
        Object {
          "Properties": Object {
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "spellCheckEnabled": false,
            "teacherInstructionsEnabled": undefined,
            "titleEnabled": undefined,
          },
        }
      }
      model={
        Object {
          "correctResponse": Array [],
          "graph": Object {
            "arrows": Object {
              "left": true,
              "right": true,
            },
            "availableTypes": Object {
              "PF": true,
            },
            "domain": Object {
              "max": 1,
              "min": -1,
            },
            "exhibitOnly": false,
            "initialElements": Array [],
            "initialType": "PF",
            "maxNumberOfPoints": 1,
            "ticks": Object {
              "decimalTick": 0.125,
              "fractionTick": "1/25",
              "integerTick": 1,
              "major": 0.5,
              "minor": 0.125,
              "tickIntervalType": "Decimal",
            },
            "title": "",
            "width": 500,
          },
        }
      }
      onChangeModel={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "graph": Object {
                  "arrows": Object {
                    "left": true,
                    "right": true,
                  },
                  "availableTypes": Object {
                    "PF": true,
                  },
                  "domain": Object {
                    "max": 1,
                    "min": -1,
                  },
                  "exhibitOnly": false,
                  "fraction": false,
                  "height": 100,
                  "initialElements": Array [],
                  "initialType": "PF",
                  "maxNumberOfPoints": 1,
                  "ticks": Object {
                    "decimalTick": 0.125,
                    "fractionTick": "1/25",
                    "integerTick": 1,
                    "major": 0.5,
                    "minor": 0.125,
                    "tickIntervalType": "Decimal",
                  },
                  "title": "",
                  "width": 500,
                },
              },
            ],
            Array [
              Object {
                "correctResponse": Array [],
                "graph": Object {
                  "arrows": Object {
                    "left": true,
                    "right": true,
                  },
                  "availableTypes": Object {
                    "PF": true,
                  },
                  "domain": Object {
                    "max": 1,
                    "min": -1,
                  },
                  "exhibitOnly": false,
                  "initialElements": Array [],
                  "initialType": "PF",
                  "maxNumberOfPoints": 1,
                  "ticks": Object {
                    "decimalTick": 0.125,
                    "fractionTick": "1/25",
                    "integerTick": 1,
                    "major": 0.5,
                    "minor": 0.125,
                    "tickIntervalType": "Decimal",
                  },
                  "title": "",
                  "width": 500,
                },
                "titleEnabled": true,
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    />
  }
>
  <WithStyles(Typography)
    component="div"
    type="body1"
  >
    Number line questions involve plotting points or other objects. To create one, first set up the number line, then select the plotting tools students will be offered and use them to define the correct answer.
  </WithStyles(Typography)>
  <WithStyles(CardBar)
    header="Set Up Number Line"
    info={
      <WithStyles(Tooltip)
        classes={
          Object {
            "tooltip": undefined,
          }
        }
        disableFocusListener={true}
        disableTouchListener={true}
        placement="right"
        title="Validation requirements:
The correct answer should include at least one number line object."
      >
        <pure(InfoIcon)
          color="primary"
          fontSize="small"
          style={
            Object {
              "marginLeft": "8px",
            }
          }
        />
      </WithStyles(Tooltip)>
    }
  >
    Set up the number line by entering the domain and number of tick marks to display. Labels on the number line can be edited or removed by clicking on the label.
  </WithStyles(CardBar)>
  <div>
    <WithStyles(Domain)
      domain={
        Object {
          "max": 1,
          "min": -1,
        }
      }
      errors={Object {}}
      onChange={[Function]}
    />
  </div>
  <div>
    <FormSection>
      <WithStyles(Ticks)
        majorValues={
          Object {
            "decimal": Array [
              0.125,
              0.25,
              0.5,
              1,
            ],
            "fraction": Array [
              "1/8",
              "1/4",
              "1/2",
              "1",
            ],
          }
        }
        minorLimits={
          Object {
            "max": 0.8,
            "min": 0.04,
          }
        }
        minorValues={
          Object {
            "decimal": Array [
              0.04,
              0.05,
              0.1,
              0.125,
              0.2,
              0.25,
              0.5,
            ],
            "fraction": Array [
              "1/25",
              "1/20",
              "1/16",
              "1/15",
              "1/12",
              "1/10",
              "1/9",
              "1/8",
              "1/7",
              "1/6",
              "1/5",
              "1/4",
              "1/3",
              "1/2",
            ],
          }
        }
        onChange={[Function]}
        ticks={
          Object {
            "decimalTick": 0.125,
            "fractionTick": "1/25",
            "integerTick": 1,
            "major": 0.5,
            "minor": 0.125,
            "tickIntervalType": "Decimal",
          }
        }
      />
    </FormSection>
  </div>
  <div>
    <div />
    <WithStyles(Arrows)
      arrows={
        Object {
          "left": true,
          "right": true,
        }
      }
      onChange={[Function]}
    />
  </div>
  <WithStyles(NumberLine)
    maxHeight={70}
    maxWidth={800}
    minWidth={200}
    model={
      Object {
        "correctResponse": undefined,
        "disabled": true,
        "feedback": undefined,
        "graph": Object {
          "arrows": Object {
            "left": true,
            "right": true,
          },
          "availableTypes": Object {
            "PF": true,
          },
          "disabled": true,
          "domain": Object {
            "max": 1,
            "min": -1,
          },
          "exhibitOnly": false,
          "initialElements": Array [],
          "initialType": "PF",
          "maxNumberOfPoints": 1,
          "ticks": Object {
            "decimalTick": 0.125,
            "fractionTick": "1/25",
            "integerTick": 1,
            "major": 0.5,
            "minor": 0.125,
            "tickIntervalType": "Decimal",
          },
          "title": undefined,
          "width": 500,
        },
        "prompt": undefined,
        "teacherInstructions": undefined,
      }
    }
    onAddElement={[Function]}
    onClearElements={[Function]}
    onDeleteElements={[Function]}
    onMoveElement={[Function]}
    onUndoElement={[Function]}
  />
  <WithStyles(CardBar)
    header="Define Tool Set and Correct Response"
  >
    Select answer type and place it on the number line. Intersecting points, line segments and/or rays will appear above the number line. 
    <i>
      Note: A maximum of 20 points, line segments or rays may be plotted.
    </i>
  </WithStyles(CardBar)>
  <WithStyles(CardBar)
    header="Available Tools"
    mini={true}
  >
    Click on the input options to be displayed to the students. All inputs will display by default.
  </WithStyles(CardBar)>
  <div>
    <WithStyles(PointConfig)
      availableTools={
        Array [
          "PF",
          "LFF",
          "LEF",
          "LFE",
          "LEE",
          "RFN",
          "RFP",
          "REN",
          "REP",
        ]
      }
      hideButtons={false}
      onSelectionChange={[Function]}
      selection={
        Object {
          "PF": true,
        }
      }
    />
  </div>
  <FormSection>
    <label>
      Max No of Elements
    </label>
    <WithStyles(NumberTextField)
      max={20}
      min={1}
      onChange={[Function]}
      onlyIntegersAllowed={true}
      value={1}
    />
  </FormSection>
  <label>
    Correct Answer
  </label>
  <WithStyles(NumberLine)
    answer={Array []}
    maxWidth={800}
    minWidth={200}
    model={
      Object {
        "correctResponse": undefined,
        "feedback": undefined,
        "graph": Object {
          "arrows": Object {
            "left": true,
            "right": true,
          },
          "availableTypes": Object {
            "PF": true,
          },
          "disabled": true,
          "domain": Object {
            "max": 1,
            "min": -1,
          },
          "exhibitOnly": false,
          "initialElements": Array [],
          "initialType": "PF",
          "maxNumberOfPoints": 1,
          "ticks": Object {
            "decimalTick": 0.125,
            "fractionTick": "1/25",
            "integerTick": 1,
            "major": 0.5,
            "minor": 0.125,
            "tickIntervalType": "Decimal",
          },
          "title": undefined,
          "width": 500,
        },
        "prompt": undefined,
        "teacherInstructions": undefined,
      }
    }
    onAddElement={[Function]}
    onClearElements={[Function]}
    onDeleteElements={[Function]}
    onMoveElement={[Function]}
    onUndoElement={[Function]}
  />
  <Component
    onConfirm={[Function]}
    open={false}
    text=""
    title="Warning"
  />
  <Component
    onClose={[Function]}
    onCloseText="Cancel"
    onConfirm={[Function]}
    onConfirmText="OK"
    open={false}
    text=""
    title="Warning"
  />
</ConfigLayout>
`;
