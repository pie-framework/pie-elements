// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main snapshot renders 1`] = `
<ConfigLayout
  dimensions={Object {}}
  hideSettings={true}
>
  <WithStyles(CardBar)
    header="Set Up"
  />
  <FormSection
    label="Title"
  >
    <EditableHtml
      activePlugins={
        Array [
          "bold",
          "html",
          "italic",
          "underline",
          "strikethrough",
          "image",
          "math",
          "languageCharacters",
          "responseArea",
        ]
      }
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      mathMlOptions={
        Object {
          "mmlEditing": false,
          "mmlOutput": false,
        }
      }
      onChange={[Function]}
      pluginProps={
        Object {
          "audio": Object {
            "disabled": false,
          },
          "image": Object {
            "disabled": false,
          },
          "video": Object {
            "disabled": false,
          },
        }
      }
      toolbarOpts={
        Object {
          "position": "bottom",
        }
      }
      uploadSoundSupport={
        Object {
          "addMatchers": [Function],
          "advanceTimersByTime": [Function],
          "autoMockOff": [Function],
          "autoMockOn": [Function],
          "clearAllMocks": [Function],
          "clearAllTimers": [Function],
          "deepUnmock": [Function],
          "disableAutomock": [Function],
          "doMock": [Function],
          "dontMock": [Function],
          "enableAutomock": [Function],
          "fn": [Function],
          "genMockFromModule": [Function],
          "isMockFunction": [Function],
          "mock": [Function],
          "requireActual": [Function],
          "requireMock": [Function],
          "resetAllMocks": [Function],
          "resetModuleRegistry": [Function],
          "resetModules": [Function],
          "restoreAllMocks": [Function],
          "retryTimes": [Function],
          "runAllImmediates": [Function],
          "runAllTicks": [Function],
          "runAllTimers": [Function],
          "runOnlyPendingTimers": [Function],
          "runTimersToTime": [Function],
          "setMock": [Function],
          "setTimeout": [Function],
          "spyOn": [Function],
          "unmock": [Function],
          "useFakeTimers": [Function],
          "useRealTimers": [Function],
        }
      }
    />
  </FormSection>
  <FormSection
    label="Question"
  >
    <EditableHtml
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      mathMlOptions={
        Object {
          "mmlEditing": false,
          "mmlOutput": false,
        }
      }
      minHeight={60}
      onChange={[Function]}
      pluginProps={
        Object {
          "audio": Object {
            "disabled": false,
          },
          "image": Object {
            "disabled": false,
          },
          "video": Object {
            "disabled": false,
          },
        }
      }
      toolbarOpts={
        Object {
          "position": "bottom",
        }
      }
      uploadSoundSupport={
        Object {
          "addMatchers": [Function],
          "advanceTimersByTime": [Function],
          "autoMockOff": [Function],
          "autoMockOn": [Function],
          "clearAllMocks": [Function],
          "clearAllTimers": [Function],
          "deepUnmock": [Function],
          "disableAutomock": [Function],
          "doMock": [Function],
          "dontMock": [Function],
          "enableAutomock": [Function],
          "fn": [Function],
          "genMockFromModule": [Function],
          "isMockFunction": [Function],
          "mock": [Function],
          "requireActual": [Function],
          "requireMock": [Function],
          "resetAllMocks": [Function],
          "resetModuleRegistry": [Function],
          "resetModules": [Function],
          "restoreAllMocks": [Function],
          "retryTimes": [Function],
          "runAllImmediates": [Function],
          "runAllTicks": [Function],
          "runAllTimers": [Function],
          "runOnlyPendingTimers": [Function],
          "runTimersToTime": [Function],
          "setMock": [Function],
          "setTimeout": [Function],
          "spyOn": [Function],
          "unmock": [Function],
          "useFakeTimers": [Function],
          "useRealTimers": [Function],
        }
      }
    />
  </FormSection>
  <FormSection>
    <WithStyles(ModelOptions)
      model={
        Object {
          "allowedStudentConfig": false,
          "correctResponse": Array [],
          "maxModelSelected": 1,
          "modelTypeSelected": "bar",
          "partsPerModel": 5,
          "question": "",
          "showGraphLabels": false,
          "title": "",
        }
      }
      modelOptions={
        Object {
          "maxOfModel": Object {
            "default": 1,
            "max": 9,
            "min": 1,
          },
          "modelTypeChoices": Array [
            Object {
              "label": "Bar",
              "value": "bar",
            },
            Object {
              "label": "Pie",
              "value": "pie",
            },
          ],
          "partsPerModel": Object {
            "default": 5,
            "max": 9,
            "min": 1,
          },
        }
      }
      onChange={[Function]}
    />
  </FormSection>
  <FormSection>
    <WithStyles(CardBar)
      header="Correct Answer"
      info={
        <WithStyles(Tooltip)
          classes={
            Object {
              "tooltip": undefined,
            }
          }
          disableFocusListener={true}
          disableTouchListener={true}
          placement="right"
          title="The correct answer should include no more than one partially-filled model"
        >
          <pure(InfoIcon)
            color="primary"
            fontSize="small"
            style={
              Object {
                "marginLeft": "8px",
              }
            }
          />
        </WithStyles(Tooltip)>
      }
    />
    <br />
    <label>
      Click/touch the number of parts to represent the correct fraction model
    </label>
    <br />
    <div>
      <FractionModel
        key="0"
        modelType="bar"
        noOfModels={1}
        onChange={[Function]}
        partsPerModel={5}
        showLabel={false}
        value={Array []}
      />
    </div>
  </FormSection>
  <Component
    onClose={[Function]}
    onCloseText="Cancel"
    onConfirm={[Function]}
    onConfirmText="OK"
    open={false}
    text=""
    title="Warning"
  />
</ConfigLayout>
`;
