// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Placement Ordering snapshot renders all default items 1`] = `
<ConfigLayout
  settings={
    <Panel
      configuration={
        Object {
          "choiceLabel": Object {
            "label": "Choice label",
            "settings": true,
          },
          "choices": Object {
            "label": "Choices",
            "settings": true,
          },
          "enableImages": Object {
            "label": "Enable Images",
            "settings": true,
          },
          "feedback": Object {
            "enabled": true,
            "label": "Feedback",
            "settings": true,
          },
          "maxImageHeight": Object {
            "choices": 150,
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "choicesWithPlacementArea": 240,
            "choicesWithoutPlacementArea": 300,
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "numberedGuides": Object {
            "label": "Numbered guides",
            "settings": true,
          },
          "orientation": Object {
            "label": "Orientation",
            "settings": true,
          },
          "partialScoring": Object {
            "label": "Allow Partial Scoring",
            "settings": false,
          },
          "placementArea": Object {
            "label": "Placement Area",
            "settings": true,
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": true,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "removeTilesAfterPlacing": Object {
            "label": "Remove Tiles after placing",
            "settings": false,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "targetLabel": Object {
            "label": "Target label",
            "settings": true,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
        }
      }
      groups={
        Object {
          "Properties": Object {
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
          "Settings": Object {
            "choiceLabelEnabled": undefined,
            "enableImages": undefined,
            "feedbackEnabled": undefined,
            "numberedGuides": false,
            "orientation": undefined,
            "partialScoring": false,
            "placementArea": undefined,
            "removeTilesAfterPlacing": false,
          },
        }
      }
      model={
        Object {
          "choiceLabel": "",
          "choiceLabelEnabled": true,
          "choices": Array [],
          "correctResponse": Array [],
          "enableImages": false,
          "feedbackEnabled": true,
          "note": "The answer shown above is the most common correct answer for this item. One or more additional correct answers are also defined, and will also be recognized as correct.",
          "numberedGuides": false,
          "orientation": "vertical",
          "partialScoring": true,
          "placementArea": false,
          "prompt": "",
          "promptEnabled": true,
          "rationaleEnabled": true,
          "removeTilesAfterPlacing": true,
          "scoringType": "auto",
          "studentInstructionsEnabled": true,
          "targetLabel": "",
          "teacherInstructionsEnabled": true,
          "toolbarEditorPosition": "bottom",
        }
      }
      onChangeConfiguration={[Function]}
      onChangeModel={[Function]}
    />
  }
>
  <InputContainer
    label="Teacher Instructions"
  >
    <EditableHtml
      markup=""
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
      toolbarOpts={
        Object {
          "position": "bottom",
        }
      }
    />
  </InputContainer>
  <FormSection
    label="Ordering"
  >
    <InputContainer
      label="ITEM STEM"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
    <InputContainer
      label="Rationale"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
  </FormSection>
  <FormSection
    label="Define Choices"
    labelExtraStyle={
      Object {
        "display": "inline-flex",
      }
    }
  >
    <div>
      <WithStyles(Tooltip)
        classes={
          Object {
            "tooltip": undefined,
          }
        }
        disableFocusListener={true}
        disableTouchListener={true}
        placement="right"
        title="Validation requirements:
There should be at least 3 tokens.
The tokens should not be empty and should be unique.
The correct ordering should not be identical to the initial ordering."
      >
        <pure(InfoIcon)
          color="primary"
          fontSize="small"
          style={
            Object {
              "marginLeft": "5px",
            }
          }
        />
      </WithStyles(Tooltip)>
    </div>
    <div>
      <InputContainer
        label="CHOICE LABEL"
      >
        <EditableHtml
          markup=""
          maxImageHeight={150}
          maxImageWidth={300}
          onChange={[Function]}
          toolbarOpts={
            Object {
              "position": "bottom",
            }
          }
        />
      </InputContainer>
    </div>
    <InputContainer
      label="CHOICES"
    >
      <WithStyles(ChoiceEditor)
        choices={Array []}
        choicesLabel="Choices"
        correctResponse={Array []}
        disableImages={true}
        maxImageHeight={150}
        maxImageWidth={300}
        onChange={[Function]}
        placementArea={false}
        pluralChoiceLabel="Choices"
        singularChoiceLabel="Choice"
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
  </FormSection>
  <FeedbackConfig
    onChange={[Function]}
    toolbarOpts={
      Object {
        "position": "bottom",
      }
    }
  />
</ConfigLayout>
`;

exports[`Placement Ordering snapshot renders custom items 1`] = `
<ConfigLayout
  settings={
    <Panel
      configuration={
        Object {
          "choiceLabel": Object {
            "label": "Choice label",
            "settings": true,
          },
          "choices": Object {
            "label": "Choices",
            "settings": true,
          },
          "enableImages": Object {
            "label": "Enable Images",
            "settings": true,
          },
          "feedback": Object {
            "enabled": true,
            "label": "Feedback",
            "settings": true,
          },
          "maxImageHeight": Object {
            "choices": 150,
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "choicesWithPlacementArea": 240,
            "choicesWithoutPlacementArea": 300,
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "numberedGuides": Object {
            "label": "Numbered guides",
            "settings": true,
          },
          "orientation": Object {
            "label": "Orientation",
            "settings": true,
          },
          "partialScoring": Object {
            "label": "Allow Partial Scoring",
            "settings": false,
          },
          "placementArea": Object {
            "label": "Placement Area",
            "settings": true,
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": false,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "removeTilesAfterPlacing": Object {
            "label": "Remove Tiles after placing",
            "settings": true,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "targetLabel": Object {
            "label": "Target label",
            "settings": true,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
        }
      }
      groups={
        Object {
          "Properties": Object {
            "promptEnabled": false,
            "rationaleEnabled": undefined,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
          "Settings": Object {
            "choiceLabelEnabled": undefined,
            "enableImages": undefined,
            "feedbackEnabled": undefined,
            "numberedGuides": false,
            "orientation": undefined,
            "partialScoring": false,
            "placementArea": undefined,
            "removeTilesAfterPlacing": undefined,
          },
        }
      }
      model={
        Object {
          "choiceLabel": "",
          "choiceLabelEnabled": true,
          "choices": Array [],
          "correctResponse": Array [],
          "enableImages": false,
          "feedbackEnabled": true,
          "note": "The answer shown above is the most common correct answer for this item. One or more additional correct answers are also defined, and will also be recognized as correct.",
          "numberedGuides": false,
          "orientation": "vertical",
          "partialScoring": true,
          "placementArea": false,
          "prompt": "",
          "promptEnabled": true,
          "rationaleEnabled": true,
          "removeTilesAfterPlacing": true,
          "scoringType": "auto",
          "studentInstructionsEnabled": true,
          "targetLabel": "",
          "teacherInstructionsEnabled": true,
          "toolbarEditorPosition": "bottom",
        }
      }
      onChangeConfiguration={[Function]}
      onChangeModel={[Function]}
    />
  }
>
  <InputContainer
    label="Teacher Instructions"
  >
    <EditableHtml
      markup=""
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
      toolbarOpts={
        Object {
          "position": "bottom",
        }
      }
    />
  </InputContainer>
  <FormSection
    label="Ordering"
  >
    <InputContainer
      label="ITEM STEM"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
    <InputContainer
      label="Rationale"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
  </FormSection>
  <FormSection
    label="Define Choices"
    labelExtraStyle={
      Object {
        "display": "inline-flex",
      }
    }
  >
    <div>
      <WithStyles(Tooltip)
        classes={
          Object {
            "tooltip": undefined,
          }
        }
        disableFocusListener={true}
        disableTouchListener={true}
        placement="right"
        title="Validation requirements:
There should be at least 3 tokens.
The tokens should not be empty and should be unique.
The correct ordering should not be identical to the initial ordering."
      >
        <pure(InfoIcon)
          color="primary"
          fontSize="small"
          style={
            Object {
              "marginLeft": "5px",
            }
          }
        />
      </WithStyles(Tooltip)>
    </div>
    <div>
      <InputContainer
        label="CHOICE LABEL"
      >
        <EditableHtml
          markup=""
          maxImageHeight={150}
          maxImageWidth={300}
          onChange={[Function]}
          toolbarOpts={
            Object {
              "position": "bottom",
            }
          }
        />
      </InputContainer>
    </div>
    <InputContainer
      label="CHOICES"
    >
      <WithStyles(ChoiceEditor)
        choices={Array []}
        choicesLabel="Choices"
        correctResponse={Array []}
        disableImages={true}
        maxImageHeight={150}
        maxImageWidth={300}
        onChange={[Function]}
        placementArea={false}
        pluralChoiceLabel="Choices"
        singularChoiceLabel="Choice"
        toolbarOpts={
          Object {
            "position": "bottom",
          }
        }
      />
    </InputContainer>
  </FormSection>
  <FeedbackConfig
    onChange={[Function]}
    toolbarOpts={
      Object {
        "position": "bottom",
      }
    }
  />
</ConfigLayout>
`;
