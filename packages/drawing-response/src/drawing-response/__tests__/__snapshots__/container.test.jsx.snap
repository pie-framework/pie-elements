// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Container snapshot renders 1`] = `
<div>
  <WithStyles(Palette)
    fillColor="white"
    fillList={
      Array [
        Object {
          "label": "No fill",
          "value": "transparent",
        },
        Object {
          "label": "Light blue",
          "value": "lightblue",
        },
        Object {
          "label": "Light yellow",
          "value": "lightyellow",
        },
        Object {
          "label": "Red",
          "value": "red",
        },
        Object {
          "label": "Orange",
          "value": "orange",
        },
        Object {
          "label": "Yellow",
          "value": "yellow",
        },
        Object {
          "label": "Violet",
          "value": "violet",
        },
        Object {
          "label": "Blue",
          "value": "blue",
        },
        Object {
          "label": "Green",
          "value": "green",
        },
        Object {
          "label": "White",
          "value": "white",
        },
        Object {
          "label": "Black",
          "value": "black",
        },
      ]
    }
    onFillColorChange={[Function]}
    onOutlineColorChange={[Function]}
    onPaintColorChange={[Function]}
    outlineColor="black"
    outlineList={
      Array [
        Object {
          "label": "Red",
          "value": "red",
        },
        Object {
          "label": "Orange",
          "value": "orange",
        },
        Object {
          "label": "Yellow",
          "value": "yellow",
        },
        Object {
          "label": "Violet",
          "value": "violet",
        },
        Object {
          "label": "Blue",
          "value": "blue",
        },
        Object {
          "label": "Green",
          "value": "green",
        },
        Object {
          "label": "White",
          "value": "white",
        },
        Object {
          "label": "Black",
          "value": "black",
        },
      ]
    }
    paintColor="Red"
    paintList={
      Array [
        Object {
          "label": "Red",
          "value": "red",
        },
        Object {
          "label": "Orange",
          "value": "orange",
        },
        Object {
          "label": "Yellow",
          "value": "yellow",
        },
        Object {
          "label": "Violet",
          "value": "violet",
        },
        Object {
          "label": "Blue",
          "value": "blue",
        },
        Object {
          "label": "Green",
          "value": "green",
        },
        Object {
          "label": "White",
          "value": "white",
        },
        Object {
          "label": "Black",
          "value": "black",
        },
      ]
    }
  />
  <div>
    <div>
      <WithStyles(RawButton)
        disabled={true}
        key="Select"
        label={
          <IconWrapper
            path="mdiCursorDefault"
          />
        }
        onClick={[Function]}
        title="Select"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="FreePathDrawable"
        label={
          <IconWrapper
            path="mdiPencil"
          />
        }
        onClick={[Function]}
        title="Free Draw"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="LineDrawable"
        label={
          <IconWrapper
            path="mdiMinus"
          />
        }
        onClick={[Function]}
        title="Line"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="RectangleDrawable"
        label={
          <IconWrapper
            path="mdiRectangle"
          />
        }
        onClick={[Function]}
        title="Rectangle"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="CircleDrawable"
        label={
          <IconWrapper
            path="mdiCircle"
          />
        }
        onClick={[Function]}
        title="Circle"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="Text"
        label={
          <IconWrapper
            path="mdiFormatColorText"
          />
        }
        onClick={[Function]}
        title="Text Entry"
      />
      <WithStyles(RawButton)
        disabled={false}
        key="EraserDrawable"
        label={
          <IconWrapper
            path="mdiEraser"
          />
        }
        onClick={[Function]}
        title="Eraser"
      />
    </div>
    <div
      style={
        Object {
          "height": 0,
          "maxHeight": 0,
        }
      }
    >
      <WithStyles(DrawableMain)
        TextEntry={
          TextDrawable {
            "addNewTextEntry": [Function],
            "all": Array [],
            "eventListenersDetachArray": Array [],
            "handleClick": [Function],
            "handleDblClick": [Function],
            "handleMouseDown": [Function],
            "handleMouseUp": [Function],
            "handleTransform": [Function],
            "removeEventListeners": [Function],
            "setAll": [Function],
          }
        }
        drawableDimensions={
          Object {
            "height": 0,
            "width": 0,
          }
        }
        fillColor="white"
        imageDimensions={Object {}}
        imageUrl="url"
        onSessionChange={[MockFunction]}
        outlineColor="black"
        paintColor="Red"
        scale={1}
        session={Object {}}
        toolActive={
          Object {
            "icon": "mdiCursorDefault",
            "label": "Select",
            "type": "Select",
          }
        }
      />
    </div>
  </div>
</div>
`;

exports[`Container snapshot renders disabled 1`] = `
<div>
  <div>
    <div>
      <WithStyles(RawButton)
        disabled={true}
        key="Select"
        label={
          <IconWrapper
            path="mdiCursorDefault"
          />
        }
        onClick={[Function]}
        title="Select"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="FreePathDrawable"
        label={
          <IconWrapper
            path="mdiPencil"
          />
        }
        onClick={[Function]}
        title="Free Draw"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="LineDrawable"
        label={
          <IconWrapper
            path="mdiMinus"
          />
        }
        onClick={[Function]}
        title="Line"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="RectangleDrawable"
        label={
          <IconWrapper
            path="mdiRectangle"
          />
        }
        onClick={[Function]}
        title="Rectangle"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="CircleDrawable"
        label={
          <IconWrapper
            path="mdiCircle"
          />
        }
        onClick={[Function]}
        title="Circle"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="Text"
        label={
          <IconWrapper
            path="mdiFormatColorText"
          />
        }
        onClick={[Function]}
        title="Text Entry"
      />
      <WithStyles(RawButton)
        disabled={true}
        key="EraserDrawable"
        label={
          <IconWrapper
            path="mdiEraser"
          />
        }
        onClick={[Function]}
        title="Eraser"
      />
    </div>
    <div
      style={
        Object {
          "height": 0,
          "maxHeight": 0,
        }
      }
    >
      <WithStyles(DrawableMain)
        TextEntry={
          TextDrawable {
            "addNewTextEntry": [Function],
            "all": Array [],
            "eventListenersDetachArray": Array [],
            "handleClick": [Function],
            "handleDblClick": [Function],
            "handleMouseDown": [Function],
            "handleMouseUp": [Function],
            "handleTransform": [Function],
            "removeEventListeners": [Function],
            "setAll": [Function],
          }
        }
        disabled={true}
        drawableDimensions={
          Object {
            "height": 0,
            "width": 0,
          }
        }
        fillColor="white"
        imageDimensions={Object {}}
        imageUrl="url"
        onSessionChange={[MockFunction]}
        outlineColor="black"
        paintColor="Red"
        scale={1}
        session={Object {}}
        toolActive={
          Object {
            "icon": "mdiCursorDefault",
            "label": "Select",
            "type": "Select",
          }
        }
      />
    </div>
  </div>
</div>
`;
