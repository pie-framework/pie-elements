// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main snapshot renders with teacher instructions, prompt and rationale even if not set 1`] = `
<div>
  <ConfigLayout
    settings={
      <Panel
        configuration={
          Object {
            "choiceRationale": Object {
              "label": "Choice Rationale",
              "settings": true,
            },
            "lockChoiceOrder": Object {
              "label": "Lock Choice Order",
              "settings": true,
            },
            "partialScoring": Object {
              "label": "Allow Partial Scoring",
              "settings": false,
            },
            "prompt": Object {
              "label": "Prompt",
              "settings": true,
            },
            "rationale": Object {
              "label": "Rationale",
              "settings": true,
            },
            "spellCheck": Object {
              "enabled": true,
              "label": "Spellcheck",
              "settings": false,
            },
            "teacherInstructions": Object {
              "label": "Teacher Instructions",
              "settings": true,
            },
            "toolbarEditorPosition": Object {
              "label": "Toolbar Editor Position",
              "settings": false,
            },
          }
        }
        groups={
          Object {
            "Properties": Object {
              "choiceRationaleEnabled": undefined,
              "promptEnabled": undefined,
              "rationaleEnabled": undefined,
              "spellCheckEnabled": false,
              "teacherInstructionsEnabled": undefined,
            },
            "Settings": Object {
              "lockChoiceOrder": undefined,
              "partialScoring": false,
            },
          }
        }
        model={
          Object {
            "alternateResponse": Object {
              "2": Array [
                "2",
              ],
            },
            "choiceRationaleEnabled": true,
            "choices": Object {
              "0": Array [
                Object {
                  "correct": true,
                  "label": "cow ",
                  "rationale": "rationale for cow",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "dog ",
                  "value": "1",
                },
                Object {
                  "correct": false,
                  "label": "cat ",
                  "value": "2",
                },
              ],
              "1": Array [
                Object {
                  "correct": true,
                  "label": "over ",
                  "rationale": "rationale for over",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "under ",
                  "value": "1",
                },
                Object {
                  "correct": false,
                  "label": "across ",
                  "value": "2",
                },
              ],
              "2": Array [
                Object {
                  "correct": true,
                  "label": "moon ",
                  "rationale": "rationale for moon",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "sun",
                  "value": "2",
                },
                Object {
                  "correct": false,
                  "label": "house ",
                  "value": "3",
                },
              ],
            },
            "disabled": false,
            "displayType": "block",
            "markup": "<div><p>The {{0}} jumped {{1}} the {{2}}</p></div>",
            "mode": "gather",
            "prompt": "Use the dropdowns to complete the sentence",
            "promptEnabled": true,
            "rationaleEnabled": true,
            "shuffle": true,
            "slateMarkup": "<div><p>The <span data-type=\\"inline_dropdown\\" data-index=\\"0\\" data-value=\\"cow \\"></span> jumped <span data-type=\\"inline_dropdown\\" data-index=\\"1\\" data-value=\\"over \\"></span> the <span data-type=\\"inline_dropdown\\" data-index=\\"2\\" data-value=\\"moon \\"></span></p></div>",
            "studentInstructionsEnabled": true,
            "teacherInstructionsEnabled": true,
            "toolbarEditorPosition": "bottom",
          }
        }
        onChangeConfiguration={[Function]}
        onChangeModel={[Function]}
      />
    }
  >
    <div>
      <InputContainer
        label="Teacher Instructions"
      >
        <EditableHtml
          markup=""
          nonEmpty={false}
          onChange={[Function]}
          toolbarOpts={
            Object {
              "position": "bottom",
            }
          }
        />
      </InputContainer>
      <InputContainer
        label="Prompt"
      >
        <EditableHtml
          disableUnderline={true}
          markup="Use the dropdowns to complete the sentence"
          nonEmpty={false}
          onChange={[Function]}
          toolbarOpts={
            Object {
              "position": "bottom",
            }
          }
        />
      </InputContainer>
      <InputContainer
        label="Rationale"
      >
        <EditableHtml
          markup=""
          onChange={[Function]}
          toolbarOpts={
            Object {
              "position": "bottom",
            }
          }
        />
      </InputContainer>
      <div>
        <WithStyles(Typography)>
          Define Template, Choices, and Correct Responses
        </WithStyles(Typography)>
        <WithStyles(Tooltip)
          classes={
            Object {
              "tooltip": undefined,
            }
          }
          disableFocusListener={true}
          disableTouchListener={true}
          placement="right"
          title="Validation requirements:
There should be at least 1 response area defined."
        >
          <pure(InfoIcon)
            color="primary"
            fontSize="small"
          />
        </WithStyles(Tooltip)>
      </div>
      <InfoDialog
        open={false}
      />
      <EditableHtml
        disabled={false}
        highlightShape={false}
        markup="<div><p>The <span data-type=\\"inline_dropdown\\" data-index=\\"0\\" data-value=\\"cow \\"></span> jumped <span data-type=\\"inline_dropdown\\" data-index=\\"1\\" data-value=\\"over \\"></span> the <span data-type=\\"inline_dropdown\\" data-index=\\"2\\" data-value=\\"moon \\"></span></p></div>"
        onChange={[Function]}
        responseAreaProps={
          Object {
            "maxResponseAreas": undefined,
            "options": Object {
              "duplicates": true,
            },
            "respAreaToolbar": [Function],
            "type": "inline-dropdown",
          }
        }
        toolbarOpts={
          Object {
            "position": "top",
          }
        }
      />
      <br />
      <div
        key="0"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #1
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="cow "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for cow  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for cow"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="dog "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for dog  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="cat "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for cat  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
      <div
        key="1"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #2
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="over "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for over  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for over"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="under "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for under  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="across "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for across  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
      <div
        key="2"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #3
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="moon "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for moon  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for moon"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="sun"
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for sun (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="house "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for house  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
    </div>
  </ConfigLayout>
</div>
`;

exports[`Main snapshot renders without teacher instructions, prompt and rationale 1`] = `
<div>
  <ConfigLayout
    settings={
      <Panel
        configuration={
          Object {
            "choiceRationale": Object {
              "label": "Choice Rationale",
              "settings": true,
            },
            "lockChoiceOrder": Object {
              "label": "Lock Choice Order",
              "settings": true,
            },
            "partialScoring": Object {
              "label": "Allow Partial Scoring",
              "settings": false,
            },
            "prompt": Object {
              "label": "Prompt",
              "settings": true,
            },
            "rationale": Object {
              "label": "Rationale",
              "settings": true,
            },
            "spellCheck": Object {
              "enabled": true,
              "label": "Spellcheck",
              "settings": false,
            },
            "teacherInstructions": Object {
              "label": "Teacher Instructions",
              "settings": true,
            },
            "toolbarEditorPosition": Object {
              "label": "Toolbar Editor Position",
              "settings": false,
            },
          }
        }
        groups={
          Object {
            "Properties": Object {
              "choiceRationaleEnabled": undefined,
              "promptEnabled": undefined,
              "rationaleEnabled": undefined,
              "spellCheckEnabled": false,
              "teacherInstructionsEnabled": undefined,
            },
            "Settings": Object {
              "lockChoiceOrder": undefined,
              "partialScoring": false,
            },
          }
        }
        model={
          Object {
            "alternateResponse": Object {
              "2": Array [
                "2",
              ],
            },
            "choiceRationaleEnabled": true,
            "choices": Object {
              "0": Array [
                Object {
                  "correct": true,
                  "label": "cow ",
                  "rationale": "rationale for cow",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "dog ",
                  "value": "1",
                },
                Object {
                  "correct": false,
                  "label": "cat ",
                  "value": "2",
                },
              ],
              "1": Array [
                Object {
                  "correct": true,
                  "label": "over ",
                  "rationale": "rationale for over",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "under ",
                  "value": "1",
                },
                Object {
                  "correct": false,
                  "label": "across ",
                  "value": "2",
                },
              ],
              "2": Array [
                Object {
                  "correct": true,
                  "label": "moon ",
                  "rationale": "rationale for moon",
                  "value": "0",
                },
                Object {
                  "correct": false,
                  "label": "sun",
                  "value": "2",
                },
                Object {
                  "correct": false,
                  "label": "house ",
                  "value": "3",
                },
              ],
            },
            "disabled": false,
            "displayType": "block",
            "markup": "<div><p>The {{0}} jumped {{1}} the {{2}}</p></div>",
            "mode": "gather",
            "prompt": "Use the dropdowns to complete the sentence",
            "promptEnabled": false,
            "rationaleEnabled": false,
            "shuffle": true,
            "slateMarkup": "<div><p>The <span data-type=\\"inline_dropdown\\" data-index=\\"0\\" data-value=\\"cow \\"></span> jumped <span data-type=\\"inline_dropdown\\" data-index=\\"1\\" data-value=\\"over \\"></span> the <span data-type=\\"inline_dropdown\\" data-index=\\"2\\" data-value=\\"moon \\"></span></p></div>",
            "studentInstructionsEnabled": true,
            "teacherInstructionsEnabled": false,
            "toolbarEditorPosition": "bottom",
          }
        }
        onChangeConfiguration={[Function]}
        onChangeModel={[Function]}
      />
    }
  >
    <div>
      <div>
        <WithStyles(Typography)>
          Define Template, Choices, and Correct Responses
        </WithStyles(Typography)>
        <WithStyles(Tooltip)
          classes={
            Object {
              "tooltip": undefined,
            }
          }
          disableFocusListener={true}
          disableTouchListener={true}
          placement="right"
          title="Validation requirements:
There should be at least 1 response area defined."
        >
          <pure(InfoIcon)
            color="primary"
            fontSize="small"
          />
        </WithStyles(Tooltip)>
      </div>
      <InfoDialog
        open={false}
      />
      <EditableHtml
        disabled={false}
        highlightShape={false}
        markup="<div><p>The <span data-type=\\"inline_dropdown\\" data-index=\\"0\\" data-value=\\"cow \\"></span> jumped <span data-type=\\"inline_dropdown\\" data-index=\\"1\\" data-value=\\"over \\"></span> the <span data-type=\\"inline_dropdown\\" data-index=\\"2\\" data-value=\\"moon \\"></span></p></div>"
        onChange={[Function]}
        responseAreaProps={
          Object {
            "maxResponseAreas": undefined,
            "options": Object {
              "duplicates": true,
            },
            "respAreaToolbar": [Function],
            "type": "inline-dropdown",
          }
        }
        toolbarOpts={
          Object {
            "position": "top",
          }
        }
      />
      <br />
      <div
        key="0"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #1
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="cow "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for cow  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for cow"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="dog "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for dog  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="cat "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for cat  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
      <div
        key="1"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #2
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="over "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for over  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for over"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="under "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for under  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="across "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for across  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
      <div
        key="2"
      >
        <WithStyles(ExpansionPanel)>
          <WithStyles(ExpansionPanelSummary)
            expandIcon={<pure(ExpandMoreIcon) />}
          >
            <WithStyles(Typography)>
              Rationale for response area #3
            </WithStyles(Typography)>
          </WithStyles(ExpansionPanelSummary)>
          <WithStyles(ExpansionPanelDetails)>
            <InputContainer
              key="moon "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for moon  (correct)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup="rationale for moon"
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="sun"
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for sun (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
            <InputContainer
              key="house "
              label={
                <span
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "Rationale for house  (incorrect)",
                    }
                  }
                />
              }
            >
              <EditableHtml
                markup=""
                onChange={[Function]}
              />
            </InputContainer>
          </WithStyles(ExpansionPanelDetails)>
        </WithStyles(ExpansionPanel)>
      </div>
    </div>
  </ConfigLayout>
</div>
`;
