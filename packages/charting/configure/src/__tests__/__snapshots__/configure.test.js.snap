// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChartingConfig renders snapshot 1`] = `
<div>
  Define Graph Attributes
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to set background shapes
        </span>
      </WithStyles(Typography)>
      <Chart
        addCategoryEnabled={true}
        categoryDefaultLabel="Category"
        chartType="lineCross"
        data={Array []}
        defineChart={true}
        domain={Object {}}
        onDataChange={[Function]}
        range={
          Object {
            "label": "",
            "labelStep": 1,
            "max": 4,
            "min": 0,
          }
        }
        size={
          Object {
            "height": 450,
            "width": 450,
          }
        }
        title=""
      />
      <div>
        <WithStyles(Checkbox)
          checked={true}
          onChange={[Function]}
        />
        Student can add categories
      </div>
    </div>
  </div>
</div>
`;

exports[`Configure renders snapshot 1`] = `
<ConfigLayout
  settings={
    <Panel
      configuration={
        Object {
          "maxImageHeight": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": true,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
          "title": Object {
            "label": "Graph Title",
            "settings": false,
          },
        }
      }
      groups={
        Object {
          "Item Type": Object {
            "graph": undefined,
            "title.enabled": false,
          },
          "Properties": Object {
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 450,
            "width": 450,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "labelStep": 1,
            "max": 4,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
  }
>
  <div>
    <WithStyles(Typography)
      component="div"
      type="body1"
    >
      <span>
        This interaction asks a student to draw a chart that meets specific criteria. The student will draw a category on the chart by clicking Add Category and dragging the top part of the category.
      </span>
    </WithStyles(Typography)>
    <InputContainer
      label="Teacher Instructions"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        nonEmpty={false}
        onChange={[Function]}
      />
    </InputContainer>
    <InputContainer
      label="Item Stem"
    >
      <EditableHtml
        disableUnderline={true}
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        nonEmpty={false}
        onChange={[Function]}
      />
    </InputContainer>
    <InputContainer
      label="Rationale"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
      />
    </InputContainer>
    <Component
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      config={
        Object {
          "height": 450,
          "width": 450,
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 450,
            "width": 450,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "labelStep": 1,
            "max": 4,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
    <WithStyles(ChartingConfig)
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      config={
        Object {
          "height": 450,
          "width": 450,
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 450,
            "width": 450,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "labelStep": 1,
            "max": 4,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
    <WithStyles(CorrectResponse)
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      config={
        Object {
          "height": 450,
          "width": 450,
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 450,
            "width": 450,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "labelStep": 1,
            "max": 4,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
  </div>
</ConfigLayout>
`;

exports[`CorrectResponse renders snapshot 1`] = `
<div>
  Define Correct Response
  <div
    key="correct-response-graph-undefined"
  >
    <p />
    <Chart
      addCategoryEnabled={true}
      categoryDefaultLabel="Category"
      chartType="lineCross"
      data={Array []}
      domain={Object {}}
      onDataChange={[Function]}
      range={
        Object {
          "label": "",
          "labelStep": 1,
          "max": 4,
          "min": 0,
        }
      }
      size={
        Object {
          "height": 450,
          "width": 450,
        }
      }
      title=""
    />
  </div>
</div>
`;
