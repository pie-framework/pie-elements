// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChartingConfig renders snapshot 1`] = `
<div>
  <div>
    Define Initial Chart Attributes
  </div>
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to set up the chart as it will initially appear to students.
        </span>
      </WithStyles(Typography)>
      <Chart
        addCategoryEnabled={true}
        categoryDefaultLabel="Category"
        chartType="lineCross"
        data={Array []}
        defineChart={true}
        domain={Object {}}
        onChangeLabels={[Function]}
        onChangeTitle={[Function]}
        onDataChange={[Function]}
        range={
          Object {
            "label": "",
            "max": 1,
            "min": 0,
          }
        }
        size={
          Object {
            "height": 480,
            "width": 480,
          }
        }
        title=""
      />
      <div>
        <WithStyles(Checkbox)
          checked={true}
          onChange={[Function]}
        />
        Student can add categories
      </div>
      <Component
        open={false}
      />
    </div>
  </div>
</div>
`;

exports[`Configure renders snapshot 1`] = `
<ConfigLayout
  hideSettings={false}
  settings={
    <Panel
      configuration={
        Object {
          "chartDimensions": Object {
            "height": Object {
              "max": 700,
              "min": 400,
              "step": 20,
            },
            "label": "Chart Dimensions",
            "settings": false,
            "showInConfigPanel": true,
            "width": Object {
              "max": 700,
              "min": 50,
              "step": 20,
            },
          },
          "labelsPlaceholders": Object {
            "bottom": "Click here to add a label for this axis",
            "left": "Click here to add a label for this axis",
            "right": "",
            "top": "",
          },
          "maxImageHeight": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": true,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "settingsPanelDisabled": false,
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
          "title": Object {
            "label": "Chart Title",
            "settings": false,
          },
          "titlePlaceholder": Object {
            "label": "Click here to add a title",
            "settings": false,
          },
          "withRubric": Object {
            "label": "Add Rubric",
            "settings": false,
          },
        }
      }
      groups={
        Object {
          "Properties": Object {
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "rubricEnabled": false,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "max": 1,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
  }
>
  <WithStyles(Typography)
    component="div"
    type="body1"
  >
    This item type provides various types of interactive charts. Depending upon how an item is configured, students can change the heights of bars (or other similar chart elements) created by the author; relabel bars created by the author; and/or add new bars, label them, and set their heights.
  </WithStyles(Typography)>
  <InputContainer
    label="Teacher Instructions"
  >
    <EditableHtml
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
    />
  </InputContainer>
  <InputContainer
    label="Item Stem"
  >
    <EditableHtml
      disableUnderline={true}
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
    />
  </InputContainer>
  <Component
    chartDimensions={
      Object {
        "height": Object {
          "max": 700,
          "min": 400,
          "step": 20,
        },
        "label": "Chart Dimensions",
        "settings": false,
        "showInConfigPanel": true,
        "width": Object {
          "max": 700,
          "min": 50,
          "step": 20,
        },
      }
    }
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    gridValues={
      Object {
        "range": Array [
          0.05,
          0.1,
          0.2,
        ],
      }
    }
    labelValues={
      Object {
        "range": Array [
          0,
          1,
          2,
          4,
          5,
          10,
        ],
      }
    }
    model={
      Object {
        "addCategoryEnabled": true,
        "categoryDefaultLabel": "Category",
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
    onChange={[Function]}
  />
  <WithStyles(ChartingConfig)
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    labelsPlaceholders={
      Object {
        "bottom": "Click here to add a label for this axis",
        "left": "Click here to add a label for this axis",
        "right": "",
        "top": "",
      }
    }
    model={
      Object {
        "addCategoryEnabled": true,
        "categoryDefaultLabel": "Category",
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
    showPixelGuides={true}
    titlePlaceholder={
      Object {
        "label": "Click here to add a title",
        "settings": false,
      }
    }
  />
  <WithStyles(CorrectResponse)
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    config={
      Object {
        "height": 480,
        "width": 480,
      }
    }
    model={
      Object {
        "addCategoryEnabled": true,
        "categoryDefaultLabel": "Category",
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
  />
  <InputContainer
    label="Rationale"
  >
    <EditableHtml
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      maxImageHeight={300}
      maxImageWidth={300}
      onChange={[Function]}
    />
  </InputContainer>
</ConfigLayout>
`;

exports[`CorrectResponse renders snapshot 1`] = `
<div>
  <div>
    Define Correct Response
  </div>
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to define the correct answer.
        </span>
      </WithStyles(Typography)>
      <div
        className=""
        key="correct-response-graph-undefined"
      >
        <Chart
          addCategoryEnabled={true}
          categoryDefaultLabel="Category"
          chartType="lineCross"
          data={Array []}
          domain={Object {}}
          onDataChange={[Function]}
          range={
            Object {
              "label": "",
              "max": 1,
              "min": 0,
            }
          }
          size={
            Object {
              "height": 480,
              "width": 480,
            }
          }
          title=""
        />
      </div>
    </div>
  </div>
</div>
`;
