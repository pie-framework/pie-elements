// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChartingConfig renders snapshot 1`] = `
<div>
  Define Initial Chart Attributes
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to set up the chart as it will initially appear to students.
        </span>
      </WithStyles(Typography)>
      <Chart
        addCategoryEnabled={true}
        categoryDefaultLabel="Category"
        chartType="lineCross"
        data={Array []}
        defineChart={true}
        domain={
          Object {
            "label": "Fruits",
          }
        }
        onChangeLeftLabel={[Function]}
        onChangeRightLabel={[Function]}
        onChangeTitle={[Function]}
        onDataChange={[Function]}
        range={
          Object {
            "label": "Amount",
            "max": 5.5,
            "min": 0,
          }
        }
        size={
          Object {
            "height": 480,
            "width": 480,
          }
        }
        title="This is a chart!"
      />
      <div>
        <WithStyles(Checkbox)
          checked={true}
          onChange={[Function]}
        />
        Student can add categories
      </div>
    </div>
  </div>
</div>
`;

exports[`Configure renders snapshot 1`] = `
<ConfigLayout
  settings={
    <Panel
      configuration={
        Object {
          "maxImageHeight": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "placeholderMessages": Object {
            "labels": "Click here to add a label for this axis",
            "title": "Click here to add a title",
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": true,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
          "title": Object {
            "label": "Chart Title",
            "settings": false,
          },
        }
      }
      groups={
        Object {
          "Item Type": Object {
            "graph": undefined,
            "title.enabled": false,
          },
          "Properties": Object {
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {
            "label": "Fruits",
          },
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "Here goes item stem!",
          "promptEnabled": true,
          "range": Object {
            "label": "Amount",
            "max": 5.5,
            "min": 0,
          },
          "rationale": "Rationale goes here!",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "This is a chart!",
        }
      }
    />
  }
>
  <div>
    <WithStyles(Typography)
      component="div"
      type="body1"
    >
      <span>
        This item type provides various types of interactive charts. Depending upon how an item is configured, students can change the heights of bars (or other similar chart elements) created by the author; relabel bars created by the author; and/or add new bars, label them, and set their heights.
      </span>
    </WithStyles(Typography)>
    <InputContainer
      label="Teacher Instructions"
    >
      <EditableHtml
        markup=""
        maxImageHeight={300}
        maxImageWidth={300}
        nonEmpty={false}
        onChange={[Function]}
      />
    </InputContainer>
    <InputContainer
      label="Item Stem"
    >
      <EditableHtml
        disableUnderline={true}
        markup="Here goes item stem!"
        maxImageHeight={300}
        maxImageWidth={300}
        nonEmpty={false}
        onChange={[Function]}
      />
    </InputContainer>
    <InputContainer
      label="Rationale"
    >
      <EditableHtml
        markup="Rationale goes here!"
        maxImageHeight={300}
        maxImageWidth={300}
        onChange={[Function]}
      />
    </InputContainer>
    <Component
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      gridValues={
        Object {
          "range": Array [
            0.2,
            0.25,
            0.5,
            1,
          ],
        }
      }
      labelValues={
        Object {
          "range": Array [
            0,
            1,
            2,
            4,
            5,
            10,
          ],
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {
            "label": "Fruits",
          },
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "Here goes item stem!",
          "promptEnabled": true,
          "range": Object {
            "label": "Amount",
            "max": 5.5,
            "min": 0,
          },
          "rationale": "Rationale goes here!",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "This is a chart!",
        }
      }
      onChange={[Function]}
    />
    <WithStyles(ChartingConfig)
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {
            "label": "Fruits",
          },
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "Here goes item stem!",
          "promptEnabled": true,
          "range": Object {
            "label": "Amount",
            "max": 5.5,
            "min": 0,
          },
          "rationale": "Rationale goes here!",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "This is a chart!",
        }
      }
      placeholderMessages={
        Object {
          "labels": "Click here to add a label for this axis",
          "title": "Click here to add a title",
        }
      }
    />
    <WithStyles(CorrectResponse)
      charts={
        Array [
          Object {
            "Component": [Function],
            "type": "bar",
          },
          Object {
            "Component": [Function],
            "type": "histogram",
          },
          Object {
            "Component": [Function],
            "type": "lineDot",
          },
          Object {
            "Component": [Function],
            "type": "lineCross",
          },
          Object {
            "Component": [Function],
            "type": "dotPlot",
          },
          Object {
            "Component": [Function],
            "type": "linePlot",
          },
        ]
      }
      config={
        Object {
          "height": 480,
          "width": 480,
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "categoryDefaultLabel": "Category",
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {
            "label": "Fruits",
          },
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "Here goes item stem!",
          "promptEnabled": true,
          "range": Object {
            "label": "Amount",
            "max": 5.5,
            "min": 0,
          },
          "rationale": "Rationale goes here!",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "teacherInstructionsEnabled": true,
          "title": "This is a chart!",
        }
      }
    />
  </div>
</ConfigLayout>
`;

exports[`CorrectResponse renders snapshot 1`] = `
<div>
  Define Correct Response
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to define the correct answer.
        </span>
      </WithStyles(Typography)>
      <div
        key="correct-response-graph-undefined"
      >
        <Chart
          addCategoryEnabled={true}
          categoryDefaultLabel="Category"
          chartType="lineCross"
          data={Array []}
          domain={
            Object {
              "label": "Fruits",
            }
          }
          onDataChange={[Function]}
          range={
            Object {
              "label": "Amount",
              "max": 5.5,
              "min": 0,
            }
          }
          size={
            Object {
              "height": 480,
              "width": 480,
            }
          }
          title="This is a chart!"
        />
      </div>
    </div>
  </div>
</div>
`;
