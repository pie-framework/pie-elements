// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChartingConfig renders snapshot 1`] = `
<div>
  <div>
    Define Initial Chart Attributes
  </div>
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to set up the chart as it will initially appear to students.
        </span>
      </WithStyles(Typography)>
      <Chart
        addCategoryEnabled={true}
        changeEditableEnabled={false}
        changeInteractiveEnabled={false}
        chartType="lineCross"
        data={Array []}
        defineChart={true}
        domain={Object {}}
        mathMlOptions={Object {}}
        onChangeLabels={[Function]}
        onChangeTitle={[Function]}
        onDataChange={[Function]}
        range={
          Object {
            "label": "",
            "max": 1,
            "min": 0,
          }
        }
        size={
          Object {
            "height": 480,
            "width": 480,
          }
        }
        title=""
      />
      <Component
        open={false}
      />
    </div>
  </div>
</div>
`;

exports[`Configure renders snapshot 1`] = `
<ConfigLayout
  dimensions={Object {}}
  hideSettings={false}
  settings={
    <Panel
      configuration={
        Object {
          "authorNewCategoryDefaults": Object {
            "editable": false,
            "interactive": true,
            "label": "Category",
            "settings": false,
          },
          "availableChartTypes": Object {
            "bar": "Bar Chart",
            "dotPlot": "Dot/Line Plot ⬤",
            "histogram": "Histogram",
            "lineCross": "Line Chart x",
            "lineDot": "Line Chart ●",
            "linePlot": "Dot/Line Plot X",
          },
          "chartDimensions": Object {
            "height": Object {
              "max": 700,
              "min": 400,
              "step": 20,
            },
            "label": "Chart Dimensions",
            "settings": false,
            "showInConfigPanel": true,
            "width": Object {
              "max": 700,
              "min": 50,
              "step": 20,
            },
          },
          "chartTypeLabel": "ChartType",
          "chartingOptions": Object {
            "addCategory": Object {
              "authoringLabel": "Student can add categories",
              "settings": false,
              "settingsLabel": "Allow changes to whether students can add categories",
            },
            "changeEditable": Object {
              "authoringLabel": "Student can edit name",
              "settings": false,
              "settingsLabel": "Allow editable category names",
            },
            "changeInteractive": Object {
              "authoringLabel": "Student can set value",
              "settings": false,
              "settingsLabel": "Allow non-interactive categories",
            },
            "mathMlOptions": Object {
              "mmlEditing": false,
              "mmlOutput": false,
            },
          },
          "instruction": Object {
            "label": "This item type provides various types of interactive charts. Depending upon how an item is configured,
          students can change the heights of bars (or other similar chart elements) created by the author; relabel bars
          created by the author; and/or add new bars, label them, and set their heights.",
            "settings": false,
          },
          "labelsPlaceholders": Object {
            "bottom": "Click here to add a label for this axis",
            "left": "Click here to add a label for this axis",
            "right": "",
            "top": "",
          },
          "language": Object {
            "enabled": false,
            "label": "Specify Language",
            "settings": false,
          },
          "languageChoices": Object {
            "label": "Language Choices",
            "options": Array [],
          },
          "maxImageHeight": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "maxImageWidth": Object {
            "prompt": 300,
            "rationale": 300,
            "teacherInstructions": 300,
          },
          "prompt": Object {
            "label": "Item Stem",
            "settings": true,
          },
          "rationale": Object {
            "label": "Rationale",
            "settings": true,
          },
          "scoringType": Object {
            "label": "Scoring Type",
            "settings": false,
          },
          "settingsPanelDisabled": false,
          "spellCheck": Object {
            "enabled": true,
            "label": "Spellcheck",
            "settings": false,
          },
          "studentInstructions": Object {
            "label": "Student Instructions",
            "settings": false,
          },
          "studentNewCategoryDefaultLabel": Object {
            "label": "Category",
            "settings": false,
          },
          "teacherInstructions": Object {
            "label": "Teacher Instructions",
            "settings": true,
          },
          "title": Object {
            "label": "Chart Title",
            "settings": false,
          },
          "titlePlaceholder": Object {
            "label": "Click here to add a title",
            "settings": false,
          },
          "withRubric": Object {
            "label": "Add Rubric",
            "settings": false,
          },
        }
      }
      groups={
        Object {
          "Properties": Object {
            "instruction": false,
            "language": false,
            "language.enabled": false,
            "promptEnabled": undefined,
            "rationaleEnabled": undefined,
            "rubricEnabled": false,
            "scoringType": false,
            "spellCheckEnabled": false,
            "studentInstructionsEnabled": false,
            "teacherInstructionsEnabled": undefined,
          },
          "Settings": Object {
            "changeAddCategoryEnabled": false,
            "changeEditableEnabled": false,
            "changeInteractiveEnabled": false,
          },
        }
      }
      model={
        Object {
          "addCategoryEnabled": true,
          "changeAddCategoryEnabled": false,
          "changeEditableEnabled": false,
          "changeInteractiveEnabled": false,
          "chartType": "lineCross",
          "correctAnswer": Object {},
          "data": Array [],
          "domain": Object {},
          "graph": Object {
            "height": 480,
            "width": 480,
          },
          "prompt": "",
          "promptEnabled": true,
          "range": Object {
            "label": "",
            "max": 1,
            "min": 0,
          },
          "rationale": "",
          "rationaleEnabled": true,
          "scoringType": "all or nothing",
          "studentInstructionsEnabled": true,
          "studentNewCategoryDefaultLabel": "New Category",
          "teacherInstructionsEnabled": true,
          "title": "",
        }
      }
    />
  }
>
  <WithStyles(Typography)
    component="div"
    type="body1"
  >
    This item type provides various types of interactive charts. Depending upon how an item is configured,
          students can change the heights of bars (or other similar chart elements) created by the author; relabel bars
          created by the author; and/or add new bars, label them, and set their heights.
  </WithStyles(Typography)>
  <InputContainer
    label="Teacher Instructions"
  >
    <ForwardRef
      allowValidation={false}
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      mathMlOptions={Object {}}
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
      onDone={[Function]}
    />
  </InputContainer>
  <InputContainer
    label="Item Stem"
  >
    <ForwardRef
      allowValidation={false}
      disableUnderline={true}
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      mathMlOptions={Object {}}
      maxImageHeight={300}
      maxImageWidth={300}
      nonEmpty={false}
      onChange={[Function]}
      onDone={[Function]}
    />
  </InputContainer>
  <Component
    availableChartTypes={
      Object {
        "bar": "Bar Chart",
        "dotPlot": "Dot/Line Plot ⬤",
        "histogram": "Histogram",
        "lineCross": "Line Chart x",
        "lineDot": "Line Chart ●",
        "linePlot": "Dot/Line Plot X",
      }
    }
    chartDimensions={
      Object {
        "height": Object {
          "max": 700,
          "min": 400,
          "step": 20,
        },
        "label": "Chart Dimensions",
        "settings": false,
        "showInConfigPanel": true,
        "width": Object {
          "max": 700,
          "min": 50,
          "step": 20,
        },
      }
    }
    chartTypeLabel="ChartType"
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    gridValues={
      Object {
        "range": Array [
          0.05,
          0.1,
          0.2,
        ],
      }
    }
    labelValues={
      Object {
        "range": Array [
          0,
          1,
          2,
          4,
          5,
          10,
        ],
      }
    }
    model={
      Object {
        "addCategoryEnabled": true,
        "changeAddCategoryEnabled": false,
        "changeEditableEnabled": false,
        "changeInteractiveEnabled": false,
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "studentNewCategoryDefaultLabel": "New Category",
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
    onChange={[Function]}
    studentNewCategoryDefaultLabel="New Category"
  />
  <WithStyles(ChartingConfig)
    authorNewCategoryDefaults={
      Object {
        "editable": false,
        "interactive": true,
        "label": "Category",
        "settings": false,
      }
    }
    chartingOptions={
      Object {
        "addCategory": Object {
          "authoringLabel": "Student can add categories",
          "settings": false,
          "settingsLabel": "Allow changes to whether students can add categories",
        },
        "changeEditable": Object {
          "authoringLabel": "Student can edit name",
          "settings": false,
          "settingsLabel": "Allow editable category names",
        },
        "changeInteractive": Object {
          "authoringLabel": "Student can set value",
          "settings": false,
          "settingsLabel": "Allow non-interactive categories",
        },
        "mathMlOptions": Object {
          "mmlEditing": false,
          "mmlOutput": false,
        },
      }
    }
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    labelsPlaceholders={
      Object {
        "bottom": "Click here to add a label for this axis",
        "left": "Click here to add a label for this axis",
        "right": "",
        "top": "",
      }
    }
    mathMlOptions={Object {}}
    model={
      Object {
        "addCategoryEnabled": true,
        "changeAddCategoryEnabled": false,
        "changeEditableEnabled": false,
        "changeInteractiveEnabled": false,
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "studentNewCategoryDefaultLabel": "New Category",
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
    showPixelGuides={true}
    titlePlaceholder={
      Object {
        "label": "Click here to add a title",
        "settings": false,
      }
    }
  />
  <WithStyles(CorrectResponse)
    charts={
      Array [
        Object {
          "Component": [Function],
          "type": "bar",
        },
        Object {
          "Component": [Function],
          "type": "histogram",
        },
        Object {
          "Component": [Function],
          "type": "lineDot",
        },
        Object {
          "Component": [Function],
          "type": "lineCross",
        },
        Object {
          "Component": [Function],
          "type": "dotPlot",
        },
        Object {
          "Component": [Function],
          "type": "linePlot",
        },
      ]
    }
    config={
      Object {
        "height": 480,
        "width": 480,
      }
    }
    mathMlOptions={Object {}}
    model={
      Object {
        "addCategoryEnabled": true,
        "changeAddCategoryEnabled": false,
        "changeEditableEnabled": false,
        "changeInteractiveEnabled": false,
        "chartType": "lineCross",
        "correctAnswer": Object {},
        "data": Array [],
        "domain": Object {},
        "graph": Object {
          "height": 480,
          "width": 480,
        },
        "prompt": "",
        "promptEnabled": true,
        "range": Object {
          "label": "",
          "max": 1,
          "min": 0,
        },
        "rationale": "",
        "rationaleEnabled": true,
        "scoringType": "all or nothing",
        "studentInstructionsEnabled": true,
        "studentNewCategoryDefaultLabel": "New Category",
        "teacherInstructionsEnabled": true,
        "title": "",
      }
    }
    studentNewCategoryDefaultLabel="New Category"
  />
  <InputContainer
    label="Rationale"
  >
    <ForwardRef
      allowValidation={false}
      languageCharactersProps={
        Array [
          Object {
            "language": "spanish",
          },
          Object {
            "language": "special",
          },
        ]
      }
      markup=""
      mathMlOptions={Object {}}
      maxImageHeight={300}
      maxImageWidth={300}
      onChange={[Function]}
      onDone={[Function]}
    />
  </InputContainer>
</ConfigLayout>
`;

exports[`CorrectResponse renders snapshot 1`] = `
<div>
  <div>
    Define Correct Response
  </div>
  <div>
    <div
      key="graph"
    >
      <WithStyles(Typography)
        component="div"
        type="body1"
      >
        <span>
          Use the tools below to define the correct answer.
        </span>
      </WithStyles(Typography)>
      <div
        className=""
        key="correct-response-graph-undefined"
      >
        <Chart
          addCategoryEnabled={true}
          chartType="lineCross"
          data={Array []}
          domain={Object {}}
          mathMlOptions={Object {}}
          onDataChange={[Function]}
          range={
            Object {
              "label": "",
              "max": 1,
              "min": 0,
            }
          }
          size={
            Object {
              "height": 480,
              "width": 480,
            }
          }
          title=""
        />
      </div>
    </div>
  </div>
</div>
`;
