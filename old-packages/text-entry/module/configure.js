import {
  _dll_pie_lib__config_ui,
  _dll_pie_lib__editable_html,
  _dll_pie_framework__pie_configure_events,
} from '../../shared-config@1.2.0/module/index.js';
var commonjsGlobal =
  typeof globalThis !== 'undefined'
    ? globalThis
    : typeof window !== 'undefined'
    ? window
    : typeof global !== 'undefined'
    ? global
    : typeof self !== 'undefined'
    ? self
    : {};
function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function createCommonjsModule(fn, module) {
  return (
    (module = {
      exports: {},
    }),
    fn(module, module.exports),
    module.exports
  );
}
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative()
  ? Object.assign
  : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
function A(a) {
  for (
    var b = a.message, c = 'https://reactjs.org/docs/error-decoder.html?invariant=' + b, d = 1;
    d < arguments.length;
    d++
  )
    c += '&args[]=' + encodeURIComponent(arguments[d]);
  a.message =
    'Minified React error #' +
    b +
    '; visit ' +
    c +
    ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ';
  return a;
}
var B = {
    isMounted: function () {
      return !1;
    },
    enqueueForceUpdate: function () {},
    enqueueReplaceState: function () {},
    enqueueSetState: function () {},
  },
  C = {};
function D(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = C;
  this.updater = c || B;
}
D.prototype.isReactComponent = {};
D.prototype.setState = function (a, b) {
  if ('object' !== typeof a && 'function' !== typeof a && null != a) throw A(Error(85));
  this.updater.enqueueSetState(this, a, b, 'setState');
};
D.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, 'forceUpdate');
};
function E() {}
E.prototype = D.prototype;
function F(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = C;
  this.updater = c || B;
}
var G = (F.prototype = new E());
G.constructor = F;
objectAssign(G, D.prototype);
G.isPureReactComponent = !0;
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret;
var printWarning = function () {};
{
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        try {
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') +
                ': ' +
                location +
                ' type `' +
                typeSpecName +
                '` is invalid; ' +
                'it must be a function, usually from the `prop-types` package, but received `' +
                typeof typeSpecs[typeSpecName] +
                '`.',
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') +
              ': type specification of ' +
              location +
              ' `' +
              typeSpecName +
              '` is invalid; the type checker ' +
              'function must return `null` or an `Error` but returned a ' +
              typeof error +
              '. ' +
              'You may have forgotten to pass an argument to the type checker ' +
              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
              'shape all require an argument).',
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
checkPropTypes.resetWarningCache = function () {
  {
    loggedTypeFailures = {};
  }
};
var checkPropTypes_1 = checkPropTypes;
var react_development = createCommonjsModule(function (module) {
  {
    (function () {
      var _assign = objectAssign;
      var checkPropTypes = checkPropTypes_1;
      var ReactVersion = '16.10.2';
      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
          return null;
        }
        var maybeIterator =
          (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }
        return null;
      }
      function ReactError(error) {
        error.name = 'Invariant Violation';
        return error;
      }
      var lowPriorityWarningWithoutStack = function () {};
      {
        var printWarning = function (format) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var argIndex = 0;
          var message =
            'Warning: ' +
            format.replace(/%s/g, function () {
              return args[argIndex++];
            });
          if (typeof console !== 'undefined') {
            console.warn(message);
          }
          try {
            throw new Error(message);
          } catch (x) {}
        };
        lowPriorityWarningWithoutStack = function (condition, format) {
          if (format === undefined) {
            throw new Error(
              '`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument',
            );
          }
          if (!condition) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(void 0, [format].concat(args));
          }
        };
      }
      var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;
      var warningWithoutStack = function () {};
      {
        warningWithoutStack = function (condition, format) {
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          if (format === undefined) {
            throw new Error(
              '`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument',
            );
          }
          if (args.length > 8) {
            throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
          if (condition) {
            return;
          }
          if (typeof console !== 'undefined') {
            var argsWithFormat = args.map(function (item) {
              return '' + item;
            });
            argsWithFormat.unshift('Warning: ' + format);
            Function.prototype.apply.call(console.error, console, argsWithFormat);
          }
          try {
            var argIndex = 0;
            var message =
              'Warning: ' +
              format.replace(/%s/g, function () {
                return args[argIndex++];
              });
            throw new Error(message);
          } catch (x) {}
        };
      }
      var warningWithoutStack$1 = warningWithoutStack;
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = (_constructor && (_constructor.displayName || _constructor.name)) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          warningWithoutStack$1(
            false,
            "Can't call %s on a component that is not yet mounted. " +
              'This is a no-op, but it might indicate a bug in your application. ' +
              'Instead, assign to `this.state` directly or define a `state = {};` ' +
              'class property with the desired state in the %s component.',
            callerName,
            componentName,
          );
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function (publicInstance) {
          return false;
        },
        enqueueForceUpdate: function (publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function (publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        },
      };
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function (partialState, callback) {
        (function () {
          if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
            {
              throw ReactError(
                Error(
                  'setState(...): takes an object of state variables to update or a function which returns an object of state variables.',
                ),
              );
            }
          }
        })();
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };
      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };
      {
        var deprecatedAPIs = {
          isMounted: [
            'isMounted',
            'Instead, make sure to clean up subscriptions and pending requests in ' +
              'componentWillUnmount to prevent memory leaks.',
          ],
          replaceState: [
            'replaceState',
            'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).',
          ],
        };
        var defineDeprecationWarning = function (methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function () {
              lowPriorityWarningWithoutStack$1(
                false,
                '%s(...) is deprecated in plain JavaScript React classes. %s',
                info[0],
                info[1],
              );
              return undefined;
            },
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {}
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
      pureComponentPrototype.constructor = PureComponent;
      _assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null,
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var ReactCurrentDispatcher = {
        current: null,
      };
      var ReactCurrentBatchConfig = {
        suspense: null,
      };
      var ReactCurrentOwner = {
        current: null,
      };
      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
      var describeComponentFrame = function (name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, '');
          {
            if (/^index\./.test(fileName)) {
              var match = path.match(BEFORE_SLASH_RE);
              if (match) {
                var pathBeforeSlash = match[1];
                if (pathBeforeSlash) {
                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                  fileName = folderName + '/' + fileName;
                }
              }
            }
          }
          sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        } else if (ownerName) {
          sourceInfo = ' (created by ' + ownerName + ')';
        }
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
      };
      var Resolved = 1;
      function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === 'number') {
            warningWithoutStack$1(
              false,
              'Received an unexpected object in getComponentName(). ' +
                'This is likely a bug in React. Please file an issue.',
            );
          }
        }
        if (typeof type === 'function') {
          return type.displayName || type.name || null;
        }
        if (typeof type === 'string') {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'Fragment';
          case REACT_PORTAL_TYPE:
            return 'Portal';
          case REACT_PROFILER_TYPE:
            return 'Profiler';
          case REACT_STRICT_MODE_TYPE:
            return 'StrictMode';
          case REACT_SUSPENSE_TYPE:
            return 'Suspense';
          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList';
        }
        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              return 'Context.Consumer';
            case REACT_PROVIDER_TYPE:
              return 'Context.Provider';
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_LAZY_TYPE: {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
              break;
            }
          }
        }
        return null;
      }
      var ReactDebugCurrentFrame = {};
      var currentlyValidatingElement = null;
      function setCurrentlyValidatingElement(element) {
        {
          currentlyValidatingElement = element;
        }
      }
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function () {
          var stack = '';
          if (currentlyValidatingElement) {
            var name = getComponentName(currentlyValidatingElement.type);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(
              name,
              currentlyValidatingElement._source,
              owner && getComponentName(owner.type),
            );
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || '';
          }
          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false,
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        assign: _assign,
      };
      {
        _assign(ReactSharedInternals, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {},
        });
      }
      var warning = warningWithoutStack$1;
      {
        warning = function (condition, format) {
          if (condition) {
            return;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
        };
      }
      var warning$1 = warning;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true,
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function () {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warningWithoutStack$1(
              false,
              '%s: `key` is not a prop. Trying to access it will result ' +
                'in `undefined` being returned. If you need to access the same ' +
                'value within the child component, you should pass it as a different ' +
                'prop. (https://fb.me/react-special-props)',
              displayName,
            );
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true,
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function () {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warningWithoutStack$1(
              false,
              '%s: `ref` is not a prop. Trying to access it will result ' +
                'in `undefined` being returned. If you need to access the same ' +
                'value within the child component, you should pass it as a different ' +
                'prop. (https://fb.me/react-special-props)',
              displayName,
            );
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true,
        });
      }
      var ReactElement = function (type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner,
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false,
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self,
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source,
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }
          if (hasValidKey(config)) {
            key = '' + config.key;
          }
          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(
          oldElement.type,
          newKey,
          oldElement.ref,
          oldElement._self,
          oldElement._source,
          oldElement._owner,
          oldElement.props,
        );
        return newElement;
      }
      function cloneElement(element, config, children) {
        (function () {
          if (!!(element === null || element === undefined)) {
            {
              throw ReactError(
                Error('React.cloneElement(...): The argument must be a React element, but you passed ' + element + '.'),
              );
            }
          }
        })();
        var propName;
        var props = _assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key = '' + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2',
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }
      var POOL_SIZE = 10;
      var traverseContextPool = [];
      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0,
          };
        }
      }
      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;
        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }
      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;
            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                !didWarnAboutMaps
                  ? warning$1(
                      false,
                      'Using Maps as children is unsupported and will likely yield ' +
                        'unexpected results. Convert it to a sequence/iterable of keyed ' +
                        'ReactElements instead.',
                    )
                  : void 0;
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum =
                ' If you meant to render a collection of children, use an array ' +
                'instead.' +
                ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'Objects are not valid as a React child (found: ' +
                        (childrenString === '[object Object]'
                          ? 'object with keys {' + Object.keys(children).join(', ') + '}'
                          : childrenString) +
                        ').' +
                        addendum,
                    ),
                  );
                }
              }
            })();
          }
        }
        return subtreeCount;
      }
      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }
        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }
      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }
        return index.toString(36);
      }
      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
          context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }
        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }
      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);
        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(
              mappedChild,
              keyPrefix +
                (mappedChild.key && (!child || child.key !== mappedChild.key)
                  ? escapeUserProvidedKey(mappedChild.key) + '/'
                  : '') +
                childKey,
            );
          }
          result.push(mappedChild);
        }
      }
      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';
        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }
        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }
      function countChildren(children) {
        return traverseAllChildren(
          children,
          function () {
            return null;
          },
          null,
        );
      }
      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
          return child;
        });
        return result;
      }
      function onlyChild(children) {
        (function () {
          if (!isValidElement(children)) {
            {
              throw ReactError(Error('React.Children.only expected to receive a single React element child.'));
            }
          }
        })();
        return children;
      }
      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            !(calculateChangedBits === null || typeof calculateChangedBits === 'function')
              ? warningWithoutStack$1(
                  false,
                  'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s',
                  calculateChangedBits,
                )
              : void 0;
          }
        }
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context,
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits,
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function () {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  warning$1(
                    false,
                    'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +
                      'a future major release. Did you mean to render <Context.Provider> instead?',
                  );
                }
                return context.Provider;
              },
              set: function (_Provider) {
                context.Provider = _Provider;
              },
            },
            _currentValue: {
              get: function () {
                return context._currentValue;
              },
              set: function (_currentValue) {
                context._currentValue = _currentValue;
              },
            },
            _currentValue2: {
              get: function () {
                return context._currentValue2;
              },
              set: function (_currentValue2) {
                context._currentValue2 = _currentValue2;
              },
            },
            _threadCount: {
              get: function () {
                return context._threadCount;
              },
              set: function (_threadCount) {
                context._threadCount = _threadCount;
              },
            },
            Consumer: {
              get: function () {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  warning$1(
                    false,
                    'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +
                      'a future major release. Did you mean to render <Context.Consumer> instead?',
                  );
                }
                return context.Consumer;
              },
            },
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      function lazy(ctor) {
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _ctor: ctor,
          _status: -1,
          _result: null,
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function () {
                return defaultProps;
              },
              set: function (newDefaultProps) {
                warning$1(
                  false,
                  'React.lazy(...): It is not supported to assign `defaultProps` to ' +
                    'a lazy component import. Either specify them where the component ' +
                    'is defined, or create a wrapping component around it.',
                );
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, 'defaultProps', {
                  enumerable: true,
                });
              },
            },
            propTypes: {
              configurable: true,
              get: function () {
                return propTypes;
              },
              set: function (newPropTypes) {
                warning$1(
                  false,
                  'React.lazy(...): It is not supported to assign `propTypes` to ' +
                    'a lazy component import. Either specify them where the component ' +
                    'is defined, or create a wrapping component around it.',
                );
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, 'propTypes', {
                  enumerable: true,
                });
              },
            },
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            warningWithoutStack$1(
              false,
              'forwardRef requires a render function but received a `memo` ' +
                'component. Instead of forwardRef(memo(...)), use ' +
                'memo(forwardRef(...)).',
            );
          } else if (typeof render !== 'function') {
            warningWithoutStack$1(
              false,
              'forwardRef requires a render function but was given %s.',
              render === null ? 'null' : typeof render,
            );
          } else {
            !(render.length === 0 || render.length === 2)
              ? warningWithoutStack$1(
                  false,
                  'forwardRef render functions accept exactly two parameters: props and ref. %s',
                  render.length === 1
                    ? 'Did you forget to use the ref parameter?'
                    : 'Any additional parameter will be undefined.',
                )
              : void 0;
          }
          if (render != null) {
            !(render.defaultProps == null && render.propTypes == null)
              ? warningWithoutStack$1(
                  false,
                  'forwardRef render functions do not support propTypes or defaultProps. ' +
                    'Did you accidentally pass a React component?',
                )
              : void 0;
          }
        }
        return {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render,
        };
      }
      function isValidElementType(type) {
        return (
          typeof type === 'string' ||
          typeof type === 'function' ||
          type === REACT_FRAGMENT_TYPE ||
          type === REACT_CONCURRENT_MODE_TYPE ||
          type === REACT_PROFILER_TYPE ||
          type === REACT_STRICT_MODE_TYPE ||
          type === REACT_SUSPENSE_TYPE ||
          type === REACT_SUSPENSE_LIST_TYPE ||
          (typeof type === 'object' &&
            type !== null &&
            (type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE ||
              type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
              type.$$typeof === REACT_RESPONDER_TYPE ||
              type.$$typeof === REACT_SCOPE_TYPE))
        );
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            warningWithoutStack$1(
              false,
              'memo: The first argument must be a component. Instead ' + 'received: %s',
              type === null ? 'null' : typeof type,
            );
          }
        }
        return {
          $$typeof: REACT_MEMO_TYPE,
          type: type,
          compare: compare === undefined ? null : compare,
        };
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        (function () {
          if (!(dispatcher !== null)) {
            {
              throw ReactError(
                Error(
                  'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.',
                ),
              );
            }
          }
        })();
        return dispatcher;
      }
      function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          !(unstable_observedBits === undefined)
            ? warning$1(
                false,
                'useContext() second argument is reserved for future ' +
                  'use in React. Passing it is not supported. ' +
                  'You passed: %s.%s',
                unstable_observedBits,
                typeof unstable_observedBits === 'number' && Array.isArray(arguments[2])
                  ? '\n\nDid you call array.map(useContext)? ' +
                      'Calling Hooks inside a loop is not supported. ' +
                      'Learn more at https://fb.me/rules-of-hooks'
                  : '',
              )
            : void 0;
          if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              warning$1(
                false,
                'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +
                  'removed in a future major release. Did you mean to call useContext(Context) instead?',
              );
            } else if (realContext.Provider === Context) {
              warning$1(
                false,
                'Calling useContext(Context.Provider) is not supported. ' +
                  'Did you mean to call useContext(Context) instead?',
              );
            }
          }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, inputs);
      }
      function useLayoutEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, inputs);
      }
      function useCallback(callback, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, inputs);
      }
      function useMemo(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, inputs);
      }
      function useImperativeHandle(ref, create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, inputs);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function withSuspenseConfig(scope, config) {
        var previousConfig = ReactCurrentBatchConfig.suspense;
        ReactCurrentBatchConfig.suspense = config === undefined ? null : config;
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.suspense = previousConfig;
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current.type);
          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }
        return '';
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return '';
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
        }
        setCurrentlyValidatingElement(element);
        {
          warning$1(
            false,
            'Each child in a list should have a unique "key" prop.' +
              '%s%s See https://fb.me/react-warning-keys for more information.',
            currentComponentErrorInfo,
            childOwner,
          );
        }
        setCurrentlyValidatingElement(null);
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }
        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var name = getComponentName(type);
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (
          typeof type === 'object' &&
          (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)
        ) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          setCurrentlyValidatingElement(element);
          checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
          setCurrentlyValidatingElement(null);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warningWithoutStack$1(
            false,
            'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
            name || 'Unknown',
          );
        }
        if (typeof type.getDefaultProps === 'function') {
          !type.getDefaultProps.isReactClassApproved
            ? warningWithoutStack$1(
                false,
                'getDefaultProps is only used on classic React.createClass ' +
                  'definitions. Use a static property named `defaultProps` instead.',
              )
            : void 0;
        }
      }
      function validateFragmentProps(fragment) {
        setCurrentlyValidatingElement(fragment);
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            warning$1(
              false,
              'Invalid prop `%s` supplied to `React.Fragment`. ' +
                'React.Fragment can only have `key` and `children` props.',
              key,
            );
            break;
          }
        }
        if (fragment.ref !== null) {
          warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
        }
        setCurrentlyValidatingElement(null);
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = '';
          if (type === undefined || (typeof type === 'object' && type !== null && Object.keys(type).length === 0)) {
            info +=
              ' You likely forgot to export your component from the file ' +
              "it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = typeof type;
          }
          warning$1(
            false,
            'React.createElement: type is invalid -- expected a string (for ' +
              'built-in components) or a class/function (for composite ' +
              'components) but got: %s.%s',
            typeString,
            info,
          );
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
              lowPriorityWarningWithoutStack$1(
                false,
                'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.',
              );
              Object.defineProperty(this, 'type', {
                value: type,
              });
              return type;
            },
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      {
        try {
          var frozenObject = Object.freeze({});
          var testMap = new Map([[frozenObject, null]]);
          var testSet = new Set([frozenObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {}
      }
      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild,
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        lazy: lazy,
        memo: memo,
        useCallback: useCallback,
        useContext: useContext,
        useEffect: useEffect,
        useImperativeHandle: useImperativeHandle,
        useDebugValue: useDebugValue,
        useLayoutEffect: useLayoutEffect,
        useMemo: useMemo,
        useReducer: useReducer,
        useRef: useRef,
        useState: useState,
        Fragment: REACT_FRAGMENT_TYPE,
        Profiler: REACT_PROFILER_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        Suspense: REACT_SUSPENSE_TYPE,
        unstable_SuspenseList: REACT_SUSPENSE_LIST_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        unstable_withSuspenseConfig: withSuspenseConfig,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals,
      };
      var React$2 = Object.freeze({
        default: React,
      });
      var React$3 = (React$2 && React) || React$2;
      var react = React$3.default || React$3;
      module.exports = react;
    })();
  }
});
var react = createCommonjsModule(function (module) {
  {
    module.exports = react_development;
  }
});
var react_1 = react.memo;
var react_2 = react.useLayoutEffect;
var react_3 = react.useEffect;
var react_4 = react.useState;
var react_5 = react.useCallback;
var react_6 = react.useContext;
var react_7 = react.cloneElement;
var react_8 = react.createElement;
var react_9 = react.createContext;
var react_10 = react.isValidElement;
var react_11 = react.useMemo;
var react_12 = react.useRef;
var react_13 = react.createRef;
var react_14 = react.Component;
var scheduler_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: !0,
  });
  var f, g, h, k, l;
  if ('undefined' === typeof window || 'function' !== typeof MessageChannel) {
    var p = null,
      q = null,
      t = function () {
        if (null !== p)
          try {
            var a = exports.unstable_now();
            p(!0, a);
            p = null;
          } catch (b) {
            throw (setTimeout(t, 0), b);
          }
      },
      u = Date.now();
    exports.unstable_now = function () {
      return Date.now() - u;
    };
    f = function (a) {
      null !== p ? setTimeout(f, 0, a) : ((p = a), setTimeout(t, 0));
    };
    g = function (a, b) {
      q = setTimeout(a, b);
    };
    h = function () {
      clearTimeout(q);
    };
    k = function () {
      return !1;
    };
    l = exports.unstable_forceFrameRate = function () {};
  } else {
    var w = window.performance,
      x = window.Date,
      y = window.setTimeout,
      z = window.clearTimeout,
      A = window.requestAnimationFrame,
      B = window.cancelAnimationFrame;
    'undefined' !== typeof console &&
      ('function' !== typeof A &&
        console.error(
          "This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills",
        ),
      'function' !== typeof B &&
        console.error(
          "This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills",
        ));
    if ('object' === typeof w && 'function' === typeof w.now)
      exports.unstable_now = function () {
        return w.now();
      };
    else {
      var C = x.now();
      exports.unstable_now = function () {
        return x.now() - C;
      };
    }
    var D = !1,
      E = null,
      F = -1,
      G = 5,
      H = 0;
    k = function () {
      return exports.unstable_now() >= H;
    };
    l = function () {};
    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a
        ? console.error(
            'forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported',
          )
        : (G = 0 < a ? Math.floor(1e3 / a) : 33.33);
    };
    var I = new MessageChannel(),
      J = I.port2;
    I.port1.onmessage = function () {
      if (null !== E) {
        var a = exports.unstable_now();
        H = a + G;
        try {
          E(!0, a) ? J.postMessage(null) : ((D = !1), (E = null));
        } catch (b) {
          throw (J.postMessage(null), b);
        }
      } else D = !1;
    };
    f = function (a) {
      E = a;
      D || ((D = !0), J.postMessage(null));
    };
    g = function (a, b) {
      F = y(function () {
        a(exports.unstable_now());
      }, b);
    };
    h = function () {
      z(F);
      F = -1;
    };
  }
  function K(a, b) {
    var c = a.length;
    a.push(b);
    a: for (;;) {
      var d = Math.floor((c - 1) / 2),
        e = a[d];
      if (void 0 !== e && 0 < L(e, b)) (a[d] = b), (a[c] = e), (c = d);
      else break a;
    }
  }
  function M(a) {
    a = a[0];
    return void 0 === a ? null : a;
  }
  function N(a) {
    var b = a[0];
    if (void 0 !== b) {
      var c = a.pop();
      if (c !== b) {
        a[0] = c;
        a: for (var d = 0, e = a.length; d < e; ) {
          var m = 2 * (d + 1) - 1,
            n = a[m],
            v = m + 1,
            r = a[v];
          if (void 0 !== n && 0 > L(n, c))
            void 0 !== r && 0 > L(r, n) ? ((a[d] = r), (a[v] = c), (d = v)) : ((a[d] = n), (a[m] = c), (d = m));
          else if (void 0 !== r && 0 > L(r, c)) (a[d] = r), (a[v] = c), (d = v);
          else break a;
        }
      }
      return b;
    }
    return null;
  }
  function L(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
  }
  var O = [],
    P = [],
    Q = 1,
    R = null,
    S = 3,
    T = !1,
    U = !1,
    V = !1;
  function W(a) {
    for (var b = M(P); null !== b; ) {
      if (null === b.callback) N(P);
      else if (b.startTime <= a) N(P), (b.sortIndex = b.expirationTime), K(O, b);
      else break;
      b = M(P);
    }
  }
  function X(a) {
    V = !1;
    W(a);
    if (!U)
      if (null !== M(O)) (U = !0), f(Y);
      else {
        var b = M(P);
        null !== b && g(X, b.startTime - a);
      }
  }
  function Y(a, b) {
    U = !1;
    V && ((V = !1), h());
    T = !0;
    var c = S;
    try {
      W(b);
      for (R = M(O); null !== R && (!(R.expirationTime > b) || (a && !k())); ) {
        var d = R.callback;
        if (null !== d) {
          R.callback = null;
          S = R.priorityLevel;
          var e = d(R.expirationTime <= b);
          b = exports.unstable_now();
          'function' === typeof e ? (R.callback = e) : R === M(O) && N(O);
          W(b);
        } else N(O);
        R = M(O);
      }
      if (null !== R) var m = !0;
      else {
        var n = M(P);
        null !== n && g(X, n.startTime - b);
        m = !1;
      }
      return m;
    } finally {
      (R = null), (S = c), (T = !1);
    }
  }
  function Z(a) {
    switch (a) {
      case 1:
        return -1;
      case 2:
        return 250;
      case 5:
        return 1073741823;
      case 4:
        return 1e4;
      default:
        return 5e3;
    }
  }
  var aa = l;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_NormalPriority = 3;
  exports.unstable_IdlePriority = 5;
  exports.unstable_LowPriority = 4;
  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c = S;
    S = a;
    try {
      return b();
    } finally {
      S = c;
    }
  };
  exports.unstable_next = function (a) {
    switch (S) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = S;
    }
    var c = S;
    S = b;
    try {
      return a();
    } finally {
      S = c;
    }
  };
  exports.unstable_scheduleCallback = function (a, b, c) {
    var d = exports.unstable_now();
    if ('object' === typeof c && null !== c) {
      var e = c.delay;
      e = 'number' === typeof e && 0 < e ? d + e : d;
      c = 'number' === typeof c.timeout ? c.timeout : Z(a);
    } else (c = Z(a)), (e = d);
    c = e + c;
    a = {
      id: Q++,
      callback: b,
      priorityLevel: a,
      startTime: e,
      expirationTime: c,
      sortIndex: -1,
    };
    e > d
      ? ((a.sortIndex = e), K(P, a), null === M(O) && a === M(P) && (V ? h() : (V = !0), g(X, e - d)))
      : ((a.sortIndex = c), K(O, a), U || T || ((U = !0), f(Y)));
    return a;
  };
  exports.unstable_cancelCallback = function (a) {
    a.callback = null;
  };
  exports.unstable_wrapCallback = function (a) {
    var b = S;
    return function () {
      var c = S;
      S = b;
      try {
        return a.apply(this, arguments);
      } finally {
        S = c;
      }
    };
  };
  exports.unstable_getCurrentPriorityLevel = function () {
    return S;
  };
  exports.unstable_shouldYield = function () {
    var a = exports.unstable_now();
    W(a);
    var b = M(O);
    return (
      (b !== R &&
        null !== R &&
        null !== b &&
        null !== b.callback &&
        b.startTime <= a &&
        b.expirationTime < R.expirationTime) ||
      k()
    );
  };
  exports.unstable_requestPaint = aa;
  exports.unstable_continueExecution = function () {
    U || T || ((U = !0), f(Y));
  };
  exports.unstable_pauseExecution = function () {};
  exports.unstable_getFirstCallbackNode = function () {
    return M(O);
  };
  exports.unstable_Profiling = null;
});
unwrapExports(scheduler_production_min);
var scheduler_production_min_1 = scheduler_production_min.unstable_now;
var scheduler_production_min_2 = scheduler_production_min.unstable_forceFrameRate;
var scheduler_production_min_3 = scheduler_production_min.unstable_ImmediatePriority;
var scheduler_production_min_4 = scheduler_production_min.unstable_UserBlockingPriority;
var scheduler_production_min_5 = scheduler_production_min.unstable_NormalPriority;
var scheduler_production_min_6 = scheduler_production_min.unstable_IdlePriority;
var scheduler_production_min_7 = scheduler_production_min.unstable_LowPriority;
var scheduler_production_min_8 = scheduler_production_min.unstable_runWithPriority;
var scheduler_production_min_9 = scheduler_production_min.unstable_next;
var scheduler_production_min_10 = scheduler_production_min.unstable_scheduleCallback;
var scheduler_production_min_11 = scheduler_production_min.unstable_cancelCallback;
var scheduler_production_min_12 = scheduler_production_min.unstable_wrapCallback;
var scheduler_production_min_13 = scheduler_production_min.unstable_getCurrentPriorityLevel;
var scheduler_production_min_14 = scheduler_production_min.unstable_shouldYield;
var scheduler_production_min_15 = scheduler_production_min.unstable_requestPaint;
var scheduler_production_min_16 = scheduler_production_min.unstable_continueExecution;
var scheduler_production_min_17 = scheduler_production_min.unstable_pauseExecution;
var scheduler_production_min_18 = scheduler_production_min.unstable_getFirstCallbackNode;
var scheduler_production_min_19 = scheduler_production_min.unstable_Profiling;
var scheduler_development = createCommonjsModule(function (module, exports) {
  {
    (function () {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      var enableSchedulerDebugging = false;
      var enableProfiling = true;
      var requestHostCallback;
      var requestHostTimeout;
      var cancelHostTimeout;
      var shouldYieldToHost;
      var requestPaint;
      if (typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function () {
          if (_callback !== null) {
            try {
              var currentTime = exports.unstable_now();
              var hasRemainingTime = true;
              _callback(hasRemainingTime, currentTime);
              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };
        var initialTime = Date.now();
        exports.unstable_now = function () {
          return Date.now() - initialTime;
        };
        requestHostCallback = function (cb) {
          if (_callback !== null) {
            setTimeout(requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };
        requestHostTimeout = function (cb, ms) {
          _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function () {
          clearTimeout(_timeoutID);
        };
        shouldYieldToHost = function () {
          return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function () {};
      } else {
        var performance = window.performance;
        var _Date = window.Date;
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        var requestAnimationFrame = window.requestAnimationFrame;
        var cancelAnimationFrame = window.cancelAnimationFrame;
        if (typeof console !== 'undefined') {
          if (typeof requestAnimationFrame !== 'function') {
            console.error(
              "This browser doesn't support requestAnimationFrame. " +
                'Make sure that you load a ' +
                'polyfill in older browsers. https://fb.me/react-polyfills',
            );
          }
          if (typeof cancelAnimationFrame !== 'function') {
            console.error(
              "This browser doesn't support cancelAnimationFrame. " +
                'Make sure that you load a ' +
                'polyfill in older browsers. https://fb.me/react-polyfills',
            );
          }
        }
        if (typeof performance === 'object' && typeof performance.now === 'function') {
          exports.unstable_now = function () {
            return performance.now();
          };
        } else {
          var _initialTime = _Date.now();
          exports.unstable_now = function () {
            return _Date.now() - _initialTime;
          };
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameLength = 5;
        var frameDeadline = 0;
        {
          shouldYieldToHost = function () {
            return exports.unstable_now() >= frameDeadline;
          };
          requestPaint = function () {};
        }
        exports.unstable_forceFrameRate = function (fps) {
          if (fps < 0 || fps > 125) {
            console.error(
              'forceFrameRate takes a positive int between 0 and 125, ' +
                'forcing framerates higher than 125 fps is not unsupported',
            );
            return;
          }
          if (fps > 0) {
            frameLength = Math.floor(1000 / fps);
          } else {
            frameLength = 33.33;
          }
        };
        var performWorkUntilDeadline = function () {
          {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              frameDeadline = currentTime + frameLength;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          }
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function (callback) {
          scheduledHostCallback = callback;
          {
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          }
        };
        requestHostTimeout = function (callback, ms) {
          taskTimeoutID = _setTimeout(function () {
            callback(exports.unstable_now());
          }, ms);
        };
        cancelHostTimeout = function () {
          _clearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        };
      }
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
      }
      function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        } else {
          return null;
        }
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (true) {
          var parentIndex = Math.floor((index - 1) / 2);
          var parent = heap[parentIndex];
          if (parent !== undefined && compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while (index < length) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (left !== undefined && compare(left, node) < 0) {
            if (right !== undefined && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (right !== undefined && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var NoPriority = 0;
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      var runIdCounter = 0;
      var mainThreadIdCounter = 0;
      var profilingStateSize = 4;
      var sharedProfilingBuffer =
        typeof SharedArrayBuffer === 'function'
          ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT)
          : typeof ArrayBuffer === 'function'
          ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT)
          : null;
      var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
      var PRIORITY = 0;
      var CURRENT_TASK_ID = 1;
      var CURRENT_RUN_ID = 2;
      var QUEUE_SIZE = 3;
      {
        profilingState[PRIORITY] = NoPriority;
        profilingState[QUEUE_SIZE] = 0;
        profilingState[CURRENT_TASK_ID] = 0;
      }
      var INITIAL_EVENT_LOG_SIZE = 131072;
      var MAX_EVENT_LOG_SIZE = 524288;
      var eventLogSize = 0;
      var eventLogBuffer = null;
      var eventLog = null;
      var eventLogIndex = 0;
      var TaskStartEvent = 1;
      var TaskCompleteEvent = 2;
      var TaskErrorEvent = 3;
      var TaskCancelEvent = 4;
      var TaskRunEvent = 5;
      var TaskYieldEvent = 6;
      var SchedulerSuspendEvent = 7;
      var SchedulerResumeEvent = 8;
      function logEvent(entries) {
        if (eventLog !== null) {
          var offset = eventLogIndex;
          eventLogIndex += entries.length;
          if (eventLogIndex + 1 > eventLogSize) {
            eventLogSize *= 2;
            if (eventLogSize > MAX_EVENT_LOG_SIZE) {
              console.error(
                "Scheduler Profiling: Event log exceeded maximum size. Don't " +
                  'forget to call `stopLoggingProfilingEvents()`.',
              );
              stopLoggingProfilingEvents();
              return;
            }
            var newEventLog = new Int32Array(eventLogSize * 4);
            newEventLog.set(eventLog);
            eventLogBuffer = newEventLog.buffer;
            eventLog = newEventLog;
          }
          eventLog.set(entries, offset);
        }
      }
      function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
      }
      function stopLoggingProfilingEvents() {
        var buffer = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer;
      }
      function markTaskStart(task, time) {
        {
          profilingState[QUEUE_SIZE]++;
          if (eventLog !== null) {
            logEvent([TaskStartEvent, time, task.id, task.priorityLevel]);
          }
        }
      }
      function markTaskCompleted(task, time) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCompleteEvent, time, task.id]);
          }
        }
      }
      function markTaskCanceled(task, time) {
        {
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCancelEvent, time, task.id]);
          }
        }
      }
      function markTaskErrored(task, time) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskErrorEvent, time, task.id]);
          }
        }
      }
      function markTaskRun(task, time) {
        {
          runIdCounter++;
          profilingState[PRIORITY] = task.priorityLevel;
          profilingState[CURRENT_TASK_ID] = task.id;
          profilingState[CURRENT_RUN_ID] = runIdCounter;
          if (eventLog !== null) {
            logEvent([TaskRunEvent, time, task.id, runIdCounter]);
          }
        }
      }
      function markTaskYield(task, time) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[CURRENT_RUN_ID] = 0;
          if (eventLog !== null) {
            logEvent([TaskYieldEvent, time, task.id, runIdCounter]);
          }
        }
      }
      function markSchedulerSuspended(time) {
        {
          mainThreadIdCounter++;
          if (eventLog !== null) {
            logEvent([SchedulerSuspendEvent, time, mainThreadIdCounter]);
          }
        }
      }
      function markSchedulerUnsuspended(time) {
        {
          if (eventLog !== null) {
            logEvent([SchedulerResumeEvent, time, mainThreadIdCounter]);
          }
        }
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 10000;
      var IDLE_PRIORITY = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
            {
              markTaskStart(timer, currentTime);
              timer.isQueued = true;
            }
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime) {
        {
          markSchedulerUnsuspended(initialTime);
        }
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
          {
            var _currentTime = exports.unstable_now();
            markSchedulerSuspended(_currentTime);
          }
        }
      }
      function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (callback !== null) {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            markTaskRun(currentTask, currentTime);
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === 'function') {
              currentTask.callback = continuationCallback;
              markTaskYield(currentTask, currentTime);
            } else {
              {
                markTaskCompleted(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function () {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function timeoutForPriorityLevel(priorityLevel) {
        switch (priorityLevel) {
          case ImmediatePriority:
            return IMMEDIATE_PRIORITY_TIMEOUT;
          case UserBlockingPriority:
            return USER_BLOCKING_PRIORITY;
          case IdlePriority:
            return IDLE_PRIORITY;
          case LowPriority:
            return LOW_PRIORITY_TIMEOUT;
          case NormalPriority:
          default:
            return NORMAL_PRIORITY_TIMEOUT;
        }
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        var timeout;
        if (typeof options === 'object' && options !== null) {
          var delay = options.delay;
          if (typeof delay === 'number' && delay > 0) {
            startTime = currentTime + delay;
          } else {
            startTime = currentTime;
          }
          timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
        } else {
          timeout = timeoutForPriorityLevel(priorityLevel);
          startTime = currentTime;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback: callback,
          priorityLevel: priorityLevel,
          startTime: startTime,
          expirationTime: expirationTime,
          sortIndex: -1,
        };
        {
          newTask.isQueued = false;
        }
        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          {
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
          }
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {}
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        {
          if (task.isQueued) {
            var currentTime = exports.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
          }
        }
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      function unstable_shouldYield() {
        var currentTime = exports.unstable_now();
        advanceTimers(currentTime);
        var firstTask = peek(taskQueue);
        return (
          (firstTask !== currentTask &&
            currentTask !== null &&
            firstTask !== null &&
            firstTask.callback !== null &&
            firstTask.startTime <= currentTime &&
            firstTask.expirationTime < currentTask.expirationTime) ||
          shouldYieldToHost()
        );
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = {
        startLoggingProfilingEvents: startLoggingProfilingEvents,
        stopLoggingProfilingEvents: stopLoggingProfilingEvents,
        sharedProfilingBuffer: sharedProfilingBuffer,
      };
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_next = unstable_next;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_shouldYield = unstable_shouldYield;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_Profiling = unstable_Profiling;
    })();
  }
});
unwrapExports(scheduler_development);
var scheduler_development_1 = scheduler_development.unstable_now;
var scheduler_development_2 = scheduler_development.unstable_forceFrameRate;
var scheduler_development_3 = scheduler_development.unstable_ImmediatePriority;
var scheduler_development_4 = scheduler_development.unstable_UserBlockingPriority;
var scheduler_development_5 = scheduler_development.unstable_NormalPriority;
var scheduler_development_6 = scheduler_development.unstable_IdlePriority;
var scheduler_development_7 = scheduler_development.unstable_LowPriority;
var scheduler_development_8 = scheduler_development.unstable_runWithPriority;
var scheduler_development_9 = scheduler_development.unstable_next;
var scheduler_development_10 = scheduler_development.unstable_scheduleCallback;
var scheduler_development_11 = scheduler_development.unstable_cancelCallback;
var scheduler_development_12 = scheduler_development.unstable_wrapCallback;
var scheduler_development_13 = scheduler_development.unstable_getCurrentPriorityLevel;
var scheduler_development_14 = scheduler_development.unstable_shouldYield;
var scheduler_development_15 = scheduler_development.unstable_requestPaint;
var scheduler_development_16 = scheduler_development.unstable_continueExecution;
var scheduler_development_17 = scheduler_development.unstable_pauseExecution;
var scheduler_development_18 = scheduler_development.unstable_getFirstCallbackNode;
var scheduler_development_19 = scheduler_development.unstable_Profiling;
var scheduler = createCommonjsModule(function (module) {
  {
    module.exports = scheduler_development;
  }
});
function t(a) {
  for (
    var b = a.message, c = 'https://reactjs.org/docs/error-decoder.html?invariant=' + b, d = 1;
    d < arguments.length;
    d++
  )
    c += '&args[]=' + encodeURIComponent(arguments[d]);
  a.message =
    'Minified React error #' +
    b +
    '; visit ' +
    c +
    ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ';
  return a;
}
if (!react) throw t(Error(227));
var ba = null,
  ca = {};
function da() {
  if (ba)
    for (var a in ca) {
      var b = ca[a],
        c = ba.indexOf(a);
      if (!(-1 < c)) throw t(Error(96), a);
      if (!ea[c]) {
        if (!b.extractEvents) throw t(Error(97), a);
        ea[c] = b;
        c = b.eventTypes;
        for (var d in c) {
          var e = void 0;
          var f = c[d],
            g = b,
            h = d;
          if (fa.hasOwnProperty(h)) throw t(Error(99), h);
          fa[h] = f;
          var k = f.phasedRegistrationNames;
          if (k) {
            for (e in k) k.hasOwnProperty(e) && ha(k[e], g, h);
            e = !0;
          } else f.registrationName ? (ha(f.registrationName, g, h), (e = !0)) : (e = !1);
          if (!e) throw t(Error(98), d, a);
        }
      }
    }
}
function ha(a, b, c) {
  if (ia[a]) throw t(Error(100), a);
  ia[a] = b;
  ja[a] = b.eventTypes[c].dependencies;
}
var ea = [],
  fa = {},
  ia = {},
  ja = {};
function ka(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}
var la = !1,
  ma = null,
  na = !1,
  oa = null,
  pa = {
    onError: function (a) {
      la = !0;
      ma = a;
    },
  };
function qa(a, b, c, d, e, f, g, h, k) {
  la = !1;
  ma = null;
  ka.apply(pa, arguments);
}
function ra(a, b, c, d, e, f, g, h, k) {
  qa.apply(this, arguments);
  if (la) {
    if (la) {
      var l = ma;
      la = !1;
      ma = null;
    } else throw t(Error(198));
    na || ((na = !0), (oa = l));
  }
}
var sa = null,
  ta = null,
  ua = null;
function va(a, b, c) {
  var d = a.type || 'unknown-event';
  a.currentTarget = ua(c);
  ra(d, b, void 0, a);
  a.currentTarget = null;
}
function wa(a, b) {
  if (null == b) throw t(Error(30));
  if (null == a) return b;
  if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;
    a.push(b);
    return a;
  }
  return Array.isArray(b) ? [a].concat(b) : [a, b];
}
function xa(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}
var ya = null;
function za(a) {
  if (a) {
    var b = a._dispatchListeners,
      c = a._dispatchInstances;
    if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) va(a, b[d], c[d]);
    else b && va(a, b, c);
    a._dispatchListeners = null;
    a._dispatchInstances = null;
    a.isPersistent() || a.constructor.release(a);
  }
}
function Aa(a) {
  null !== a && (ya = wa(ya, a));
  a = ya;
  ya = null;
  if (a) {
    xa(a, za);
    if (ya) throw t(Error(95));
    if (na) throw ((a = oa), (na = !1), (oa = null), a);
  }
}
var Ba = {
  injectEventPluginOrder: function (a) {
    if (ba) throw t(Error(101));
    ba = Array.prototype.slice.call(a);
    da();
  },
  injectEventPluginsByName: function (a) {
    var b = !1,
      c;
    for (c in a)
      if (a.hasOwnProperty(c)) {
        var d = a[c];
        if (!ca.hasOwnProperty(c) || ca[c] !== d) {
          if (ca[c]) throw t(Error(102), c);
          ca[c] = d;
          b = !0;
        }
      }
    b && da();
  },
};
function Ca(a, b) {
  var c = a.stateNode;
  if (!c) return null;
  var d = sa(c);
  if (!d) return null;
  c = d[b];
  a: switch (b) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      (d = !d.disabled) ||
        ((a = a.type), (d = !('button' === a || 'input' === a || 'select' === a || 'textarea' === a)));
      a = !d;
      break a;
    default:
      a = !1;
  }
  if (a) return null;
  if (c && 'function' !== typeof c) throw t(Error(231), b, typeof c);
  return c;
}
var Da = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
Da.hasOwnProperty('ReactCurrentDispatcher') ||
  (Da.ReactCurrentDispatcher = {
    current: null,
  });
Da.hasOwnProperty('ReactCurrentBatchConfig') ||
  (Da.ReactCurrentBatchConfig = {
    suspense: null,
  });
var Xa = !(
    'undefined' === typeof window ||
    'undefined' === typeof window.document ||
    'undefined' === typeof window.document.createElement
  ),
  Ya = null,
  Za = null,
  $a = null;
function ab(a) {
  if ((a = ta(a))) {
    if ('function' !== typeof Ya) throw t(Error(280));
    var b = sa(a.stateNode);
    Ya(a.stateNode, a.type, b);
  }
}
function bb(a) {
  Za ? ($a ? $a.push(a) : ($a = [a])) : (Za = a);
}
function cb() {
  if (Za) {
    var a = Za,
      b = $a;
    $a = Za = null;
    ab(a);
    if (b) for (a = 0; a < b.length; a++) ab(b[a]);
  }
}
function db(a, b) {
  return a(b);
}
function fb() {}
var hb = !1;
function jb() {
  if (null !== Za || null !== $a) fb(), cb();
}
var kb =
    /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
  lb = Object.prototype.hasOwnProperty,
  mb = {},
  nb = {};
function ob(a) {
  if (lb.call(nb, a)) return !0;
  if (lb.call(mb, a)) return !1;
  if (kb.test(a)) return (nb[a] = !0);
  mb[a] = !0;
  return !1;
}
function pb(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;
  switch (typeof b) {
    case 'function':
    case 'symbol':
      return !0;
    case 'boolean':
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return 'data-' !== a && 'aria-' !== a;
    default:
      return !1;
  }
}
function qb(a, b, c, d) {
  if (null === b || 'undefined' === typeof b || pb(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c)
    switch (c.type) {
      case 3:
        return !b;
      case 4:
        return !1 === b;
      case 5:
        return isNaN(b);
      case 6:
        return isNaN(b) || 1 > b;
    }
  return !1;
}
function B$1(a, b, c, d, e, f) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
}
var C$1 = {};
'children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style'
  .split(' ')
  .forEach(function (a) {
    C$1[a] = new B$1(a, 0, !1, a, null, !1);
  });
[
  ['acceptCharset', 'accept-charset'],
  ['className', 'class'],
  ['htmlFor', 'for'],
  ['httpEquiv', 'http-equiv'],
].forEach(function (a) {
  var b = a[0];
  C$1[b] = new B$1(b, 1, !1, a[1], null, !1);
});
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (a) {
  C$1[a] = new B$1(a, 2, !1, a.toLowerCase(), null, !1);
});
['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (a) {
  C$1[a] = new B$1(a, 2, !1, a, null, !1);
});
'allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope'
  .split(' ')
  .forEach(function (a) {
    C$1[a] = new B$1(a, 3, !1, a.toLowerCase(), null, !1);
  });
['checked', 'multiple', 'muted', 'selected'].forEach(function (a) {
  C$1[a] = new B$1(a, 3, !0, a, null, !1);
});
['capture', 'download'].forEach(function (a) {
  C$1[a] = new B$1(a, 4, !1, a, null, !1);
});
['cols', 'rows', 'size', 'span'].forEach(function (a) {
  C$1[a] = new B$1(a, 6, !1, a, null, !1);
});
['rowSpan', 'start'].forEach(function (a) {
  C$1[a] = new B$1(a, 5, !1, a.toLowerCase(), null, !1);
});
var rb = /[\-:]([a-z])/g;
function sb(a) {
  return a[1].toUpperCase();
}
'accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height'
  .split(' ')
  .forEach(function (a) {
    var b = a.replace(rb, sb);
    C$1[b] = new B$1(b, 1, !1, a, null, !1);
  });
'xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type'.split(' ').forEach(function (a) {
  var b = a.replace(rb, sb);
  C$1[b] = new B$1(b, 1, !1, a, 'http://www.w3.org/1999/xlink', !1);
});
['xml:base', 'xml:lang', 'xml:space'].forEach(function (a) {
  var b = a.replace(rb, sb);
  C$1[b] = new B$1(b, 1, !1, a, 'http://www.w3.org/XML/1998/namespace', !1);
});
['tabIndex', 'crossOrigin'].forEach(function (a) {
  C$1[a] = new B$1(a, 1, !1, a.toLowerCase(), null, !1);
});
C$1.xlinkHref = new B$1('xlinkHref', 1, !1, 'xlink:href', 'http://www.w3.org/1999/xlink', !0);
['src', 'href', 'action', 'formAction'].forEach(function (a) {
  C$1[a] = new B$1(a, 1, !1, a.toLowerCase(), null, !0);
});
function tb(a) {
  switch (typeof a) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return a;
    default:
      return '';
  }
}
function ub(a, b, c, d) {
  var e = C$1.hasOwnProperty(b) ? C$1[b] : null;
  var f =
    null !== e
      ? 0 === e.type
      : d
      ? !1
      : !(2 < b.length) || ('o' !== b[0] && 'O' !== b[0]) || ('n' !== b[1] && 'N' !== b[1])
      ? !1
      : !0;
  f ||
    (qb(b, c, e, d) && (c = null),
    d || null === e
      ? ob(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, '' + c))
      : e.mustUseProperty
      ? (a[e.propertyName] = null === c ? (3 === e.type ? !1 : '') : c)
      : ((b = e.attributeName),
        (d = e.attributeNamespace),
        null === c
          ? a.removeAttribute(b)
          : ((e = e.type),
            (c = 3 === e || (4 === e && !0 === c) ? '' : '' + c),
            d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
function vb(a) {
  var b = a.type;
  return (a = a.nodeName) && 'input' === a.toLowerCase() && ('checkbox' === b || 'radio' === b);
}
function zb(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = '';
  a && (d = vb(a) ? (a.checked ? 'true' : 'false') : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}
function Cb(a, b) {
  b = b.checked;
  null != b && ub(a, 'checked', b, !1);
}
function Db(a, b) {
  Cb(a, b);
  var c = tb(b.value),
    d = b.type;
  if (null != c)
    if ('number' === d) {
      if ((0 === c && '' === a.value) || a.value != c) a.value = '' + c;
    } else a.value !== '' + c && (a.value = '' + c);
  else if ('submit' === d || 'reset' === d) {
    a.removeAttribute('value');
    return;
  }
  b.hasOwnProperty('value') ? Eb(a, b.type, c) : b.hasOwnProperty('defaultValue') && Eb(a, b.type, tb(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function Eb(a, b, c) {
  if ('number' !== b || a.ownerDocument.activeElement !== a)
    null == c
      ? (a.defaultValue = '' + a._wrapperState.initialValue)
      : a.defaultValue !== '' + c && (a.defaultValue = '' + c);
}
function Jb(a, b, c, d) {
  a = a.options;
  if (b) {
    b = {};
    for (var e = 0; e < c.length; e++) b['$' + c[e]] = !0;
    for (c = 0; c < a.length; c++)
      (e = b.hasOwnProperty('$' + a[c].value)),
        a[c].selected !== e && (a[c].selected = e),
        e && d && (a[c].defaultSelected = !0);
  } else {
    c = '' + tb(c);
    b = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }
      null !== b || a[e].disabled || (b = a[e]);
    }
    null !== b && (b.selected = !0);
  }
}
function Mb(a, b) {
  var c = tb(b.value),
    d = tb(b.defaultValue);
  null != c &&
    ((c = '' + c),
    c !== a.value && (a.value = c),
    null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = '' + d);
}
var Ob = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg',
};
var Rb,
  Sb = (function (a) {
    return 'undefined' !== typeof MSApp && MSApp.execUnsafeLocalFunction
      ? function (b, c, d, e) {
          MSApp.execUnsafeLocalFunction(function () {
            return a(b, c, d, e);
          });
        }
      : a;
  })(function (a, b) {
    if (a.namespaceURI !== Ob.svg || 'innerHTML' in a) a.innerHTML = b;
    else {
      Rb = Rb || document.createElement('div');
      Rb.innerHTML = '<svg>' + b.valueOf().toString() + '</svg>';
      for (b = Rb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
      for (; b.firstChild; ) a.appendChild(b.firstChild);
    }
  });
function Ub(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c['Webkit' + a] = 'webkit' + b;
  c['Moz' + a] = 'moz' + b;
  return c;
}
var Vb = {
    animationend: Ub('Animation', 'AnimationEnd'),
    animationiteration: Ub('Animation', 'AnimationIteration'),
    animationstart: Ub('Animation', 'AnimationStart'),
    transitionend: Ub('Transition', 'TransitionEnd'),
  },
  Wb = {},
  Xb = {};
Xa &&
  ((Xb = document.createElement('div').style),
  'AnimationEvent' in window ||
    (delete Vb.animationend.animation, delete Vb.animationiteration.animation, delete Vb.animationstart.animation),
  'TransitionEvent' in window || delete Vb.transitionend.transition);
function Yb(a) {
  if (Wb[a]) return Wb[a];
  if (!Vb[a]) return a;
  var b = Vb[a],
    c;
  for (c in b) if (b.hasOwnProperty(c) && c in Xb) return (Wb[a] = b[c]);
  return a;
}
var Zb = Yb('animationend'),
  $b = Yb('animationiteration'),
  ac = Yb('animationstart'),
  bc = Yb('transitionend');
var D$1 = 0,
  E$1 = 2,
  Ac = 1024;
function Bc(a) {
  var b = a,
    c = a;
  if (a.alternate) for (; b.return; ) b = b.return;
  else {
    a = b;
    do (b = a), (b.effectTag & (E$1 | Ac)) !== D$1 && (c = b.return), (a = b.return);
    while (a);
  }
  return 3 === b.tag ? c : null;
}
function Cc(a) {
  if (Bc(a) !== a) throw t(Error(188));
}
function Dc(a) {
  var b = a.alternate;
  if (!b) {
    b = Bc(a);
    if (null === b) throw t(Error(188));
    return b !== a ? null : a;
  }
  for (var c = a, d = b; ; ) {
    var e = c.return;
    if (null === e) break;
    var f = e.alternate;
    if (null === f) {
      d = e.return;
      if (null !== d) {
        c = d;
        continue;
      }
      break;
    }
    if (e.child === f.child) {
      for (f = e.child; f; ) {
        if (f === c) return Cc(e), a;
        if (f === d) return Cc(e), b;
        f = f.sibling;
      }
      throw t(Error(188));
    }
    if (c.return !== d.return) (c = e), (d = f);
    else {
      for (var g = !1, h = e.child; h; ) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }
        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }
        h = h.sibling;
      }
      if (!g) {
        for (h = f.child; h; ) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }
          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }
          h = h.sibling;
        }
        if (!g) throw t(Error(189));
      }
    }
    if (c.alternate !== d) throw t(Error(190));
  }
  if (3 !== c.tag) throw t(Error(188));
  return c.stateNode.current === c ? a : b;
}
function Ec(a) {
  a = Dc(a);
  if (!a) return null;
  for (var b = a; ; ) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) (b.child.return = b), (b = b.child);
    else {
      if (b === a) break;
      for (; !b.sibling; ) {
        if (!b.return || b.return === a) return null;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
  }
  return null;
}
function Fc(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
function Gc(a) {
  do a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function Hc(a, b, c) {
  if ((b = Ca(a, c.dispatchConfig.phasedRegistrationNames[b])))
    (c._dispatchListeners = wa(c._dispatchListeners, b)), (c._dispatchInstances = wa(c._dispatchInstances, a));
}
function Ic(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b; ) c.push(b), (b = Gc(b));
    for (b = c.length; 0 < b--; ) Hc(c[b], 'captured', a);
    for (b = 0; b < c.length; b++) Hc(c[b], 'bubbled', a);
  }
}
function Jc(a, b, c) {
  a &&
    c &&
    c.dispatchConfig.registrationName &&
    (b = Ca(a, c.dispatchConfig.registrationName)) &&
    ((c._dispatchListeners = wa(c._dispatchListeners, b)), (c._dispatchInstances = wa(c._dispatchInstances, a)));
}
function Lc(a) {
  xa(a, Ic);
}
function Mc() {
  return !0;
}
function Nc() {
  return !1;
}
function F$1(a, b, c, d) {
  this.dispatchConfig = a;
  this._targetInst = b;
  this.nativeEvent = c;
  a = this.constructor.Interface;
  for (var e in a)
    a.hasOwnProperty(e) && ((b = a[e]) ? (this[e] = b(c)) : 'target' === e ? (this.target = d) : (this[e] = c[e]));
  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? Mc : Nc;
  this.isPropagationStopped = Nc;
  return this;
}
objectAssign(F$1.prototype, {
  preventDefault: function () {
    this.defaultPrevented = !0;
    var a = this.nativeEvent;
    a &&
      (a.preventDefault ? a.preventDefault() : 'unknown' !== typeof a.returnValue && (a.returnValue = !1),
      (this.isDefaultPrevented = Mc));
  },
  stopPropagation: function () {
    var a = this.nativeEvent;
    a &&
      (a.stopPropagation ? a.stopPropagation() : 'unknown' !== typeof a.cancelBubble && (a.cancelBubble = !0),
      (this.isPropagationStopped = Mc));
  },
  persist: function () {
    this.isPersistent = Mc;
  },
  isPersistent: Nc,
  destructor: function () {
    var a = this.constructor.Interface,
      b;
    for (b in a) this[b] = null;
    this.nativeEvent = this._targetInst = this.dispatchConfig = null;
    this.isPropagationStopped = this.isDefaultPrevented = Nc;
    this._dispatchInstances = this._dispatchListeners = null;
  },
});
F$1.Interface = {
  type: null,
  target: null,
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (a) {
    return a.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null,
};
F$1.extend = function (a) {
  function b() {}
  function c() {
    return d.apply(this, arguments);
  }
  var d = this;
  b.prototype = d.prototype;
  var e = new b();
  objectAssign(e, c.prototype);
  c.prototype = e;
  c.prototype.constructor = c;
  c.Interface = objectAssign({}, d.Interface, a);
  c.extend = d.extend;
  Oc(c);
  return c;
};
Oc(F$1);
function Pc(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();
    this.call(e, a, b, c, d);
    return e;
  }
  return new this(a, b, c, d);
}
function Qc(a) {
  if (!(a instanceof this)) throw t(Error(279));
  a.destructor();
  10 > this.eventPool.length && this.eventPool.push(a);
}
function Oc(a) {
  a.eventPool = [];
  a.getPooled = Pc;
  a.release = Qc;
}
var Rc = F$1.extend({
    animationName: null,
    elapsedTime: null,
    pseudoElement: null,
  }),
  Sc = F$1.extend({
    clipboardData: function (a) {
      return 'clipboardData' in a ? a.clipboardData : window.clipboardData;
    },
  }),
  Tc = F$1.extend({
    view: null,
    detail: null,
  }),
  Uc = Tc.extend({
    relatedTarget: null,
  });
function Vc(a) {
  var b = a.keyCode;
  'charCode' in a ? ((a = a.charCode), 0 === a && 13 === b && (a = 13)) : (a = b);
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
var Wc = {
    Esc: 'Escape',
    Spacebar: ' ',
    Left: 'ArrowLeft',
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Del: 'Delete',
    Win: 'OS',
    Menu: 'ContextMenu',
    Apps: 'ContextMenu',
    Scroll: 'ScrollLock',
    MozPrintableKey: 'Unidentified',
  },
  Xc = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1',
    113: 'F2',
    114: 'F3',
    115: 'F4',
    116: 'F5',
    117: 'F6',
    118: 'F7',
    119: 'F8',
    120: 'F9',
    121: 'F10',
    122: 'F11',
    123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta',
  },
  Yc = {
    Alt: 'altKey',
    Control: 'ctrlKey',
    Meta: 'metaKey',
    Shift: 'shiftKey',
  };
function Zc(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Yc[a]) ? !!b[a] : !1;
}
function $c() {
  return Zc;
}
var ad = Tc.extend({
    key: function (a) {
      if (a.key) {
        var b = Wc[a.key] || a.key;
        if ('Unidentified' !== b) return b;
      }
      return 'keypress' === a.type
        ? ((a = Vc(a)), 13 === a ? 'Enter' : String.fromCharCode(a))
        : 'keydown' === a.type || 'keyup' === a.type
        ? Xc[a.keyCode] || 'Unidentified'
        : '';
    },
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: $c,
    charCode: function (a) {
      return 'keypress' === a.type ? Vc(a) : 0;
    },
    keyCode: function (a) {
      return 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
    },
    which: function (a) {
      return 'keypress' === a.type ? Vc(a) : 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
    },
  }),
  bd = 0,
  cd = 0,
  dd = !1,
  fd = !1,
  gd = Tc.extend({
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    pageX: null,
    pageY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: $c,
    button: null,
    buttons: null,
    relatedTarget: function (a) {
      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
    },
    movementX: function (a) {
      if ('movementX' in a) return a.movementX;
      var b = bd;
      bd = a.screenX;
      return dd ? ('mousemove' === a.type ? a.screenX - b : 0) : ((dd = !0), 0);
    },
    movementY: function (a) {
      if ('movementY' in a) return a.movementY;
      var b = cd;
      cd = a.screenY;
      return fd ? ('mousemove' === a.type ? a.screenY - b : 0) : ((fd = !0), 0);
    },
  }),
  hd = gd.extend({
    pointerId: null,
    width: null,
    height: null,
    pressure: null,
    tangentialPressure: null,
    tiltX: null,
    tiltY: null,
    twist: null,
    pointerType: null,
    isPrimary: null,
  }),
  id = gd.extend({
    dataTransfer: null,
  }),
  jd = Tc.extend({
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: $c,
  }),
  kd = F$1.extend({
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null,
  }),
  ld = gd.extend({
    deltaX: function (a) {
      return 'deltaX' in a ? a.deltaX : 'wheelDeltaX' in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function (a) {
      return 'deltaY' in a ? a.deltaY : 'wheelDeltaY' in a ? -a.wheelDeltaY : 'wheelDelta' in a ? -a.wheelDelta : 0;
    },
    deltaZ: null,
    deltaMode: null,
  }),
  md = [
    ['blur', 'blur', 0],
    ['cancel', 'cancel', 0],
    ['click', 'click', 0],
    ['close', 'close', 0],
    ['contextmenu', 'contextMenu', 0],
    ['copy', 'copy', 0],
    ['cut', 'cut', 0],
    ['auxclick', 'auxClick', 0],
    ['dblclick', 'doubleClick', 0],
    ['dragend', 'dragEnd', 0],
    ['dragstart', 'dragStart', 0],
    ['drop', 'drop', 0],
    ['focus', 'focus', 0],
    ['input', 'input', 0],
    ['invalid', 'invalid', 0],
    ['keydown', 'keyDown', 0],
    ['keypress', 'keyPress', 0],
    ['keyup', 'keyUp', 0],
    ['mousedown', 'mouseDown', 0],
    ['mouseup', 'mouseUp', 0],
    ['paste', 'paste', 0],
    ['pause', 'pause', 0],
    ['play', 'play', 0],
    ['pointercancel', 'pointerCancel', 0],
    ['pointerdown', 'pointerDown', 0],
    ['pointerup', 'pointerUp', 0],
    ['ratechange', 'rateChange', 0],
    ['reset', 'reset', 0],
    ['seeked', 'seeked', 0],
    ['submit', 'submit', 0],
    ['touchcancel', 'touchCancel', 0],
    ['touchend', 'touchEnd', 0],
    ['touchstart', 'touchStart', 0],
    ['volumechange', 'volumeChange', 0],
    ['drag', 'drag', 1],
    ['dragenter', 'dragEnter', 1],
    ['dragexit', 'dragExit', 1],
    ['dragleave', 'dragLeave', 1],
    ['dragover', 'dragOver', 1],
    ['mousemove', 'mouseMove', 1],
    ['mouseout', 'mouseOut', 1],
    ['mouseover', 'mouseOver', 1],
    ['pointermove', 'pointerMove', 1],
    ['pointerout', 'pointerOut', 1],
    ['pointerover', 'pointerOver', 1],
    ['scroll', 'scroll', 1],
    ['toggle', 'toggle', 1],
    ['touchmove', 'touchMove', 1],
    ['wheel', 'wheel', 1],
    ['abort', 'abort', 2],
    [Zb, 'animationEnd', 2],
    [$b, 'animationIteration', 2],
    [ac, 'animationStart', 2],
    ['canplay', 'canPlay', 2],
    ['canplaythrough', 'canPlayThrough', 2],
    ['durationchange', 'durationChange', 2],
    ['emptied', 'emptied', 2],
    ['encrypted', 'encrypted', 2],
    ['ended', 'ended', 2],
    ['error', 'error', 2],
    ['gotpointercapture', 'gotPointerCapture', 2],
    ['load', 'load', 2],
    ['loadeddata', 'loadedData', 2],
    ['loadedmetadata', 'loadedMetadata', 2],
    ['loadstart', 'loadStart', 2],
    ['lostpointercapture', 'lostPointerCapture', 2],
    ['playing', 'playing', 2],
    ['progress', 'progress', 2],
    ['seeking', 'seeking', 2],
    ['stalled', 'stalled', 2],
    ['suspend', 'suspend', 2],
    ['timeupdate', 'timeUpdate', 2],
    [bc, 'transitionEnd', 2],
    ['waiting', 'waiting', 2],
  ],
  nd = {},
  od = {},
  pd = 0;
for (; pd < md.length; pd++) {
  var qd = md[pd],
    rd = qd[0],
    sd = qd[1],
    td = qd[2],
    ud = 'on' + (sd[0].toUpperCase() + sd.slice(1)),
    vd = {
      phasedRegistrationNames: {
        bubbled: ud,
        captured: ud + 'Capture',
      },
      dependencies: [rd],
      eventPriority: td,
    };
  nd[sd] = vd;
  od[rd] = vd;
}
var wd = {
  eventTypes: nd,
  getEventPriority: function (a) {
    a = od[a];
    return void 0 !== a ? a.eventPriority : 2;
  },
  extractEvents: function (a, b, c, d) {
    var e = od[a];
    if (!e) return null;
    switch (a) {
      case 'keypress':
        if (0 === Vc(c)) return null;
      case 'keydown':
      case 'keyup':
        a = ad;
        break;
      case 'blur':
      case 'focus':
        a = Uc;
        break;
      case 'click':
        if (2 === c.button) return null;
      case 'auxclick':
      case 'dblclick':
      case 'mousedown':
      case 'mousemove':
      case 'mouseup':
      case 'mouseout':
      case 'mouseover':
      case 'contextmenu':
        a = gd;
        break;
      case 'drag':
      case 'dragend':
      case 'dragenter':
      case 'dragexit':
      case 'dragleave':
      case 'dragover':
      case 'dragstart':
      case 'drop':
        a = id;
        break;
      case 'touchcancel':
      case 'touchend':
      case 'touchmove':
      case 'touchstart':
        a = jd;
        break;
      case Zb:
      case $b:
      case ac:
        a = Rc;
        break;
      case bc:
        a = kd;
        break;
      case 'scroll':
        a = Tc;
        break;
      case 'wheel':
        a = ld;
        break;
      case 'copy':
      case 'cut':
      case 'paste':
        a = Sc;
        break;
      case 'gotpointercapture':
      case 'lostpointercapture':
      case 'pointercancel':
      case 'pointerdown':
      case 'pointermove':
      case 'pointerout':
      case 'pointerover':
      case 'pointerup':
        a = hd;
        break;
      default:
        a = F$1;
    }
    b = a.getPooled(e, b, c, d);
    Lc(b);
    return b;
  },
};
function Jd(a) {
  if (!Xa) return !1;
  a = 'on' + a;
  var b = a in document;
  b || ((b = document.createElement('div')), b.setAttribute(a, 'return;'), (b = 'function' === typeof b[a]));
  return b;
}
var Kd = new ('function' === typeof WeakMap ? WeakMap : Map)();
function oc(a) {
  var b = Kd.get(a);
  void 0 === b && ((b = new Set()), Kd.set(a, b));
  return b;
}
var Ld = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0,
  },
  Md = ['Webkit', 'ms', 'Moz', 'O'];
Object.keys(Ld).forEach(function (a) {
  Md.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    Ld[b] = Ld[a];
  });
});
var Pd = objectAssign(
  {
    menuitem: !0,
  },
  {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0,
  },
);
function Ud(a) {
  a = a || ('undefined' !== typeof document ? document : void 0);
  if ('undefined' === typeof a) return null;
  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}
function Zd(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return (
    b &&
    (('input' === b &&
      ('text' === a.type || 'search' === a.type || 'tel' === a.type || 'url' === a.type || 'password' === a.type)) ||
      'textarea' === b ||
      'true' === a.contentEditable)
  );
}
var $d = '$',
  ae = '/$',
  be = '$?',
  ce = '$!';
function ke(a) {
  a = a.previousSibling;
  for (var b = 0; a; ) {
    if (8 === a.nodeType) {
      var c = a.data;
      if (c === $d || c === ce || c === be) {
        if (0 === b) return a;
        b--;
      } else c === ae && b++;
    }
    a = a.previousSibling;
  }
  return null;
}
var le = Math.random().toString(36).slice(2),
  me = '__reactInternalInstance$' + le,
  ne = '__reactEventHandlers$' + le,
  oe = '__reactContainere$' + le;
function Cd(a) {
  var b = a[me];
  if (b) return b;
  for (var c = a.parentNode; c; ) {
    if ((b = c[oe] || c[me])) {
      c = b.alternate;
      if (null !== b.child || (null !== c && null !== c.child))
        for (a = ke(a); null !== a; ) {
          if ((c = a[me])) return c;
          a = ke(a);
        }
      return b;
    }
    a = c;
    c = a.parentNode;
  }
  return null;
}
function pe(a) {
  a = a[me] || a[oe];
  return !a || (5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag) ? null : a;
}
function qe(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw t(Error(33));
}
function re(a) {
  return a[ne] || null;
}
var se = null,
  te = null,
  ue = null;
function ve() {
  if (ue) return ue;
  var a,
    b = te,
    c = b.length,
    d,
    e = 'value' in se ? se.value : se.textContent,
    f = e.length;
  for (a = 0; a < c && b[a] === e[a]; a++);
  var g = c - a;
  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
  return (ue = e.slice(a, 1 < d ? 1 - d : void 0));
}
var we = F$1.extend({
    data: null,
  }),
  xe = F$1.extend({
    data: null,
  }),
  ye = [9, 13, 27, 32],
  ze = Xa && 'CompositionEvent' in window,
  Ae = null;
Xa && 'documentMode' in document && (Ae = document.documentMode);
var Be = Xa && 'TextEvent' in window && !Ae,
  Ce = Xa && (!ze || (Ae && 8 < Ae && 11 >= Ae)),
  De = String.fromCharCode(32),
  Ee = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: 'onBeforeInput',
        captured: 'onBeforeInputCapture',
      },
      dependencies: ['compositionend', 'keypress', 'textInput', 'paste'],
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionEnd',
        captured: 'onCompositionEndCapture',
      },
      dependencies: 'blur compositionend keydown keypress keyup mousedown'.split(' '),
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionStart',
        captured: 'onCompositionStartCapture',
      },
      dependencies: 'blur compositionstart keydown keypress keyup mousedown'.split(' '),
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionUpdate',
        captured: 'onCompositionUpdateCapture',
      },
      dependencies: 'blur compositionupdate keydown keypress keyup mousedown'.split(' '),
    },
  },
  Fe = !1;
function Ge(a, b) {
  switch (a) {
    case 'keyup':
      return -1 !== ye.indexOf(b.keyCode);
    case 'keydown':
      return 229 !== b.keyCode;
    case 'keypress':
    case 'mousedown':
    case 'blur':
      return !0;
    default:
      return !1;
  }
}
function He(a) {
  a = a.detail;
  return 'object' === typeof a && 'data' in a ? a.data : null;
}
var Ie = !1;
function Je(a, b) {
  switch (a) {
    case 'compositionend':
      return He(b);
    case 'keypress':
      if (32 !== b.which) return null;
      Fe = !0;
      return De;
    case 'textInput':
      return (a = b.data), a === De && Fe ? null : a;
    default:
      return null;
  }
}
function Ke(a, b) {
  if (Ie) return 'compositionend' === a || (!ze && Ge(a, b)) ? ((a = ve()), (ue = te = se = null), (Ie = !1), a) : null;
  switch (a) {
    case 'paste':
      return null;
    case 'keypress':
      if (!(b.ctrlKey || b.altKey || b.metaKey) || (b.ctrlKey && b.altKey)) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }
      return null;
    case 'compositionend':
      return Ce && 'ko' !== b.locale ? null : b.data;
    default:
      return null;
  }
}
var Le = {
    eventTypes: Ee,
    extractEvents: function (a, b, c, d) {
      var e;
      if (ze)
        b: {
          switch (a) {
            case 'compositionstart':
              var f = Ee.compositionStart;
              break b;
            case 'compositionend':
              f = Ee.compositionEnd;
              break b;
            case 'compositionupdate':
              f = Ee.compositionUpdate;
              break b;
          }
          f = void 0;
        }
      else Ie ? Ge(a, c) && (f = Ee.compositionEnd) : 'keydown' === a && 229 === c.keyCode && (f = Ee.compositionStart);
      f
        ? (Ce &&
            'ko' !== c.locale &&
            (Ie || f !== Ee.compositionStart
              ? f === Ee.compositionEnd && Ie && (e = ve())
              : ((se = d), (te = 'value' in se ? se.value : se.textContent), (Ie = !0))),
          (f = we.getPooled(f, b, c, d)),
          e ? (f.data = e) : ((e = He(c)), null !== e && (f.data = e)),
          Lc(f),
          (e = f))
        : (e = null);
      (a = Be ? Je(a, c) : Ke(a, c)) ? ((b = xe.getPooled(Ee.beforeInput, b, c, d)), (b.data = a), Lc(b)) : (b = null);
      return null === e ? b : null === b ? e : [e, b];
    },
  },
  Me = {
    color: !0,
    date: !0,
    datetime: !0,
    'datetime-local': !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0,
  };
function Ne(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return 'input' === b ? !!Me[a.type] : 'textarea' === b ? !0 : !1;
}
var Oe = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture',
    },
    dependencies: 'blur change click focus input keydown keyup selectionchange'.split(' '),
  },
};
function Pe(a, b, c) {
  a = F$1.getPooled(Oe.change, a, b, c);
  a.type = 'change';
  bb(c);
  Lc(a);
  return a;
}
var Qe = null,
  Re = null;
function Se(a) {
  Aa(a);
}
function Te(a) {
  var b = qe(a);
  if (zb(b)) return a;
}
function Ue(a, b) {
  if ('change' === a) return b;
}
var Ve = !1;
Xa && (Ve = Jd('input') && (!document.documentMode || 9 < document.documentMode));
function We() {
  Qe && (Qe.detachEvent('onpropertychange', Xe), (Re = Qe = null));
}
function Xe(a) {
  if ('value' === a.propertyName && Te(Re))
    if (((a = Pe(Re, a, Fc(a))), hb)) Aa(a);
    else {
      hb = !0;
      try {
        db(Se, a);
      } finally {
        (hb = !1), jb();
      }
    }
}
function Ye(a, b, c) {
  'focus' === a ? (We(), (Qe = b), (Re = c), Qe.attachEvent('onpropertychange', Xe)) : 'blur' === a && We();
}
function Ze(a) {
  if ('selectionchange' === a || 'keyup' === a || 'keydown' === a) return Te(Re);
}
function $e(a, b) {
  if ('click' === a) return Te(b);
}
function af(a, b) {
  if ('input' === a || 'change' === a) return Te(b);
}
var bf = {
    eventTypes: Oe,
    _isInputEventSupported: Ve,
    extractEvents: function (a, b, c, d) {
      var e = b ? qe(b) : window,
        f = e.nodeName && e.nodeName.toLowerCase();
      if ('select' === f || ('input' === f && 'file' === e.type)) var g = Ue;
      else if (Ne(e))
        if (Ve) g = af;
        else {
          g = Ze;
          var h = Ye;
        }
      else (f = e.nodeName) && 'input' === f.toLowerCase() && ('checkbox' === e.type || 'radio' === e.type) && (g = $e);
      if (g && (g = g(a, b))) return Pe(g, c, d);
      h && h(a, e, b);
      'blur' === a && (a = e._wrapperState) && a.controlled && 'number' === e.type && Eb(e, 'number', e.value);
    },
  },
  cf = {
    mouseEnter: {
      registrationName: 'onMouseEnter',
      dependencies: ['mouseout', 'mouseover'],
    },
    mouseLeave: {
      registrationName: 'onMouseLeave',
      dependencies: ['mouseout', 'mouseover'],
    },
    pointerEnter: {
      registrationName: 'onPointerEnter',
      dependencies: ['pointerout', 'pointerover'],
    },
    pointerLeave: {
      registrationName: 'onPointerLeave',
      dependencies: ['pointerout', 'pointerover'],
    },
  },
  df = {
    eventTypes: cf,
    extractEvents: function (a, b, c, d, e) {
      var f = 'mouseover' === a || 'pointerover' === a,
        g = 'mouseout' === a || 'pointerout' === a;
      if ((f && 0 === (e & 32) && (c.relatedTarget || c.fromElement)) || (!g && !f)) return null;
      e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;
      if (g) {
        if (
          ((g = b),
          (b = (b = c.relatedTarget || c.toElement) ? Cd(b) : null),
          null !== b && ((f = Bc(b)), b !== f || (5 !== b.tag && 6 !== b.tag)))
        )
          b = null;
      } else g = null;
      if (g === b) return null;
      if ('mouseout' === a || 'mouseover' === a) {
        var h = gd;
        var k = cf.mouseLeave;
        var l = cf.mouseEnter;
        var m = 'mouse';
      } else if ('pointerout' === a || 'pointerover' === a)
        (h = hd), (k = cf.pointerLeave), (l = cf.pointerEnter), (m = 'pointer');
      a = null == g ? e : qe(g);
      e = null == b ? e : qe(b);
      k = h.getPooled(k, g, c, d);
      k.type = m + 'leave';
      k.target = a;
      k.relatedTarget = e;
      c = h.getPooled(l, b, c, d);
      c.type = m + 'enter';
      c.target = e;
      c.relatedTarget = a;
      d = g;
      m = b;
      if (d && m)
        a: {
          h = d;
          l = m;
          a = 0;
          for (g = h; g; g = Gc(g)) a++;
          g = 0;
          for (b = l; b; b = Gc(b)) g++;
          for (; 0 < a - g; ) (h = Gc(h)), a--;
          for (; 0 < g - a; ) (l = Gc(l)), g--;
          for (; a--; ) {
            if (h === l || h === l.alternate) break a;
            h = Gc(h);
            l = Gc(l);
          }
          h = null;
        }
      else h = null;
      l = h;
      for (h = []; d && d !== l; ) {
        a = d.alternate;
        if (null !== a && a === l) break;
        h.push(d);
        d = Gc(d);
      }
      for (d = []; m && m !== l; ) {
        a = m.alternate;
        if (null !== a && a === l) break;
        d.push(m);
        m = Gc(m);
      }
      for (m = 0; m < h.length; m++) Jc(h[m], 'bubbled', k);
      for (m = d.length; 0 < m--; ) Jc(d[m], 'captured', c);
      return [k, c];
    },
  };
function ef(a, b) {
  return (a === b && (0 !== a || 1 / a === 1 / b)) || (a !== a && b !== b);
}
var ff = 'function' === typeof Object.is ? Object.is : ef,
  gf = Object.prototype.hasOwnProperty;
function hf(a, b) {
  if (ff(a, b)) return !0;
  if ('object' !== typeof a || null === a || 'object' !== typeof b || null === b) return !1;
  var c = Object.keys(a),
    d = Object.keys(b);
  if (c.length !== d.length) return !1;
  for (d = 0; d < c.length; d++) if (!gf.call(b, c[d]) || !ff(a[c[d]], b[c[d]])) return !1;
  return !0;
}
var jf = Xa && 'documentMode' in document && 11 >= document.documentMode,
  kf = {
    select: {
      phasedRegistrationNames: {
        bubbled: 'onSelect',
        captured: 'onSelectCapture',
      },
      dependencies: 'blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange'.split(' '),
    },
  },
  lf = null,
  mf = null,
  nf = null,
  of = !1;
function pf(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;
  if (of || null == lf || lf !== Ud(c)) return null;
  c = lf;
  'selectionStart' in c && Zd(c)
    ? (c = {
        start: c.selectionStart,
        end: c.selectionEnd,
      })
    : ((c = ((c.ownerDocument && c.ownerDocument.defaultView) || window).getSelection()),
      (c = {
        anchorNode: c.anchorNode,
        anchorOffset: c.anchorOffset,
        focusNode: c.focusNode,
        focusOffset: c.focusOffset,
      }));
  return nf && hf(nf, c)
    ? null
    : ((nf = c), (a = F$1.getPooled(kf.select, mf, a, b)), (a.type = 'select'), (a.target = lf), Lc(a), a);
}
var qf = {
  eventTypes: kf,
  extractEvents: function (a, b, c, d) {
    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
      f;
    if (!(f = !e)) {
      a: {
        e = oc(e);
        f = ja.onSelect;
        for (var g = 0; g < f.length; g++)
          if (!e.has(f[g])) {
            e = !1;
            break a;
          }
        e = !0;
      }
      f = !e;
    }
    if (f) return null;
    e = b ? qe(b) : window;
    switch (a) {
      case 'focus':
        if (Ne(e) || 'true' === e.contentEditable) (lf = e), (mf = b), (nf = null);
        break;
      case 'blur':
        nf = mf = lf = null;
        break;
      case 'mousedown':
        of = !0;
        break;
      case 'contextmenu':
      case 'mouseup':
      case 'dragend':
        return (of = !1), pf(c, d);
      case 'selectionchange':
        if (jf) break;
      case 'keydown':
      case 'keyup':
        return pf(c, d);
    }
    return null;
  },
};
Ba.injectEventPluginOrder(
  'ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin'.split(
    ' ',
  ),
);
sa = re;
ta = pe;
ua = qe;
Ba.injectEventPluginsByName({
  SimpleEventPlugin: wd,
  EnterLeaveEventPlugin: df,
  ChangeEventPlugin: bf,
  SelectEventPlugin: qf,
  BeforeInputEventPlugin: Le,
});
var Df = scheduler.unstable_runWithPriority,
  Ef = scheduler.unstable_scheduleCallback,
  Ff = scheduler.unstable_cancelCallback,
  Gf = scheduler.unstable_shouldYield,
  Hf = scheduler.unstable_requestPaint,
  If = scheduler.unstable_now,
  Jf = scheduler.unstable_getCurrentPriorityLevel,
  Kf = scheduler.unstable_ImmediatePriority,
  Lf = scheduler.unstable_UserBlockingPriority,
  Mf = scheduler.unstable_NormalPriority,
  Nf = scheduler.unstable_LowPriority,
  Of = scheduler.unstable_IdlePriority,
  Uf = If();
var Cg = Da.ReactCurrentBatchConfig,
  Dg = new react.Component().refs;
var ih = Da.ReactCurrentDispatcher;
var Yh = Da.ReactCurrentOwner;
var Wi = Da.ReactCurrentDispatcher,
  Xi = Da.ReactCurrentOwner;
function Nj() {}
function Pj(a, b) {
  try {
    return a(b);
  } finally {
  }
}
var Yj = null,
  Gi = null;
function dk(a) {
  if ('undefined' === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (b.isDisabled || !b.supportsFiber) return !0;
  try {
    var c = b.inject(a);
    Yj = function (a) {
      try {
        b.onCommitFiberRoot(c, a, void 0, 64 === (a.current.effectTag & 64));
      } catch (e) {}
    };
    Gi = function (a) {
      try {
        b.onCommitFiberUnmount(c, a);
      } catch (e) {}
    };
  } catch (d) {}
  return !0;
}
Ya = function (a, b, c) {
  switch (b) {
    case 'input':
      Db(a, c);
      b = c.name;
      if ('radio' === c.type && null != b) {
        for (c = a; c.parentNode; ) c = c.parentNode;
        c = c.querySelectorAll('input[name=' + JSON.stringify('' + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d = c[b];
          if (d !== a && d.form === a.form) {
            var e = re(d);
            if (!e) throw t(Error(90));
            zb(d);
            Db(d, e);
          }
        }
      }
      break;
    case 'textarea':
      Mb(a, c);
      break;
    case 'select':
      (b = c.value), null != b && Jb(a, !!c.multiple, b, !1);
  }
};
db = Pj;
fb = Nj;
(function (a) {
  var b = a.findFiberByHostInstance;
  return dk(
    objectAssign({}, a, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: Da.ReactCurrentDispatcher,
      findHostInstanceByFiber: function (a) {
        a = Ec(a);
        return null === a ? null : a.stateNode;
      },
      findFiberByHostInstance: function (a) {
        return b ? b(a) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null,
    }),
  );
})({
  findFiberByHostInstance: Cd,
  bundleType: 0,
  version: '16.10.2',
  rendererPackageName: 'react-dom',
});
var schedulerTracing_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: !0,
  });
  var b = 0;
  exports.__interactionsRef = null;
  exports.__subscriberRef = null;
  exports.unstable_clear = function (a) {
    return a();
  };
  exports.unstable_getCurrent = function () {
    return null;
  };
  exports.unstable_getThreadID = function () {
    return ++b;
  };
  exports.unstable_trace = function (a, d, c) {
    return c();
  };
  exports.unstable_wrap = function (a) {
    return a;
  };
  exports.unstable_subscribe = function () {};
  exports.unstable_unsubscribe = function () {};
});
unwrapExports(schedulerTracing_production_min);
var schedulerTracing_production_min_1 = schedulerTracing_production_min.__interactionsRef;
var schedulerTracing_production_min_2 = schedulerTracing_production_min.__subscriberRef;
var schedulerTracing_production_min_3 = schedulerTracing_production_min.unstable_clear;
var schedulerTracing_production_min_4 = schedulerTracing_production_min.unstable_getCurrent;
var schedulerTracing_production_min_5 = schedulerTracing_production_min.unstable_getThreadID;
var schedulerTracing_production_min_6 = schedulerTracing_production_min.unstable_trace;
var schedulerTracing_production_min_7 = schedulerTracing_production_min.unstable_wrap;
var schedulerTracing_production_min_8 = schedulerTracing_production_min.unstable_subscribe;
var schedulerTracing_production_min_9 = schedulerTracing_production_min.unstable_unsubscribe;
var schedulerTracing_development = createCommonjsModule(function (module, exports) {
  {
    (function () {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      {
        exports.__interactionsRef = {
          current: new Set(),
        };
        exports.__subscriberRef = {
          current: null,
        };
      }
      function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
          return callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
        }
      }
      function unstable_getCurrent() {
        {
          return exports.__interactionsRef.current;
        }
      }
      function unstable_getThreadID() {
        return ++threadIDCounter;
      }
      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name: name,
          timestamp: timestamp,
        };
        var prevInteractions = exports.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }
        return returnValue;
      }
      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }
        wrappedInteractions.forEach(function (interaction) {
          interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = wrappedInteractions;
          subscriber = exports.__subscriberRef.current;
          try {
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(undefined, arguments);
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }
            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }
        wrapped.cancel = function cancel() {
          subscriber = exports.__subscriberRef.current;
          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;
              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };
        return wrapped;
      }
      var subscribers = null;
      {
        subscribers = new Set();
      }
      function unstable_subscribe(subscriber) {
        {
          subscribers.add(subscriber);
          if (subscribers.size === 1) {
            exports.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
              onInteractionTraced: onInteractionTraced,
              onWorkCanceled: onWorkCanceled,
              onWorkScheduled: onWorkScheduled,
              onWorkStarted: onWorkStarted,
              onWorkStopped: onWorkStopped,
            };
          }
        }
      }
      function unstable_unsubscribe(subscriber) {
        {
          subscribers.delete(subscriber);
          if (subscribers.size === 0) {
            exports.__subscriberRef.current = null;
          }
        }
      }
      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      exports.unstable_clear = unstable_clear;
      exports.unstable_getCurrent = unstable_getCurrent;
      exports.unstable_getThreadID = unstable_getThreadID;
      exports.unstable_trace = unstable_trace;
      exports.unstable_wrap = unstable_wrap;
      exports.unstable_subscribe = unstable_subscribe;
      exports.unstable_unsubscribe = unstable_unsubscribe;
    })();
  }
});
unwrapExports(schedulerTracing_development);
var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
var schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;
var schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;
var schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;
var schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;
var tracing = createCommonjsModule(function (module) {
  {
    module.exports = schedulerTracing_development;
  }
});
var reactDom_development = createCommonjsModule(function (module) {
  {
    (function () {
      var React = react;
      var _assign = objectAssign;
      var Scheduler = scheduler;
      var checkPropTypes = checkPropTypes_1;
      var tracing$1 = tracing;
      function ReactError(error) {
        error.name = 'Invariant Violation';
        return error;
      }
      (function () {
        if (!React) {
          {
            throw ReactError(
              Error('ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'),
            );
          }
        }
      })();
      var eventPluginOrder = null;
      var namesToPlugins = {};
      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }
        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          (function () {
            if (!(pluginIndex > -1)) {
              {
                throw ReactError(
                  Error(
                    'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `' +
                      pluginName +
                      '`.',
                  ),
                );
              }
            }
          })();
          if (plugins[pluginIndex]) {
            continue;
          }
          (function () {
            if (!pluginModule.extractEvents) {
              {
                throw ReactError(
                  Error(
                    'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `' +
                      pluginName +
                      '` does not.',
                  ),
                );
              }
            }
          })();
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;
          for (var eventName in publishedEvents) {
            (function () {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw ReactError(
                    Error(
                      'EventPluginRegistry: Failed to publish event `' +
                        eventName +
                        '` for plugin `' +
                        pluginName +
                        '`.',
                    ),
                  );
                }
              }
            })();
          }
        }
      }
      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        (function () {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw ReactError(
                Error(
                  'EventPluginHub: More than one plugin attempted to publish the same event name, `' + eventName + '`.',
                ),
              );
            }
          }
        })();
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }
          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }
        return false;
      }
      function publishRegistrationName(registrationName, pluginModule, eventName) {
        (function () {
          if (!!registrationNameModules[registrationName]) {
            {
              throw ReactError(
                Error(
                  'EventPluginHub: More than one plugin attempted to publish the same registration name, `' +
                    registrationName +
                    '`.',
                ),
              );
            }
          }
        })();
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === 'onDoubleClick') {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
      }
      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function injectEventPluginOrder(injectedEventPluginOrder) {
        (function () {
          if (!!eventPluginOrder) {
            {
              throw ReactError(
                Error(
                  'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.',
                ),
              );
            }
          }
        })();
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }
      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }
          var pluginModule = injectedNamesToPlugins[pluginName];
          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            (function () {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw ReactError(
                    Error(
                      'EventPluginRegistry: Cannot inject two different event plugins using the same name, `' +
                        pluginName +
                        '`.',
                    ),
                  );
                }
              }
            })();
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }
      var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      };
      {
        if (
          typeof window !== 'undefined' &&
          typeof window.dispatchEvent === 'function' &&
          typeof document !== 'undefined' &&
          typeof document.createEvent === 'function'
        ) {
          var fakeNode = document.createElement('react');
          var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
            (function () {
              if (!(typeof document !== 'undefined')) {
                {
                  throw ReactError(
                    Error(
                      'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.',
                    ),
                  );
                }
              }
            })();
            var evt = document.createEvent('Event');
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                window.event = windowEvent;
              }
              func.apply(context, funcArgs);
              didError = false;
            }
            var error;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error = event.error;
              didSetError = true;
              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error != null && typeof error === 'object') {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }
            var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, 'event', windowEventDescriptor);
            }
            if (didError) {
              if (!didSetError) {
                error = new Error(
                  'An error was thrown inside one of your components, but React ' +
                    "doesn't know what it was. This is likely due to browser " +
                    'flakiness. React does its best to preserve the "Pause on ' +
                    'exceptions" behavior of the DevTools, which requires some ' +
                    "DEV-mode only tricks. It's possible that these don't work in " +
                    'your browser. Try triggering the error in production mode, ' +
                    'or switching to a modern browser. If you suspect that this is ' +
                    'actually an issue with React, please file an issue.',
                );
              } else if (isCrossOriginError) {
                error = new Error(
                  "A cross-origin error was thrown. React doesn't have access to " +
                    'the actual error object in development. ' +
                    'See https://fb.me/react-crossorigin-error for more information.',
                );
              }
              this.onError(error);
            }
            window.removeEventListener('error', handleWindowError);
          };
          invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function (error) {
          hasError = true;
          caughtError = error;
        },
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
        }
      }
      var warningWithoutStack = function () {};
      {
        warningWithoutStack = function (condition, format) {
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          if (format === undefined) {
            throw new Error(
              '`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument',
            );
          }
          if (args.length > 8) {
            throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
          if (condition) {
            return;
          }
          if (typeof console !== 'undefined') {
            var argsWithFormat = args.map(function (item) {
              return '' + item;
            });
            argsWithFormat.unshift('Warning: ' + format);
            Function.prototype.apply.call(console.error, console, argsWithFormat);
          }
          try {
            var argIndex = 0;
            var message =
              'Warning: ' +
              format.replace(/%s/g, function () {
                return args[argIndex++];
              });
            throw new Error(message);
          } catch (x) {}
        };
      }
      var warningWithoutStack$1 = warningWithoutStack;
      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
          !(getNodeFromInstance && getInstanceFromNode)
            ? warningWithoutStack$1(
                false,
                'EventPluginUtils.setComponentTree(...): Injected ' +
                  'module is missing getNodeFromInstance or getInstanceFromNode.',
              )
            : void 0;
        }
      }
      var validateEventDispatches;
      {
        validateEventDispatches = function (event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          !(instancesIsArr === listenersIsArr && instancesLen === listenersLen)
            ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.')
            : void 0;
        };
      }
      function executeDispatch(event, listener, inst) {
        var type = event.type || 'unknown-event';
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }
        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }
            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, dispatchListeners, dispatchInstances);
        }
        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }
      function accumulateInto(current, next) {
        (function () {
          if (!(next != null)) {
            {
              throw ReactError(Error('accumulateInto(...): Accumulated items must not be null or undefined.'));
            }
          }
        })();
        if (current == null) {
          return next;
        }
        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }
          current.push(next);
          return current;
        }
        if (Array.isArray(next)) {
          return [current].concat(next);
        }
        return [current, next];
      }
      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }
      var eventQueue = null;
      var executeDispatchesAndRelease = function (event) {
        if (event) {
          executeDispatchesInOrder(event);
          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };
      var executeDispatchesAndReleaseTopLevel = function (e) {
        return executeDispatchesAndRelease(e);
      };
      function runEventsInBatch(events) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }
        var processingEventQueue = eventQueue;
        eventQueue = null;
        if (!processingEventQueue) {
          return;
        }
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        (function () {
          if (!!eventQueue) {
            {
              throw ReactError(
                Error(
                  'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.',
                ),
              );
            }
          }
        })();
        rethrowCaughtError();
      }
      function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case 'onClick':
          case 'onClickCapture':
          case 'onDoubleClick':
          case 'onDoubleClickCapture':
          case 'onMouseDown':
          case 'onMouseDownCapture':
          case 'onMouseMove':
          case 'onMouseMoveCapture':
          case 'onMouseUp':
          case 'onMouseUpCapture':
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName,
      };
      function getListener(inst, registrationName) {
        var listener;
        var stateNode = inst.stateNode;
        if (!stateNode) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (!props) {
          return null;
        }
        listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        (function () {
          if (!(!listener || typeof listener === 'function')) {
            {
              throw ReactError(
                Error(
                  'Expected `' +
                    registrationName +
                    '` listener to be a function, instead got a value of `' +
                    typeof listener +
                    '` type.',
                ),
              );
            }
          }
        })();
        return listener;
      }
      function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = null;
        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];
          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget,
              eventSystemFlags,
            );
            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }
        return events;
      }
      function runExtractedPluginEventsInBatch(
        topLevelType,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
      ) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        runEventsInBatch(events);
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
        ReactSharedInternals.ReactCurrentDispatcher = {
          current: null,
        };
      }
      if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
        ReactSharedInternals.ReactCurrentBatchConfig = {
          suspense: null,
        };
      }
      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
      var describeComponentFrame = function (name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, '');
          {
            if (/^index\./.test(fileName)) {
              var match = path.match(BEFORE_SLASH_RE);
              if (match) {
                var pathBeforeSlash = match[1];
                if (pathBeforeSlash) {
                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                  fileName = folderName + '/' + fileName;
                }
              }
            }
          }
          sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        } else if (ownerName) {
          sourceInfo = ' (created by ' + ownerName + ')';
        }
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
      };
      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
          return null;
        }
        var maybeIterator =
          (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }
        return null;
      }
      var warning = warningWithoutStack$1;
      {
        warning = function (condition, format) {
          if (condition) {
            return;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
        };
      }
      var warning$1 = warning;
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
      }
      function initializeLazyComponentType(lazyComponent) {
        if (lazyComponent._status === Uninitialized) {
          lazyComponent._status = Pending;
          var ctor = lazyComponent._ctor;
          var thenable = ctor();
          lazyComponent._result = thenable;
          thenable.then(
            function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    warning$1(
                      false,
                      'lazy: Expected the result of a dynamic import() call. ' +
                        'Instead received: %s\n\nYour code should look like: \n  ' +
                        "const MyComponent = lazy(() => import('./MyComponent'))",
                      moduleObject,
                    );
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            },
            function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            },
          );
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === 'number') {
            warningWithoutStack$1(
              false,
              'Received an unexpected object in getComponentName(). ' +
                'This is likely a bug in React. Please file an issue.',
            );
          }
        }
        if (typeof type === 'function') {
          return type.displayName || type.name || null;
        }
        if (typeof type === 'string') {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'Fragment';
          case REACT_PORTAL_TYPE:
            return 'Portal';
          case REACT_PROFILER_TYPE:
            return 'Profiler';
          case REACT_STRICT_MODE_TYPE:
            return 'StrictMode';
          case REACT_SUSPENSE_TYPE:
            return 'Suspense';
          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList';
        }
        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              return 'Context.Consumer';
            case REACT_PROVIDER_TYPE:
              return 'Context.Provider';
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_LAZY_TYPE: {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
              break;
            }
          }
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostPortal:
          case HostText:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return '';
          default:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber.type);
            var ownerName = null;
            if (owner) {
              ownerName = getComponentName(owner.type);
            }
            return describeComponentFrame(name, source, ownerName);
        }
      }
      function getStackByFiberInDevAndProd(workInProgress) {
        var info = '';
        var node = workInProgress;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      }
      var current = null;
      var phase = null;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== 'undefined') {
            return getComponentName(owner.type);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return '';
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          phase = null;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          phase = null;
        }
      }
      function setCurrentPhase(lifeCyclePhase) {
        {
          phase = lifeCyclePhase;
        }
      }
      var canUseDOM = !!(
        typeof window !== 'undefined' &&
        typeof window.document !== 'undefined' &&
        typeof window.document.createElement !== 'undefined'
      );
      var PLUGIN_EVENT_SYSTEM = 1;
      var IS_REPLAYED = 1 << 5;
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        (function () {
          if (!(typeof restoreImpl === 'function')) {
            {
              throw ReactError(
                Error(
                  'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, props);
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      var enableProfilerTimer = true;
      var enableFlareAPI = false;
      var enableFundamentalAPI = false;
      var warnAboutStringRefs = false;
      var batchedUpdatesImpl = function (fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var discreteUpdatesImpl = function (fn, a, b, c) {
        return fn(a, b, c);
      };
      var flushDiscreteUpdatesImpl = function () {};
      var batchedEventUpdatesImpl = batchedUpdatesImpl;
      var isInsideEventHandler = false;
      var isBatchingEventUpdates = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushDiscreteUpdatesImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) {
          return fn(a, b);
        }
        isBatchingEventUpdates = true;
        try {
          return batchedEventUpdatesImpl(fn, a, b);
        } finally {
          isBatchingEventUpdates = false;
          finishEventHandler();
        }
      }
      function discreteUpdates(fn, a, b, c) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
          return discreteUpdatesImpl(fn, a, b, c);
        } finally {
          isInsideEventHandler = prevIsInsideEventHandler;
          if (!isInsideEventHandler) {
            finishEventHandler();
          }
        }
      }
      function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler && !enableFlareAPI) {
          flushDiscreteUpdatesImpl();
        }
      }
      function setBatchingImplementation(
        _batchedUpdatesImpl,
        _discreteUpdatesImpl,
        _flushDiscreteUpdatesImpl,
        _batchedEventUpdatesImpl,
      ) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
      }
      var DiscreteEvent = 0;
      var UserBlockingEvent = 1;
      var ContinuousEvent = 2;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var runWithPriority = Scheduler.unstable_runWithPriority;
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR =
        ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
      var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
        '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$',
      );
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          warning$1(false, 'Invalid attribute name: `%s`', attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case 'function':
          case 'symbol':
            return true;
          case 'boolean': {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
      }
      var properties = {};
      [
        'children',
        'dangerouslySetInnerHTML',
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style',
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
      });
      [
        ['acceptCharset', 'accept-charset'],
        ['className', 'class'],
        ['htmlFor', 'for'],
        ['httpEquiv', 'http-equiv'],
      ].forEach(function (_ref) {
        var name = _ref[0],
          attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
      });
      ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
      });
      ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
      });
      [
        'allowFullScreen',
        'async',
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope',
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
      });
      ['checked', 'multiple', 'muted', 'selected'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
      });
      ['capture', 'download'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
      });
      ['cols', 'rows', 'size', 'span'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
      });
      ['rowSpan', 'start'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function (token) {
        return token[1].toUpperCase();
      };
      [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height',
      ].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
      });
      ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (
        attributeName,
      ) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          attributeName,
          'http://www.w3.org/1999/xlink',
          false,
        );
      });
      ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          attributeName,
          'http://www.w3.org/XML/1998/namespace',
          false,
        );
      });
      ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          attributeName.toLowerCase(),
          null,
          false,
        );
      });
      var xlinkHref = 'xlinkHref';
      properties[xlinkHref] = new PropertyInfoRecord(
        'xlinkHref',
        STRING,
        false,
        'xlink:href',
        'http://www.w3.org/1999/xlink',
        true,
      );
      ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          attributeName.toLowerCase(),
          null,
          true,
        );
      });
      var ReactDebugCurrentFrame$1 = null;
      {
        ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      }
      var isJavaScriptProtocol =
        /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          warning$1(
            false,
            'A future version of React will block javascript: URLs as a security precaution. ' +
              'Use event handlers instead if you can. If you need to generate unsafe HTML try ' +
              'using dangerouslySetInnerHTML instead. React was passed %s.',
            JSON.stringify(url),
          );
        }
      }
      function toString(value) {
        return '' + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case 'boolean':
          case 'number':
          case 'object':
          case 'string':
          case 'undefined':
            return value;
          default:
            return '';
        }
      }
      var toStringOrTrustedType = toString;
      function setAttribute(node, attributeName, attributeValue) {
        node.setAttribute(attributeName, attributeValue);
      }
      function setAttributeNS(node, attributeNamespace, attributeName, attributeValue) {
        node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            if (propertyInfo.sanitizeURL) {
              sanitizeURL('' + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === '') {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === '' + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === '' + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              setAttribute(node, _attributeName, toStringOrTrustedType(value));
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : '';
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || (_type === OVERLOADED_BOOLEAN && value === true)) {
            attributeValue = '';
          } else {
            attributeValue = toStringOrTrustedType(value);
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            setAttributeNS(node, attributeNamespace, attributeName, attributeValue);
          } else {
            setAttribute(node, attributeName, attributeValue);
          }
        }
      }
      var ReactDebugCurrentFrame$2 = null;
      var ReactControlledValuePropTypes = {
        checkPropTypes: null,
      };
      {
        ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true,
        };
        var propTypes = {
          value: function (props, propName, componentName) {
            if (
              hasReadOnlyValue[props.type] ||
              props.onChange ||
              props.readOnly ||
              props.disabled ||
              props[propName] == null ||
              enableFlareAPI
            ) {
              return null;
            }
            return new Error(
              'You provided a `value` prop to a form field without an ' +
                '`onChange` handler. This will render a read-only field. If ' +
                'the field should be mutable use `defaultValue`. Otherwise, ' +
                'set either `onChange` or `readOnly`.',
            );
          },
          checked: function (props, propName, componentName) {
            if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI) {
              return null;
            }
            return new Error(
              'You provided a `checked` prop to a form field without an ' +
                '`onChange` handler. This will render a read-only field. If ' +
                'the field should be mutable use `defaultChecked`. Otherwise, ' +
                'set either `onChange` or `readOnly`.',
            );
          },
        };
        ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
          checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
        };
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = '';
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? 'true' : 'false';
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField];
        if (
          node.hasOwnProperty(valueField) ||
          typeof descriptor === 'undefined' ||
          typeof descriptor.get !== 'function' ||
          typeof descriptor.set !== 'function'
        ) {
          return;
        }
        var get = descriptor.get,
          set = descriptor.set;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function () {
            return get.call(this);
          },
          set: function (value) {
            currentValue = '' + value;
            set.call(this, value);
          },
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable,
        });
        var tracker = {
          getValue: function () {
            return currentValue;
          },
          setValue: function (value) {
            currentValue = '' + value;
          },
          stopTracking: function () {
            detachTracker(node);
            delete node[valueField];
          },
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: checked != null ? checked : node._wrapperState.initialChecked,
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          ReactControlledValuePropTypes.checkPropTypes('input', props);
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            warning$1(
              false,
              '%s contains an input of type %s with both checked and defaultChecked props. ' +
                'Input elements must be either controlled or uncontrolled ' +
                '(specify either the checked prop, or the defaultChecked prop, but not ' +
                'both). Decide between using a controlled or uncontrolled input ' +
                'element and remove one of these props. More info: ' +
                'https://fb.me/react-controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
              props.type,
            );
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            warning$1(
              false,
              '%s contains an input of type %s with both value and defaultValue props. ' +
                'Input elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled input ' +
                'element and remove one of these props. More info: ' +
                'https://fb.me/react-controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
              props.type,
            );
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props),
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, 'checked', checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            warning$1(
              false,
              'A component is changing an uncontrolled input of type %s to be controlled. ' +
                'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
                'Decide between using a controlled or uncontrolled input ' +
                'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
              props.type,
            );
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            warning$1(
              false,
              'A component is changing a controlled input of type %s to be uncontrolled. ' +
                'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
                'Decide between using a controlled or uncontrolled input ' +
                'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
              props.type,
            );
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === 'number') {
            if ((value === 0 && node.value === '') || node.value != value) {
              node.value = toString(value);
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value);
          }
        } else if (type === 'submit' || type === 'reset') {
          node.removeAttribute('value');
          return;
        }
        {
          if (props.hasOwnProperty('value')) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty('defaultValue')) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating) {
        var node = element;
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
          var type = props.type;
          var isButton = type === 'submit' || type === 'reset';
          if (isButton && (props.value === undefined || props.value === null)) {
            return;
          }
          var initialValue = toString(node._wrapperState.initialValue);
          if (!isHydrating) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== '') {
          node.name = '';
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== '') {
          node.name = name;
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
          for (var i = 0; i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
            (function () {
              if (!otherProps) {
                {
                  throw ReactError(
                    Error(
                      'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.',
                    ),
                  );
                }
              }
            })();
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== 'number' || node.ownerDocument.activeElement !== node) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      function flattenChildren(children) {
        var content = '';
        React.Children.forEach(children, function (child) {
          if (child == null) {
            return;
          }
          content += child;
        });
        return content;
      }
      function validateProps(element, props) {
        {
          if (typeof props.children === 'object' && props.children !== null) {
            React.Children.forEach(props.children, function (child) {
              if (child == null) {
                return;
              }
              if (typeof child === 'string' || typeof child === 'number') {
                return;
              }
              if (typeof child.type !== 'string') {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                warning$1(false, 'Only strings and numbers are supported as <option> children.');
              }
            });
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            warning$1(
              false,
              'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.',
            );
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute('value', toString(getToStringValue(props.value)));
        }
      }
      function getHostProps$1(element, props) {
        var hostProps = _assign(
          {
            children: undefined,
          },
          props,
        );
        var content = flattenChildren(props.children);
        if (content) {
          hostProps.children = content;
        }
        return hostProps;
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return '\n\nCheck the render method of `' + ownerName + '`.';
        }
        return '';
      }
      var valuePropNames = ['value', 'defaultValue'];
      function checkSelectPropTypes(props) {
        ReactControlledValuePropTypes.checkPropTypes('select', props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var isArray = Array.isArray(props[propName]);
          if (props.multiple && !isArray) {
            warning$1(
              false,
              'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s',
              propName,
              getDeclarationErrorAddendum(),
            );
          } else if (!props.multiple && isArray) {
            warning$1(
              false,
              'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s',
              propName,
              getDeclarationErrorAddendum(),
            );
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0; i < selectedValues.length; i++) {
            selectedValue['$' + selectedValues[i]] = true;
          }
          for (var _i = 0; _i < options.length; _i++) {
            var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
            if (options[_i].selected !== selected) {
              options[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0; _i2 < options.length; _i2++) {
            if (options[_i2].value === _selectedValue) {
              options[_i2].selected = true;
              if (setDefaultSelected) {
                options[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options[_i2].disabled) {
              defaultSelected = options[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$2(element, props) {
        return _assign({}, props, {
          value: undefined,
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple,
        };
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            warning$1(
              false,
              'Select elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled select ' +
                'element and remove one of these props. More info: ' +
                'https://fb.me/react-controlled-components',
            );
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
          }
        }
      }
      function restoreControlledState$2(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$3(element, props) {
        var node = element;
        (function () {
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw ReactError(Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.'));
            }
          }
        })();
        var hostProps = _assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node._wrapperState.initialValue),
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          ReactControlledValuePropTypes.checkPropTypes('textarea', props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            warning$1(
              false,
              '%s contains a textarea with both value and defaultValue props. ' +
                'Textarea elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled textarea ' +
                'and remove one of these props. More info: ' +
                'https://fb.me/react-controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
            );
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var defaultValue = props.defaultValue;
          var children = props.children;
          if (children != null) {
            {
              warning$1(
                false,
                'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.',
              );
            }
            (function () {
              if (!(defaultValue == null)) {
                {
                  throw ReactError(Error('If you supply `defaultValue` on a <textarea>, do not pass children.'));
                }
              }
            })();
            if (Array.isArray(children)) {
              (function () {
                if (!(children.length <= 1)) {
                  {
                    throw ReactError(Error('<textarea> can only have at most one child.'));
                  }
                }
              })();
              children = children[0];
            }
            defaultValue = children;
          }
          if (defaultValue == null) {
            defaultValue = '';
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue),
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== '' && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$3(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
      var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
      var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
      var Namespaces = {
        html: HTML_NAMESPACE$1,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE,
      };
      function getIntrinsicNamespace(type) {
        switch (type) {
          case 'svg':
            return SVG_NAMESPACE;
          case 'math':
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE$1;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
          return HTML_NAMESPACE$1;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function (func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
          return function (arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function () {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
        if (node.namespaceURI === Namespaces.svg) {
          if (!('innerHTML' in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement('div');
            reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function (node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      function unsafeCastStringToDOMTopLevelType(topLevelType) {
        return topLevelType;
      }
      function unsafeCastDOMTopLevelTypeToString(topLevelType) {
        return topLevelType;
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd'),
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement('div').style;
        if (!('AnimationEvent' in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!('TransitionEvent' in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return (prefixedEventNames[eventName] = prefixMap[styleProp]);
          }
        }
        return eventName;
      }
      var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
      var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
      var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
      var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
      var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
      var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
      var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
      var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
      var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
      var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
      var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
      var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
      var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
      var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
      var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
      var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
      var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
      var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
      var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
      var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
      var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
      var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
      var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
      var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
      var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
      var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
      var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
      var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
      var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
      var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
      var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
      var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
      var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
      var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
      var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
      var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
      var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
      var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
      var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
      var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
      var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
      var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
      var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
      var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
      var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
      var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
      var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
      var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
      var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
      var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
      var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
      var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
      var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
      var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
      var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
      var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
      var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
      var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
      var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
      var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
      var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
      var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
      var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
      var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
      var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
      var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
      var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
      var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
      var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
      var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
      var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
      var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
      var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
      var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
      var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
      var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
      var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
      var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
      var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
      var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
      var mediaEventTypes = [
        TOP_ABORT,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING,
      ];
      function getRawEventName(topLevelType) {
        return unsafeCastDOMTopLevelTypeToString(topLevelType);
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map();
      var queuedPointerCaptures = new Map();
      function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
      }
      var discreteReplayableEvents = [
        TOP_MOUSE_DOWN,
        TOP_MOUSE_UP,
        TOP_TOUCH_CANCEL,
        TOP_TOUCH_END,
        TOP_TOUCH_START,
        TOP_AUX_CLICK,
        TOP_DOUBLE_CLICK,
        TOP_POINTER_CANCEL,
        TOP_POINTER_DOWN,
        TOP_POINTER_UP,
        TOP_DRAG_END,
        TOP_DRAG_START,
        TOP_DROP,
        TOP_COMPOSITION_END,
        TOP_COMPOSITION_START,
        TOP_KEY_DOWN,
        TOP_KEY_PRESS,
        TOP_KEY_UP,
        TOP_INPUT,
        TOP_TEXT_INPUT,
        TOP_CLOSE,
        TOP_CANCEL,
        TOP_COPY,
        TOP_CUT,
        TOP_PASTE,
        TOP_CLICK,
        TOP_CHANGE,
        TOP_CONTEXT_MENU,
        TOP_RESET,
        TOP_SUBMIT,
      ];
      var continuousReplayableEvents = [
        TOP_FOCUS,
        TOP_BLUR,
        TOP_DRAG_ENTER,
        TOP_DRAG_LEAVE,
        TOP_MOUSE_OVER,
        TOP_MOUSE_OUT,
        TOP_POINTER_OVER,
        TOP_POINTER_OUT,
        TOP_GOT_POINTER_CAPTURE,
        TOP_LOST_POINTER_CAPTURE,
      ];
      function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function trapReplayableEvent(topLevelType, document, listeningSet) {
        listenToTopLevel(topLevelType, document, listeningSet);
      }
      function eagerlyTrapReplayableEvents(document) {
        var listeningSet = getListeningSetForElement(document);
        discreteReplayableEvents.forEach(function (topLevelType) {
          trapReplayableEvent(topLevelType, document, listeningSet);
        });
        continuousReplayableEvents.forEach(function (topLevelType) {
          trapReplayableEvent(topLevelType, document, listeningSet);
        });
      }
      function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
        return {
          blockedOn: blockedOn,
          topLevelType: topLevelType,
          eventSystemFlags: eventSystemFlags | IS_REPLAYED,
          nativeEvent: nativeEvent,
        };
      }
      function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
      }
      function clearIfContinuousEvent(topLevelType, nativeEvent) {
        switch (topLevelType) {
          case TOP_FOCUS:
          case TOP_BLUR:
            queuedFocus = null;
            break;
          case TOP_DRAG_ENTER:
          case TOP_DRAG_LEAVE:
            queuedDrag = null;
            break;
          case TOP_MOUSE_OVER:
          case TOP_MOUSE_OUT:
            queuedMouse = null;
            break;
          case TOP_POINTER_OVER:
          case TOP_POINTER_OUT: {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE: {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateQueuedReplayableEvent(
        existingQueuedEvent,
        blockedOn,
        topLevelType,
        eventSystemFlags,
        nativeEvent,
      ) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          return createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
        switch (topLevelType) {
          case TOP_FOCUS: {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              topLevelType,
              eventSystemFlags,
              focusEvent,
            );
            return true;
          }
          case TOP_DRAG_ENTER: {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              topLevelType,
              eventSystemFlags,
              dragEvent,
            );
            return true;
          }
          case TOP_MOUSE_OVER: {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              topLevelType,
              eventSystemFlags,
              mouseEvent,
            );
            return true;
          }
          case TOP_POINTER_OVER: {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(
              pointerId,
              accumulateOrCreateQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                topLevelType,
                eventSystemFlags,
                pointerEvent,
              ),
            );
            return true;
          }
          case TOP_GOT_POINTER_CAPTURE: {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(
              _pointerId2,
              accumulateOrCreateQueuedReplayableEvent(
                queuedPointerCaptures.get(_pointerId2) || null,
                blockedOn,
                topLevelType,
                eventSystemFlags,
                _pointerEvent,
              ),
            );
            return true;
          }
        }
        return false;
      }
      function attemptReplayQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var nextBlockedOn = attemptToDispatchEvent(
          queuedEvent.topLevelType,
          queuedEvent.eventSystemFlags,
          queuedEvent.nativeEvent,
        );
        if (nextBlockedOn !== null) {
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        return true;
      }
      function attemptReplayQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        while (queuedDiscreteEvents.length > 0) {
          var nextDiscreteEvent = queuedDiscreteEvents[0];
          if (nextDiscreteEvent.blockedOn !== null) {
            break;
          }
          var nextBlockedOn = attemptToDispatchEvent(
            nextDiscreteEvent.topLevelType,
            nextDiscreteEvent.eventSystemFlags,
            nextDiscreteEvent.nativeEvent,
          );
          if (nextBlockedOn !== null) {
            nextDiscreteEvent.blockedOn = nextBlockedOn;
          } else {
            queuedDiscreteEvents.shift();
          }
        }
        if (queuedFocus !== null && attemptReplayQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1; i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function (queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
      }
      function get(key) {
        return key._reactInternalFiber;
      }
      function has(key) {
        return key._reactInternalFiber !== undefined;
      }
      function set(key, value) {
        key._reactInternalFiber = value;
      }
      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current = fiber.alternate;
            if (current !== null) {
              suspenseState = current.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner$1.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            !instance._warnedAboutRefsInRender
              ? warningWithoutStack$1(
                  false,
                  '%s is accessing isMounted inside its render() function. ' +
                    'render() should be a pure function of props and state. It should ' +
                    'never access something that requires stale data from the previous ' +
                    'render, such as refs. Move this logic to componentDidMount and ' +
                    'componentDidUpdate instead.',
                  getComponentName(ownerFiber.type) || 'A component',
                )
              : void 0;
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        (function () {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw ReactError(Error('Unable to find node on an unmounted component.'));
            }
          }
        })();
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          (function () {
            if (!(nearestMounted !== null)) {
              {
                throw ReactError(Error('Unable to find node on an unmounted component.'));
              }
            }
          })();
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            (function () {
              {
                {
                  throw ReactError(Error('Unable to find node on an unmounted component.'));
                }
              }
            })();
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              (function () {
                if (!didFindChild) {
                  {
                    throw ReactError(
                      Error(
                        'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
            }
          }
          (function () {
            if (!(a.alternate === b)) {
              {
                throw ReactError(
                  Error(
                    "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.",
                  ),
                );
              }
            }
          })();
        }
        (function () {
          if (!(a.tag === HostRoot)) {
            {
              throw ReactError(Error('Unable to find node on an unmounted component.'));
            }
          }
        })();
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function addEventBubbleListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, false);
      }
      function addEventCaptureListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, true);
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      function getParent(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;
        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }
          instA = getParent(instA);
          instB = getParent(instB);
        }
        return null;
      }
      function traverseTwoPhase(inst, fn, arg) {
        var path = [];
        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }
        var i;
        for (i = path.length; i-- > 0; ) {
          fn(path[i], 'captured', arg);
        }
        for (i = 0; i < path.length; i++) {
          fn(path[i], 'bubbled', arg);
        }
      }
      function traverseEnterLeave(from, to, fn, argFrom, argTo) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        var pathFrom = [];
        while (true) {
          if (!from) {
            break;
          }
          if (from === common) {
            break;
          }
          var alternate = from.alternate;
          if (alternate !== null && alternate === common) {
            break;
          }
          pathFrom.push(from);
          from = getParent(from);
        }
        var pathTo = [];
        while (true) {
          if (!to) {
            break;
          }
          if (to === common) {
            break;
          }
          var _alternate = to.alternate;
          if (_alternate !== null && _alternate === common) {
            break;
          }
          pathTo.push(to);
          to = getParent(to);
        }
        for (var i = 0; i < pathFrom.length; i++) {
          fn(pathFrom[i], 'bubbled', argFrom);
        }
        for (var _i = pathTo.length; _i-- > 0; ) {
          fn(pathTo[_i], 'captured', argTo);
        }
      }
      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }
      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
        }
        var listener = listenerAtPhase(inst, event, phase);
        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }
      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }
      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }
      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }
      function accumulateEnterLeaveDispatches(leave, enter, from, to) {
        traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
      }
      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }
      var EVENT_POOL_SIZE = 10;
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: function () {
          return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function (event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null,
      };
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
          delete this.isDefaultPrevented;
          delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }
          {
            delete this[propName];
          }
          var normalize = Interface[propName];
          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === 'target') {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }
        var defaultPrevented =
          nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      _assign(SyntheticEvent.prototype, {
        preventDefault: function () {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== 'unknown') {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function () {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== 'unknown') {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function () {
          this.isPersistent = functionThatReturnsTrue;
        },
        isPersistent: functionThatReturnsFalse,
        destructor: function () {
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }
          this.dispatchConfig = null;
          this._targetInst = null;
          this.nativeEvent = null;
          this.isDefaultPrevented = functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          this._dispatchListeners = null;
          this._dispatchInstances = null;
          {
            Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
            Object.defineProperty(
              this,
              'isDefaultPrevented',
              getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse),
            );
            Object.defineProperty(
              this,
              'isPropagationStopped',
              getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse),
            );
            Object.defineProperty(
              this,
              'preventDefault',
              getPooledWarningPropertyDefinition('preventDefault', function () {}),
            );
            Object.defineProperty(
              this,
              'stopPropagation',
              getPooledWarningPropertyDefinition('stopPropagation', function () {}),
            );
          }
        },
      });
      SyntheticEvent.Interface = EventInterface;
      SyntheticEvent.extend = function (Interface) {
        var Super = this;
        var E = function () {};
        E.prototype = Super.prototype;
        var prototype = new E();
        function Class() {
          return Super.apply(this, arguments);
        }
        _assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _assign({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };
      addEventPoolingTo(SyntheticEvent);
      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === 'function';
        return {
          configurable: true,
          set: set,
          get: get,
        };
        function set(val) {
          var action = isFunction ? 'setting the method' : 'setting the property';
          warn(action, 'This is effectively a no-op');
          return val;
        }
        function get() {
          var action = isFunction ? 'accessing the method' : 'accessing the property';
          var result = isFunction ? 'This is a no-op function' : 'This is set to null';
          warn(action, result);
          return getVal;
        }
        function warn(action, result) {
          warningWithoutStack$1(
            false,
            "This synthetic event is reused for performance reasons. If you're seeing this, " +
              "you're %s `%s` on a released/nullified synthetic event. %s. " +
              'If you must keep the original synthetic event around, use event.persist(). ' +
              'See https://fb.me/react-event-pooling for more information.',
            action,
            propName,
            result,
          );
        }
      }
      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;
        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }
        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }
      function releasePooledEvent(event) {
        var EventConstructor = this;
        (function () {
          if (!(event instanceof EventConstructor)) {
            {
              throw ReactError(Error('Trying to release an event instance into a pool of a different type.'));
            }
          }
        })();
        event.destructor();
        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }
      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }
      var SyntheticAnimationEvent = SyntheticEvent.extend({
        animationName: null,
        elapsedTime: null,
        pseudoElement: null,
      });
      var SyntheticClipboardEvent = SyntheticEvent.extend({
        clipboardData: function (event) {
          return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        },
      });
      var SyntheticUIEvent = SyntheticEvent.extend({
        view: null,
        detail: null,
      });
      var SyntheticFocusEvent = SyntheticUIEvent.extend({
        relatedTarget: null,
      });
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified',
      };
      var translateToKey = {
        8: 'Backspace',
        9: 'Tab',
        12: 'Clear',
        13: 'Enter',
        16: 'Shift',
        17: 'Control',
        18: 'Alt',
        19: 'Pause',
        20: 'CapsLock',
        27: 'Escape',
        32: ' ',
        33: 'PageUp',
        34: 'PageDown',
        35: 'End',
        36: 'Home',
        37: 'ArrowLeft',
        38: 'ArrowUp',
        39: 'ArrowRight',
        40: 'ArrowDown',
        45: 'Insert',
        46: 'Delete',
        112: 'F1',
        113: 'F2',
        114: 'F3',
        115: 'F4',
        116: 'F5',
        117: 'F6',
        118: 'F7',
        119: 'F8',
        120: 'F9',
        121: 'F10',
        122: 'F11',
        123: 'F12',
        144: 'NumLock',
        145: 'ScrollLock',
        224: 'Meta',
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== 'Unidentified') {
            return key;
          }
        }
        if (nativeEvent.type === 'keypress') {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
          return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        }
        return '';
      }
      var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey',
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
        key: getEventKey,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: getEventModifierState,
        charCode: function (event) {
          if (event.type === 'keypress') {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function (event) {
          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode;
          }
          return 0;
        },
        which: function (event) {
          if (event.type === 'keypress') {
            return getEventCharCode(event);
          }
          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode;
          }
          return 0;
        },
      });
      var previousScreenX = 0;
      var previousScreenY = 0;
      var isMovementXSet = false;
      var isMovementYSet = false;
      var SyntheticMouseEvent = SyntheticUIEvent.extend({
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        pageX: null,
        pageY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: getEventModifierState,
        button: null,
        buttons: null,
        relatedTarget: function (event) {
          return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
        },
        movementX: function (event) {
          if ('movementX' in event) {
            return event.movementX;
          }
          var screenX = previousScreenX;
          previousScreenX = event.screenX;
          if (!isMovementXSet) {
            isMovementXSet = true;
            return 0;
          }
          return event.type === 'mousemove' ? event.screenX - screenX : 0;
        },
        movementY: function (event) {
          if ('movementY' in event) {
            return event.movementY;
          }
          var screenY = previousScreenY;
          previousScreenY = event.screenY;
          if (!isMovementYSet) {
            isMovementYSet = true;
            return 0;
          }
          return event.type === 'mousemove' ? event.screenY - screenY : 0;
        },
      });
      var SyntheticPointerEvent = SyntheticMouseEvent.extend({
        pointerId: null,
        width: null,
        height: null,
        pressure: null,
        tangentialPressure: null,
        tiltX: null,
        tiltY: null,
        twist: null,
        pointerType: null,
        isPrimary: null,
      });
      var SyntheticDragEvent = SyntheticMouseEvent.extend({
        dataTransfer: null,
      });
      var SyntheticTouchEvent = SyntheticUIEvent.extend({
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: getEventModifierState,
      });
      var SyntheticTransitionEvent = SyntheticEvent.extend({
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null,
      });
      var SyntheticWheelEvent = SyntheticMouseEvent.extend({
        deltaX: function (event) {
          return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function (event) {
          return 'deltaY' in event
            ? event.deltaY
            : 'wheelDeltaY' in event
            ? -event.wheelDeltaY
            : 'wheelDelta' in event
            ? -event.wheelDelta
            : 0;
        },
        deltaZ: null,
        deltaMode: null,
      });
      var eventTuples = [
        [TOP_BLUR, 'blur', DiscreteEvent],
        [TOP_CANCEL, 'cancel', DiscreteEvent],
        [TOP_CLICK, 'click', DiscreteEvent],
        [TOP_CLOSE, 'close', DiscreteEvent],
        [TOP_CONTEXT_MENU, 'contextMenu', DiscreteEvent],
        [TOP_COPY, 'copy', DiscreteEvent],
        [TOP_CUT, 'cut', DiscreteEvent],
        [TOP_AUX_CLICK, 'auxClick', DiscreteEvent],
        [TOP_DOUBLE_CLICK, 'doubleClick', DiscreteEvent],
        [TOP_DRAG_END, 'dragEnd', DiscreteEvent],
        [TOP_DRAG_START, 'dragStart', DiscreteEvent],
        [TOP_DROP, 'drop', DiscreteEvent],
        [TOP_FOCUS, 'focus', DiscreteEvent],
        [TOP_INPUT, 'input', DiscreteEvent],
        [TOP_INVALID, 'invalid', DiscreteEvent],
        [TOP_KEY_DOWN, 'keyDown', DiscreteEvent],
        [TOP_KEY_PRESS, 'keyPress', DiscreteEvent],
        [TOP_KEY_UP, 'keyUp', DiscreteEvent],
        [TOP_MOUSE_DOWN, 'mouseDown', DiscreteEvent],
        [TOP_MOUSE_UP, 'mouseUp', DiscreteEvent],
        [TOP_PASTE, 'paste', DiscreteEvent],
        [TOP_PAUSE, 'pause', DiscreteEvent],
        [TOP_PLAY, 'play', DiscreteEvent],
        [TOP_POINTER_CANCEL, 'pointerCancel', DiscreteEvent],
        [TOP_POINTER_DOWN, 'pointerDown', DiscreteEvent],
        [TOP_POINTER_UP, 'pointerUp', DiscreteEvent],
        [TOP_RATE_CHANGE, 'rateChange', DiscreteEvent],
        [TOP_RESET, 'reset', DiscreteEvent],
        [TOP_SEEKED, 'seeked', DiscreteEvent],
        [TOP_SUBMIT, 'submit', DiscreteEvent],
        [TOP_TOUCH_CANCEL, 'touchCancel', DiscreteEvent],
        [TOP_TOUCH_END, 'touchEnd', DiscreteEvent],
        [TOP_TOUCH_START, 'touchStart', DiscreteEvent],
        [TOP_VOLUME_CHANGE, 'volumeChange', DiscreteEvent],
        [TOP_DRAG, 'drag', UserBlockingEvent],
        [TOP_DRAG_ENTER, 'dragEnter', UserBlockingEvent],
        [TOP_DRAG_EXIT, 'dragExit', UserBlockingEvent],
        [TOP_DRAG_LEAVE, 'dragLeave', UserBlockingEvent],
        [TOP_DRAG_OVER, 'dragOver', UserBlockingEvent],
        [TOP_MOUSE_MOVE, 'mouseMove', UserBlockingEvent],
        [TOP_MOUSE_OUT, 'mouseOut', UserBlockingEvent],
        [TOP_MOUSE_OVER, 'mouseOver', UserBlockingEvent],
        [TOP_POINTER_MOVE, 'pointerMove', UserBlockingEvent],
        [TOP_POINTER_OUT, 'pointerOut', UserBlockingEvent],
        [TOP_POINTER_OVER, 'pointerOver', UserBlockingEvent],
        [TOP_SCROLL, 'scroll', UserBlockingEvent],
        [TOP_TOGGLE, 'toggle', UserBlockingEvent],
        [TOP_TOUCH_MOVE, 'touchMove', UserBlockingEvent],
        [TOP_WHEEL, 'wheel', UserBlockingEvent],
        [TOP_ABORT, 'abort', ContinuousEvent],
        [TOP_ANIMATION_END, 'animationEnd', ContinuousEvent],
        [TOP_ANIMATION_ITERATION, 'animationIteration', ContinuousEvent],
        [TOP_ANIMATION_START, 'animationStart', ContinuousEvent],
        [TOP_CAN_PLAY, 'canPlay', ContinuousEvent],
        [TOP_CAN_PLAY_THROUGH, 'canPlayThrough', ContinuousEvent],
        [TOP_DURATION_CHANGE, 'durationChange', ContinuousEvent],
        [TOP_EMPTIED, 'emptied', ContinuousEvent],
        [TOP_ENCRYPTED, 'encrypted', ContinuousEvent],
        [TOP_ENDED, 'ended', ContinuousEvent],
        [TOP_ERROR, 'error', ContinuousEvent],
        [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', ContinuousEvent],
        [TOP_LOAD, 'load', ContinuousEvent],
        [TOP_LOADED_DATA, 'loadedData', ContinuousEvent],
        [TOP_LOADED_METADATA, 'loadedMetadata', ContinuousEvent],
        [TOP_LOAD_START, 'loadStart', ContinuousEvent],
        [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', ContinuousEvent],
        [TOP_PLAYING, 'playing', ContinuousEvent],
        [TOP_PROGRESS, 'progress', ContinuousEvent],
        [TOP_SEEKING, 'seeking', ContinuousEvent],
        [TOP_STALLED, 'stalled', ContinuousEvent],
        [TOP_SUSPEND, 'suspend', ContinuousEvent],
        [TOP_TIME_UPDATE, 'timeUpdate', ContinuousEvent],
        [TOP_TRANSITION_END, 'transitionEnd', ContinuousEvent],
        [TOP_WAITING, 'waiting', ContinuousEvent],
      ];
      var eventTypes = {};
      var topLevelEventsToDispatchConfig = {};
      for (var i = 0; i < eventTuples.length; i++) {
        var eventTuple = eventTuples[i];
        var topEvent = eventTuple[0];
        var event = eventTuple[1];
        var eventPriority = eventTuple[2];
        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
        var onEvent = 'on' + capitalizedEvent;
        var config = {
          phasedRegistrationNames: {
            bubbled: onEvent,
            captured: onEvent + 'Capture',
          },
          dependencies: [topEvent],
          eventPriority: eventPriority,
        };
        eventTypes[event] = config;
        topLevelEventsToDispatchConfig[topEvent] = config;
      }
      var knownHTMLTopLevelTypes = [
        TOP_ABORT,
        TOP_CANCEL,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_CLOSE,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_INPUT,
        TOP_INVALID,
        TOP_LOAD,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_RESET,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUBMIT,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_TOGGLE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING,
      ];
      var SimpleEventPlugin = {
        eventTypes: eventTypes,
        getEventPriority: function (topLevelType) {
          var config = topLevelEventsToDispatchConfig[topLevelType];
          return config !== undefined ? config.eventPriority : ContinuousEvent;
        },
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
          if (!dispatchConfig) {
            return null;
          }
          var EventConstructor;
          switch (topLevelType) {
            case TOP_KEY_PRESS:
              if (getEventCharCode(nativeEvent) === 0) {
                return null;
              }
            case TOP_KEY_DOWN:
            case TOP_KEY_UP:
              EventConstructor = SyntheticKeyboardEvent;
              break;
            case TOP_BLUR:
            case TOP_FOCUS:
              EventConstructor = SyntheticFocusEvent;
              break;
            case TOP_CLICK:
              if (nativeEvent.button === 2) {
                return null;
              }
            case TOP_AUX_CLICK:
            case TOP_DOUBLE_CLICK:
            case TOP_MOUSE_DOWN:
            case TOP_MOUSE_MOVE:
            case TOP_MOUSE_UP:
            case TOP_MOUSE_OUT:
            case TOP_MOUSE_OVER:
            case TOP_CONTEXT_MENU:
              EventConstructor = SyntheticMouseEvent;
              break;
            case TOP_DRAG:
            case TOP_DRAG_END:
            case TOP_DRAG_ENTER:
            case TOP_DRAG_EXIT:
            case TOP_DRAG_LEAVE:
            case TOP_DRAG_OVER:
            case TOP_DRAG_START:
            case TOP_DROP:
              EventConstructor = SyntheticDragEvent;
              break;
            case TOP_TOUCH_CANCEL:
            case TOP_TOUCH_END:
            case TOP_TOUCH_MOVE:
            case TOP_TOUCH_START:
              EventConstructor = SyntheticTouchEvent;
              break;
            case TOP_ANIMATION_END:
            case TOP_ANIMATION_ITERATION:
            case TOP_ANIMATION_START:
              EventConstructor = SyntheticAnimationEvent;
              break;
            case TOP_TRANSITION_END:
              EventConstructor = SyntheticTransitionEvent;
              break;
            case TOP_SCROLL:
              EventConstructor = SyntheticUIEvent;
              break;
            case TOP_WHEEL:
              EventConstructor = SyntheticWheelEvent;
              break;
            case TOP_COPY:
            case TOP_CUT:
            case TOP_PASTE:
              EventConstructor = SyntheticClipboardEvent;
              break;
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE:
            case TOP_POINTER_CANCEL:
            case TOP_POINTER_DOWN:
            case TOP_POINTER_MOVE:
            case TOP_POINTER_OUT:
            case TOP_POINTER_OVER:
            case TOP_POINTER_UP:
              EventConstructor = SyntheticPointerEvent;
              break;
            default:
              {
                if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                  warningWithoutStack$1(
                    false,
                    'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' +
                      'is likely caused by a bug in React. Please file an issue.',
                    topLevelType,
                  );
                }
              }
              EventConstructor = SyntheticEvent;
              break;
          }
          var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          accumulateTwoPhaseDispatches(event);
          return event;
        },
      };
      var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
      var runWithPriority$1 = Scheduler.unstable_runWithPriority;
      var getEventPriority = SimpleEventPlugin.getEventPriority;
      var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
      var callbackBookkeepingPool = [];
      function findRootContainerNode(inst) {
        if (inst.tag === HostRoot) {
          return inst.stateNode.containerInfo;
        }
        while (inst.return) {
          inst = inst.return;
        }
        if (inst.tag !== HostRoot) {
          return null;
        }
        return inst.stateNode.containerInfo;
      }
      function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
        if (callbackBookkeepingPool.length) {
          var instance = callbackBookkeepingPool.pop();
          instance.topLevelType = topLevelType;
          instance.eventSystemFlags = eventSystemFlags;
          instance.nativeEvent = nativeEvent;
          instance.targetInst = targetInst;
          return instance;
        }
        return {
          topLevelType: topLevelType,
          eventSystemFlags: eventSystemFlags,
          nativeEvent: nativeEvent,
          targetInst: targetInst,
          ancestors: [],
        };
      }
      function releaseTopLevelCallbackBookKeeping(instance) {
        instance.topLevelType = null;
        instance.nativeEvent = null;
        instance.targetInst = null;
        instance.ancestors.length = 0;
        if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
          callbackBookkeepingPool.push(instance);
        }
      }
      function handleTopLevel(bookKeeping) {
        var targetInst = bookKeeping.targetInst;
        var ancestor = targetInst;
        do {
          if (!ancestor) {
            var ancestors = bookKeeping.ancestors;
            ancestors.push(ancestor);
            break;
          }
          var root = findRootContainerNode(ancestor);
          if (!root) {
            break;
          }
          var tag = ancestor.tag;
          if (tag === HostComponent || tag === HostText) {
            bookKeeping.ancestors.push(ancestor);
          }
          ancestor = getClosestInstanceFromNode(root);
        } while (ancestor);
        for (var i = 0; i < bookKeeping.ancestors.length; i++) {
          targetInst = bookKeeping.ancestors[i];
          var eventTarget = getEventTarget(bookKeeping.nativeEvent);
          var topLevelType = bookKeeping.topLevelType;
          var nativeEvent = bookKeeping.nativeEvent;
          runExtractedPluginEventsInBatch(
            topLevelType,
            targetInst,
            nativeEvent,
            eventTarget,
            bookKeeping.eventSystemFlags,
          );
        }
      }
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function trapBubbledEvent(topLevelType, element) {
        trapEventForPluginEventSystem(element, topLevelType, false);
      }
      function trapCapturedEvent(topLevelType, element) {
        trapEventForPluginEventSystem(element, topLevelType, true);
      }
      function trapEventForPluginEventSystem(element, topLevelType, capture) {
        var listener;
        switch (getEventPriority(topLevelType)) {
          case DiscreteEvent:
            listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
            break;
          case UserBlockingEvent:
            listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
            break;
          case ContinuousEvent:
          default:
            listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
            break;
        }
        var rawEventName = getRawEventName(topLevelType);
        if (capture) {
          addEventCaptureListener(element, rawEventName, listener);
        } else {
          addEventBubbleListener(element, rawEventName, listener);
        }
      }
      function dispatchDiscreteEvent(topLevelType, eventSystemFlags, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);
      }
      function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, nativeEvent) {
        {
          dispatchEvent(topLevelType, eventSystemFlags, nativeEvent);
        }
      }
      function dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
        try {
          batchedEventUpdates(handleTopLevel, bookKeeping);
        } finally {
          releaseTopLevelCallbackBookKeeping(bookKeeping);
        }
      }
      function dispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
        if (!_enabled) {
          return;
        }
        if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
          queueDiscreteEvent(null, topLevelType, eventSystemFlags, nativeEvent);
          return;
        }
        var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent);
        if (blockedOn === null) {
          clearIfContinuousEvent(topLevelType, nativeEvent);
          return;
        }
        if (isReplayableDiscreteEvent(topLevelType)) {
          queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent)) {
          return;
        }
        clearIfContinuousEvent(topLevelType, nativeEvent);
        {
          dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
        }
      }
      function attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root = nearestMounted.stateNode;
              if (root.hydrate) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        {
          dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
        }
        return null;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement('div');
          element.setAttribute(eventName, 'return;');
          isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
      }
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      var elementListeningSets = new PossiblyWeakMap();
      function getListeningSetForElement(element) {
        var listeningSet = elementListeningSets.get(element);
        if (listeningSet === undefined) {
          listeningSet = new Set();
          elementListeningSets.set(element, listeningSet);
        }
        return listeningSet;
      }
      function listenTo(registrationName, mountAt) {
        var listeningSet = getListeningSetForElement(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for (var i = 0; i < dependencies.length; i++) {
          var dependency = dependencies[i];
          listenToTopLevel(dependency, mountAt, listeningSet);
        }
      }
      function listenToTopLevel(topLevelType, mountAt, listeningSet) {
        if (!listeningSet.has(topLevelType)) {
          switch (topLevelType) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;
            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt);
              listeningSet.add(TOP_BLUR);
              listeningSet.add(TOP_FOCUS);
              break;
            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(topLevelType))) {
                trapCapturedEvent(topLevelType, mountAt);
              }
              break;
            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              break;
            default:
              var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
              if (!isMediaEvent) {
                trapBubbledEvent(topLevelType, mountAt);
              }
              break;
          }
          listeningSet.add(topLevelType);
        }
      }
      function isListeningToAllDependencies(registrationName, mountAt) {
        var listeningSet = getListeningSetForElement(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for (var i = 0; i < dependencies.length; i++) {
          var dependency = dependencies[i];
          if (!listeningSet.has(dependency)) {
            return false;
          }
        }
        return true;
      }
      var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
      };
      function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
      Object.keys(isUnitlessNumber).forEach(function (prop) {
        prefixes.forEach(function (prefix) {
          isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) {
          return '';
        }
        if (
          !isCustomProperty &&
          typeof value === 'number' &&
          value !== 0 &&
          !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
        ) {
          return value + 'px';
        }
        return ('' + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
      }
      var warnValidStyle = function () {};
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function (string) {
          return string.replace(hyphenPattern, function (_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          warning$1(
            false,
            'Unsupported style property %s. Did you mean %s?',
            name,
            camelize(name.replace(msPattern$1, 'ms-')),
          );
        };
        var warnBadVendoredStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          warning$1(
            false,
            'Unsupported vendor-prefixed style property %s. Did you mean %s?',
            name,
            name.charAt(0).toUpperCase() + name.slice(1),
          );
        };
        var warnStyleValueWithSemicolon = function (name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          warning$1(
            false,
            "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.',
            name,
            value.replace(badStyleValueWithSemicolonPattern, ''),
          );
        };
        var warnStyleValueIsNaN = function (name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
        };
        var warnStyleValueIsInfinity = function (name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
        };
        warnValidStyle = function (name, value) {
          if (name.indexOf('-') > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === 'number') {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = '';
          var delimiter = '';
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf('--') === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ';';
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf('--') === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === 'float') {
            styleName = 'cssFloat';
          }
          if (isCustomProperty) {
            style.setProperty(styleName, styleValue);
          } else {
            style[styleName] = styleValue;
          }
        }
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          return;
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true,
      };
      var voidElementTags = _assign(
        {
          menuitem: true,
        },
        omittedCloseTags,
      );
      var HTML$1 = '__html';
      var ReactDebugCurrentFrame$3 = null;
      {
        ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
      }
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          (function () {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw ReactError(
                  Error(
                    tag +
                      ' is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.' +
                      ReactDebugCurrentFrame$3.getStackAddendum(),
                  ),
                );
              }
            }
          })();
        }
        if (props.dangerouslySetInnerHTML != null) {
          (function () {
            if (!(props.children == null)) {
              {
                throw ReactError(Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.'));
              }
            }
          })();
          (function () {
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML)) {
              {
                throw ReactError(
                  Error(
                    '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.',
                  ),
                );
              }
            }
          })();
        }
        {
          !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null)
            ? warning$1(
                false,
                'A component is `contentEditable` and contains `children` managed by ' +
                  'React. It is now your responsibility to guarantee that none of ' +
                  'those nodes are unexpectedly modified or duplicated. This is ' +
                  'probably not intentional.',
              )
            : void 0;
        }
        (function () {
          if (!(props.style == null || typeof props.style === 'object')) {
            {
              throw ReactError(
                Error(
                  "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." +
                    ReactDebugCurrentFrame$3.getStackAddendum(),
                ),
              );
            }
          }
        })();
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) {
          return typeof props.is === 'string';
        }
        switch (tagName) {
          case 'annotation-xml':
          case 'color-profile':
          case 'font-face':
          case 'font-face-src':
          case 'font-face-uri':
          case 'font-face-format':
          case 'font-face-name':
          case 'missing-glyph':
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan',
      };
      var ariaProperties = {
        'aria-current': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        'aria-hidden': 0,
        'aria-invalid': 0,
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0,
      };
      var warnedProperties = {};
      var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
      var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
      function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = 'aria-' + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null) {
            warning$1(
              false,
              'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',
              name,
            );
            warnedProperties[name] = true;
            return true;
          }
          if (name !== correctName) {
            warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          if (name !== standardName) {
            warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps
          .map(function (prop) {
            return '`' + prop + '`';
          })
          .join(', ');
        if (invalidProps.length === 1) {
          warning$1(
            false,
            'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop',
            unknownPropString,
            type,
          );
        } else if (invalidProps.length > 1) {
          warning$1(
            false,
            'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop',
            unknownPropString,
            type,
          );
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === 'select' && props.multiple) {
            warning$1(
              false,
              '`value` prop on `%s` should not be null. ' +
                'Consider using an empty array when `multiple` is set to `true` ' +
                'to clear the component or `undefined` for uncontrolled components.',
              type,
            );
          } else {
            warning$1(
              false,
              '`value` prop on `%s` should not be null. ' +
                'Consider using an empty string to clear the component or `undefined` ' +
                'for uncontrolled components.',
              type,
            );
          }
        }
      }
      var validateProperty$1 = function () {};
      {
        var warnedProperties$1 = {};
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
        var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
        validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
          if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            warning$1(
              false,
              'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
                'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
                'are not needed/supported by React.',
            );
            warnedProperties$1[name] = true;
            return true;
          }
          if (canUseEventSystem) {
            if (registrationNameModules.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName)
              ? possibleRegistrationNames[lowerCasedName]
              : null;
            if (registrationName != null) {
              warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              warning$1(
                false,
                'Invalid event handler property `%s`. ' +
                  'React events use the camelCase naming convention, for example `onClick`.',
                name,
              );
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === 'innerhtml') {
            warning$1(
              false,
              'Directly setting property `innerHTML` is not permitted. ' +
                'For more information, lookup documentation on `dangerouslySetInnerHTML`.',
            );
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === 'aria') {
            warning$1(
              false,
              'The `aria` attribute is reserved for future use in React. ' +
                'Pass individual `aria-` attributes instead.',
            );
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            warning$1(
              false,
              'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.',
              typeof value,
            );
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === 'number' && isNaN(value)) {
            warning$1(
              false,
              'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.',
              name,
            );
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            warning$1(
              false,
              'React does not recognize the `%s` prop on a DOM element. If you ' +
                'intentionally want it to appear in the DOM as a custom ' +
                'attribute, spell it as lowercase `%s` instead. ' +
                'If you accidentally passed it from a parent component, remove ' +
                'it from the DOM element.',
              name,
              lowerCasedName,
            );
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              warning$1(
                false,
                'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                  'If you want to write it to the DOM, pass a string instead: ' +
                  '%s="%s" or %s={value.toString()}.',
                value,
                name,
                name,
                value,
                name,
              );
            } else {
              warning$1(
                false,
                'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                  'If you want to write it to the DOM, pass a string instead: ' +
                  '%s="%s" or %s={value.toString()}.\n\n' +
                  'If you used to conditionally omit it with %s={condition && value}, ' +
                  'pass %s={condition ? value : undefined} instead.',
                value,
                name,
                name,
                value,
                name,
                name,
                name,
              );
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            warning$1(
              false,
              'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?',
              value,
              name,
              value === 'false'
                ? 'The browser will interpret it as a truthy value.'
                : 'Although this works, it will not work as expected if you pass the string "false".',
              name,
              value,
            );
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function (type, props, canUseEventSystem) {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps
          .map(function (prop) {
            return '`' + prop + '`';
          })
          .join(', ');
        if (unknownProps.length === 1) {
          warning$1(
            false,
            'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +
              'or pass a string or number value to keep it in the DOM. ' +
              'For details, see https://fb.me/react-attribute-behavior',
            unknownPropString,
            type,
          );
        } else if (unknownProps.length > 1) {
          warning$1(
            false,
            'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +
              'or pass a string or number value to keep them in the DOM. ' +
              'For details, see https://fb.me/react-attribute-behavior',
            unknownPropString,
            type,
          );
        }
      };
      function validateProperties$2(type, props, canUseEventSystem) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, canUseEventSystem);
      }
      var didWarnInvalidHydration = false;
      var didWarnShadyDOM = false;
      var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
      var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
      var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
      var AUTOFOCUS = 'autoFocus';
      var CHILDREN = 'children';
      var STYLE$1 = 'style';
      var HTML = '__html';
      var HTML_NAMESPACE = Namespaces.html;
      var warnedUnknownTags;
      var suppressHydrationWarning;
      var validatePropertiesInDevelopment;
      var warnForTextDifference;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeMarkupForTextOrAttribute;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          time: true,
          dialog: true,
          webview: true,
        };
        validatePropertiesInDevelopment = function (type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, true);
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        normalizeMarkupForTextOrAttribute = function (markup) {
          var markupString = typeof markup === 'string' ? markup : '' + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
        };
        warnForTextDifference = function (serverText, clientText) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Text content did not match. Server: "%s" Client: "%s"',
            normalizedServerText,
            normalizedClientText,
          );
        };
        warnForPropDifference = function (propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Prop `%s` did not match. Server: %s Client: %s',
            propName,
            JSON.stringify(normalizedServerValue),
            JSON.stringify(normalizedClientValue),
          );
        };
        warnForExtraAttributes = function (attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function (name) {
            names.push(name);
          });
          warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
        };
        warnForInvalidEventListener = function (registrationName, listener) {
          if (listener === false) {
            warning$1(
              false,
              'Expected `%s` listener to be a function, instead got `false`.\n\n' +
                'If you used to conditionally omit it with %s={condition && value}, ' +
                'pass %s={condition ? value : undefined} instead.',
              registrationName,
              registrationName,
              registrationName,
            );
          } else {
            warning$1(
              false,
              'Expected `%s` listener to be a function, instead got a value of `%s` type.',
              registrationName,
              typeof listener,
            );
          }
        };
        normalizeHTML = function (parent, html) {
          var testElement =
            parent.namespaceURI === HTML_NAMESPACE
              ? parent.ownerDocument.createElement(parent.tagName)
              : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      function ensureListeningTo(rootContainerElement, registrationName) {
        var isDocumentOrFragment =
          rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
        var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
        listenTo(registrationName, doc);
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE
          ? rootContainerElement
          : rootContainerElement.ownerDocument;
      }
      function noop() {}
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE$1) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === 'string') {
              var canSetTextContent = tag !== 'textarea' || nextProp !== '';
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === 'number') {
              setTextContent(domElement, '' + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1);
          else if (propKey === AUTOFOCUS);
          else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp);
              }
              ensureListeningTo(rootContainerElement, propKey);
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0; i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i];
          var propValue = updatePayload[i + 1];
          if (propKey === STYLE$1) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            !(isCustomComponentTag || type === type.toLowerCase())
              ? warning$1(
                  false,
                  '<%s /> is using incorrect casing. ' +
                    'Use PascalCase for React components, ' +
                    'or lowercase for HTML elements.',
                  type,
                )
              : void 0;
          }
          if (type === 'script') {
            var div = ownerDocument.createElement('div');
            div.innerHTML = '<script><' + '/script>';
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === 'string') {
            domElement = ownerDocument.createElement(type, {
              is: props.is,
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === 'select') {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (
              !isCustomComponentTag &&
              Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' &&
              !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
            ) {
              warnedUnknownTags[type] = true;
              warning$1(
                false,
                'The tag <%s> is unrecognized in this browser. ' +
                  'If you meant to render a React component, start its name with ' +
                  'an uppercase letter.',
                type,
              );
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
          if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$1(
              false,
              '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
            );
            didWarnShadyDOM = true;
          }
        }
        var props;
        switch (tag) {
          case 'iframe':
          case 'object':
          case 'embed':
            trapBubbledEvent(TOP_LOAD, domElement);
            props = rawProps;
            break;
          case 'video':
          case 'audio':
            for (var i = 0; i < mediaEventTypes.length; i++) {
              trapBubbledEvent(mediaEventTypes[i], domElement);
            }
            props = rawProps;
            break;
          case 'source':
            trapBubbledEvent(TOP_ERROR, domElement);
            props = rawProps;
            break;
          case 'img':
          case 'image':
          case 'link':
            trapBubbledEvent(TOP_ERROR, domElement);
            trapBubbledEvent(TOP_LOAD, domElement);
            props = rawProps;
            break;
          case 'form':
            trapBubbledEvent(TOP_RESET, domElement);
            trapBubbledEvent(TOP_SUBMIT, domElement);
            props = rawProps;
            break;
          case 'details':
            trapBubbledEvent(TOP_TOGGLE, domElement);
            props = rawProps;
            break;
          case 'input':
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'option':
            validateProps(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            break;
          case 'select':
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'textarea':
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$3(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case 'input':
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case 'textarea':
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case 'option':
            postMountWrapper$1(domElement, rawProps);
            break;
          case 'select':
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === 'function') {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case 'input':
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'option':
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'select':
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'textarea':
            lastProps = getHostProps$3(domElement, lastRawProps);
            nextProps = getHostProps$3(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE$1) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = '';
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN);
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1);
          else if (propKey === AUTOFOCUS);
          else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || (nextProp == null && lastProp == null)) {
            continue;
          }
          if (propKey === STYLE$1) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = '';
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var lastHtml = lastProp ? lastProp[HTML] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, toStringOrTrustedType(nextHtml));
              }
            }
          } else if (propKey === CHILDREN) {
            if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1);
          else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp);
              }
              ensureListeningTo(rootContainerElement, propKey);
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
          }
          (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case 'input':
            updateWrapper(domElement, nextRawProps);
            break;
          case 'textarea':
            updateWrapper$1(domElement, nextRawProps);
            break;
          case 'select':
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
          if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$1(
              false,
              '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
            );
            didWarnShadyDOM = true;
          }
        }
        switch (tag) {
          case 'iframe':
          case 'object':
          case 'embed':
            trapBubbledEvent(TOP_LOAD, domElement);
            break;
          case 'video':
          case 'audio':
            for (var i = 0; i < mediaEventTypes.length; i++) {
              trapBubbledEvent(mediaEventTypes[i], domElement);
            }
            break;
          case 'source':
            trapBubbledEvent(TOP_ERROR, domElement);
            break;
          case 'img':
          case 'image':
          case 'link':
            trapBubbledEvent(TOP_ERROR, domElement);
            trapBubbledEvent(TOP_LOAD, domElement);
            break;
          case 'form':
            trapBubbledEvent(TOP_RESET, domElement);
            trapBubbledEvent(TOP_SUBMIT, domElement);
            break;
          case 'details':
            trapBubbledEvent(TOP_TOGGLE, domElement);
            break;
          case 'input':
            initWrapperState(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'option':
            validateProps(domElement, rawProps);
            break;
          case 'select':
            initWrapperState$1(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'textarea':
            initWrapperState$2(domElement, rawProps);
            trapBubbledEvent(TOP_INVALID, domElement);
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set();
          var attributes = domElement.attributes;
          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case 'data-reactroot':
                break;
              case 'value':
                break;
              case 'checked':
                break;
              case 'selected':
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === 'string') {
              if (domElement.textContent !== nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === 'number') {
              if (domElement.textContent !== '' + nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, '' + nextProp];
              }
            }
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp);
              }
              ensureListeningTo(rootContainerElement, propKey);
            }
          } else if (typeof isCustomComponentTag === 'boolean') {
            var serverValue = void 0;
            var propertyInfo = getPropertyInfo(propKey);
            if (suppressHydrationWarning);
            else if (
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
              propKey === SUPPRESS_HYDRATION_WARNING$1 ||
              propKey === 'value' ||
              propKey === 'checked' ||
              propKey === 'selected'
            );
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML] : undefined;
              var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            } else if (propKey === STYLE$1) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute('style');
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (
              !shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) &&
              !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)
            ) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
        switch (tag) {
          case 'input':
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case 'textarea':
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case 'select':
          case 'option':
            break;
          default:
            if (typeof rawProps.onClick === 'function') {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForUnmatchedText(textNode, text) {
        {
          warnForTextDifference(textNode.nodeValue, text);
        }
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Did not expect server HTML to contain a <%s> in <%s>.',
            child.nodeName.toLowerCase(),
            parentNode.nodeName.toLowerCase(),
          );
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Did not expect server HTML to contain the text node "%s" in <%s>.',
            child.nodeValue,
            parentNode.nodeName.toLowerCase(),
          );
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Expected server HTML to contain a matching <%s> in <%s>.',
            tag,
            parentNode.nodeName.toLowerCase(),
          );
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === '') {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warningWithoutStack$1(
            false,
            'Expected server HTML to contain a matching text node for "%s" in <%s>.',
            text,
            parentNode.nodeName.toLowerCase(),
          );
        }
      }
      function restoreControlledState$$1(domElement, tag, props) {
        switch (tag) {
          case 'input':
            restoreControlledState$1(domElement, props);
            return;
          case 'textarea':
            restoreControlledState$3(domElement, props);
            return;
          case 'select':
            restoreControlledState$2(domElement, props);
            return;
        }
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node: node,
                offset: offset - nodeStart,
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = (ownerDocument && ownerDocument.defaultView) || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while (true) {
          var next = null;
          while (true) {
            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
              start = length + anchorOffset;
            }
            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
              end = length + focusOffset;
            }
            if (node.nodeType === TEXT_NODE) {
              length += node.nodeValue.length;
            }
            if ((next = node.firstChild) === null) {
              break;
            }
            parentNode = node;
            node = next;
          }
          while (true) {
            if (node === outerNode) {
              break outer;
            }
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
              start = length;
            }
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
              end = length;
            }
            if ((next = node.nextSibling) !== null) {
              break;
            }
            node = parentNode;
            parentNode = node.parentNode;
          }
          node = next;
        }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start: start,
          end: end,
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = (doc && doc.defaultView) || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (
            selection.rangeCount === 1 &&
            selection.anchorNode === startMarker.node &&
            selection.anchorOffset === startMarker.offset &&
            selection.focusNode === endMarker.node &&
            selection.focusOffset === endMarker.offset
          ) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ('contains' in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return (
          nodeName &&
          ((nodeName === 'input' &&
            (elem.type === 'text' ||
              elem.type === 'search' ||
              elem.type === 'tel' ||
              elem.type === 'url' ||
              elem.type === 'password')) ||
            nodeName === 'textarea' ||
            elem.contentEditable === 'true')
        );
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem: focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null,
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while ((ancestor = ancestor.parentNode)) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop,
              });
            }
          }
          if (typeof priorFocusedElem.focus === 'function') {
            priorFocusedElem.focus();
          }
          for (var i = 0; i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ('selectionStart' in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd,
          };
        } else {
          selection = getOffsets(input);
        }
        return (
          selection || {
            start: 0,
            end: 0,
          }
        );
      }
      function setSelection(input, offsets) {
        var start = offsets.start,
          end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ('selectionStart' in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var validateDOMNesting = function () {};
      var updatedAncestorInfo = function () {};
      {
        var specialTags = [
          'address',
          'applet',
          'area',
          'article',
          'aside',
          'base',
          'basefont',
          'bgsound',
          'blockquote',
          'body',
          'br',
          'button',
          'caption',
          'center',
          'col',
          'colgroup',
          'dd',
          'details',
          'dir',
          'div',
          'dl',
          'dt',
          'embed',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'frame',
          'frameset',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'head',
          'header',
          'hgroup',
          'hr',
          'html',
          'iframe',
          'img',
          'input',
          'isindex',
          'li',
          'link',
          'listing',
          'main',
          'marquee',
          'menu',
          'menuitem',
          'meta',
          'nav',
          'noembed',
          'noframes',
          'noscript',
          'object',
          'ol',
          'p',
          'param',
          'plaintext',
          'pre',
          'script',
          'section',
          'select',
          'source',
          'style',
          'summary',
          'table',
          'tbody',
          'td',
          'template',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'title',
          'tr',
          'track',
          'ul',
          'wbr',
          'xmp',
        ];
        var inScopeTags = [
          'applet',
          'caption',
          'html',
          'table',
          'td',
          'th',
          'marquee',
          'object',
          'template',
          'foreignObject',
          'desc',
          'title',
        ];
        var buttonScopeTags = inScopeTags.concat(['button']);
        var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
        };
        updatedAncestorInfo = function (oldInfo, tag) {
          var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag: tag,
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === 'form') {
            ancestorInfo.formTag = info;
          }
          if (tag === 'a') {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === 'button') {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === 'nobr') {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === 'p') {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === 'li') {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === 'dd' || tag === 'dt') {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function (tag, parentTag) {
          switch (parentTag) {
            case 'select':
              return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
              return tag === 'option' || tag === '#text';
            case 'option':
              return tag === '#text';
            case 'tr':
              return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'tbody':
            case 'thead':
            case 'tfoot':
              return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'colgroup':
              return tag === 'col' || tag === 'template';
            case 'table':
              return (
                tag === 'caption' ||
                tag === 'colgroup' ||
                tag === 'tbody' ||
                tag === 'tfoot' ||
                tag === 'thead' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              );
            case 'head':
              return (
                tag === 'base' ||
                tag === 'basefont' ||
                tag === 'bgsound' ||
                tag === 'link' ||
                tag === 'meta' ||
                tag === 'title' ||
                tag === 'noscript' ||
                tag === 'noframes' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              );
            case 'html':
              return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
              return tag === 'frame';
            case '#document':
              return tag === 'html';
          }
          switch (tag) {
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
              return (
                parentTag !== 'h1' &&
                parentTag !== 'h2' &&
                parentTag !== 'h3' &&
                parentTag !== 'h4' &&
                parentTag !== 'h5' &&
                parentTag !== 'h6'
              );
            case 'rp':
            case 'rt':
              return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function (tag, ancestorInfo) {
          switch (tag) {
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
              return ancestorInfo.pTagInButtonScope;
            case 'form':
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
              return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
              return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
              return ancestorInfo.buttonTagInScope;
            case 'a':
              return ancestorInfo.aTagInScope;
            case 'nobr':
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function (childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            !(childTag == null)
              ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null')
              : void 0;
            childTag = '#text';
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var addendum = getCurrentFiberStackInDev();
          var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = '';
          if (childTag === '#text') {
            if (/\S/.test(childText)) {
              tagDisplayName = 'Text nodes';
            } else {
              tagDisplayName = 'Whitespace text nodes';
              whitespaceInfo =
                " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
            }
          } else {
            tagDisplayName = '<' + childTag + '>';
          }
          if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') {
              info +=
                ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
            }
            warningWithoutStack$1(
              false,
              'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',
              tagDisplayName,
              ancestorTag,
              whitespaceInfo,
              info,
              addendum,
            );
          } else {
            warningWithoutStack$1(
              false,
              'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s',
              tagDisplayName,
              ancestorTag,
              addendum,
            );
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING;
      {
        SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
      }
      var SUSPENSE_START_DATA = '$';
      var SUSPENSE_END_DATA = '/$';
      var SUSPENSE_PENDING_START_DATA = '$?';
      var SUSPENSE_FALLBACK_START_DATA = '$!';
      var STYLE = 'style';
      var eventsEnabled = null;
      var selectionInformation = null;
      function shouldAutoFocusHostComponent(type, props) {
        switch (type) {
          case 'button':
          case 'input':
          case 'select':
          case 'textarea':
            return !!props.autoFocus;
        }
        return false;
      }
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace: namespace,
            ancestorInfo: ancestorInfo,
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace: namespace,
            ancestorInfo: ancestorInfo,
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        setEnabled(false);
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        selectionInformation = null;
        setEnabled(eventsEnabled);
        eventsEnabled = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (
            typeof newProps.children !== typeof oldProps.children &&
            (typeof newProps.children === 'string' || typeof newProps.children === 'number')
          ) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
      }
      function shouldSetTextContent(type, props) {
        return (
          type === 'textarea' ||
          type === 'option' ||
          type === 'noscript' ||
          typeof props.children === 'string' ||
          typeof props.children === 'number' ||
          (typeof props.dangerouslySetInnerHTML === 'object' &&
            props.dangerouslySetInnerHTML !== null &&
            props.dangerouslySetInnerHTML.__html != null)
        );
      }
      function shouldDeprioritizeSubtree(type, props) {
        return !!props.hidden;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
      var noTimeout = -1;
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        if (shouldAutoFocusHostComponent(type, newProps)) {
          domElement.focus();
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateFiberProps(domElement, newProps);
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, '');
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function hideInstance(instance) {
        instance = instance;
        var style = instance.style;
        if (typeof style.setProperty === 'function') {
          style.setProperty('display', 'none', 'important');
        } else {
          style.display = 'none';
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE];
        var display =
          styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display')
            ? styleProp.display
            : null;
        instance.style.display = dangerousStyleValue('display', display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (
              data === SUSPENSE_START_DATA ||
              data === SUSPENSE_FALLBACK_START_DATA ||
              data === SUSPENSE_PENDING_START_DATA
            ) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (
              data === SUSPENSE_START_DATA ||
              data === SUSPENSE_FALLBACK_START_DATA ||
              data === SUSPENSE_PENDING_START_DATA
            ) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        {
          warnForUnmatchedText(textInstance, text);
        }
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
          warnForUnmatchedText(textInstance, text);
        }
      }
      function didNotHydrateContainerInstance(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE);
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance);
          } else if (instance.nodeType === COMMENT_NODE);
          else {
            warnForDeletedHydratableText(parentInstance, instance);
          }
        }
      }
      function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
      function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = '__reactInternalInstance$' + randomKey;
      var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
      var internalContainerInstanceKey = '__reactContainere$' + randomKey;
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || (alternate !== null && alternate.child !== null)) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode$1(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (
            inst.tag === HostComponent ||
            inst.tag === HostText ||
            inst.tag === SuspenseComponent ||
            inst.tag === HostRoot
          ) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance$1(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        (function () {
          {
            {
              throw ReactError(Error('getNodeFromInstance: Invalid argument.'));
            }
          }
        })();
      }
      function getFiberCurrentPropsFromNode$1(node) {
        return node[internalEventHandlersKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalEventHandlersKey] = props;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ('value' in root) {
          return root.value;
        }
        return root.textContent;
      }
      var SyntheticCompositionEvent = SyntheticEvent.extend({
        data: null,
      });
      var SyntheticInputEvent = SyntheticEvent.extend({
        data: null,
      });
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
      var documentMode = null;
      if (canUseDOM && 'documentMode' in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;
      var useFallbackCompositionData =
        canUseDOM && (!canUseCompositionEvent || (documentMode && documentMode > 8 && documentMode <= 11));
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      var eventTypes$1 = {
        beforeInput: {
          phasedRegistrationNames: {
            bubbled: 'onBeforeInput',
            captured: 'onBeforeInputCapture',
          },
          dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE],
        },
        compositionEnd: {
          phasedRegistrationNames: {
            bubbled: 'onCompositionEnd',
            captured: 'onCompositionEndCapture',
          },
          dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN],
        },
        compositionStart: {
          phasedRegistrationNames: {
            bubbled: 'onCompositionStart',
            captured: 'onCompositionStartCapture',
          },
          dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN],
        },
        compositionUpdate: {
          phasedRegistrationNames: {
            bubbled: 'onCompositionUpdate',
            captured: 'onCompositionUpdateCapture',
          },
          dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN],
        },
      };
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (
          (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
          !(nativeEvent.ctrlKey && nativeEvent.altKey)
        );
      }
      function getCompositionEventType(topLevelType) {
        switch (topLevelType) {
          case TOP_COMPOSITION_START:
            return eventTypes$1.compositionStart;
          case TOP_COMPOSITION_END:
            return eventTypes$1.compositionEnd;
          case TOP_COMPOSITION_UPDATE:
            return eventTypes$1.compositionUpdate;
        }
      }
      function isFallbackCompositionStart(topLevelType, nativeEvent) {
        return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(topLevelType, nativeEvent) {
        switch (topLevelType) {
          case TOP_KEY_UP:
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case TOP_KEY_DOWN:
            return nativeEvent.keyCode !== START_KEYCODE;
          case TOP_KEY_PRESS:
          case TOP_MOUSE_DOWN:
          case TOP_BLUR:
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
      }
      var isComposing = false;
      function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(topLevelType);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
            eventType = eventTypes$1.compositionStart;
          }
        } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          eventType = eventTypes$1.compositionEnd;
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === eventTypes$1.compositionStart) {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === eventTypes$1.compositionEnd) {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
        if (fallbackData) {
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
        accumulateTwoPhaseDispatches(event);
        return event;
      }
      function getNativeBeforeInputChars(topLevelType, nativeEvent) {
        switch (topLevelType) {
          case TOP_COMPOSITION_END:
            return getDataFromCustomEvent(nativeEvent);
          case TOP_KEY_PRESS:
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case TOP_TEXT_INPUT:
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
        if (isComposing) {
          if (
            topLevelType === TOP_COMPOSITION_END ||
            (!canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent))
          ) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (topLevelType) {
          case TOP_PASTE:
            return null;
          case TOP_KEY_PRESS:
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case TOP_COMPOSITION_END:
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var event = SyntheticInputEvent.getPooled(eventTypes$1.beforeInput, targetInst, nativeEvent, nativeEventTarget);
        event.data = chars;
        accumulateTwoPhaseDispatches(event);
        return event;
      }
      var BeforeInputEventPlugin = {
        eventTypes: eventTypes$1,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
          var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
          if (composition === null) {
            return beforeInput;
          }
          if (beforeInput === null) {
            return composition;
          }
          return [composition, beforeInput];
        },
      };
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true,
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === 'textarea') {
          return true;
        }
        return false;
      }
      var eventTypes$2 = {
        change: {
          phasedRegistrationNames: {
            bubbled: 'onChange',
            captured: 'onChangeCapture',
          },
          dependencies: [
            TOP_BLUR,
            TOP_CHANGE,
            TOP_CLICK,
            TOP_FOCUS,
            TOP_INPUT,
            TOP_KEY_DOWN,
            TOP_KEY_UP,
            TOP_SELECTION_CHANGE,
          ],
        },
      };
      function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
        var event = SyntheticEvent.getPooled(eventTypes$2.change, inst, nativeEvent, target);
        event.type = 'change';
        enqueueStateRestore(target);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || (nodeName === 'input' && elem.type === 'file');
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, event);
      }
      function runEventInBatch(event) {
        runEventsInBatch(event);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance$1(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CHANGE) {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
        if (topLevelType === TOP_FOCUS) {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (topLevelType === TOP_BLUR) {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
        if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
      }
      function getTargetInstForClickEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CLICK) {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') {
          return;
        }
        {
          setDefaultValue(node, 'number', node.value);
        }
      }
      var ChangeEventPlugin = {
        eventTypes: eventTypes$2,
        _isInputEventSupported: isInputEventSupported,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(topLevelType, targetInst);
            if (inst) {
              var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
              return event;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(topLevelType, targetNode, targetInst);
          }
          if (topLevelType === TOP_BLUR) {
            handleControlledInputBlur(targetNode);
          }
        },
      };
      var DOMEventPluginOrder = [
        'ResponderEventPlugin',
        'SimpleEventPlugin',
        'EnterLeaveEventPlugin',
        'ChangeEventPlugin',
        'SelectEventPlugin',
        'BeforeInputEventPlugin',
      ];
      var eventTypes$3 = {
        mouseEnter: {
          registrationName: 'onMouseEnter',
          dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER],
        },
        mouseLeave: {
          registrationName: 'onMouseLeave',
          dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER],
        },
        pointerEnter: {
          registrationName: 'onPointerEnter',
          dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER],
        },
        pointerLeave: {
          registrationName: 'onPointerLeave',
          dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER],
        },
      };
      var EnterLeaveEventPlugin = {
        eventTypes: eventTypes$3,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
          var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
          if (
            isOverEvent &&
            (eventSystemFlags & IS_REPLAYED) === 0 &&
            (nativeEvent.relatedTarget || nativeEvent.fromElement)
          ) {
            return null;
          }
          if (!isOutEvent && !isOverEvent) {
            return null;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            from = targetInst;
            var related = nativeEvent.relatedTarget || nativeEvent.toElement;
            to = related ? getClosestInstanceFromNode(related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || (to.tag !== HostComponent && to.tag !== HostText)) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return null;
          }
          var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
          if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
            eventInterface = SyntheticMouseEvent;
            leaveEventType = eventTypes$3.mouseLeave;
            enterEventType = eventTypes$3.mouseEnter;
            eventTypePrefix = 'mouse';
          } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
            eventInterface = SyntheticPointerEvent;
            leaveEventType = eventTypes$3.pointerLeave;
            enterEventType = eventTypes$3.pointerEnter;
            eventTypePrefix = 'pointer';
          }
          var fromNode = from == null ? win : getNodeFromInstance$1(from);
          var toNode = to == null ? win : getNodeFromInstance$1(to);
          var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
          leave.type = eventTypePrefix + 'leave';
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
          enter.type = eventTypePrefix + 'enter';
          enter.target = toNode;
          enter.relatedTarget = fromNode;
          accumulateEnterLeaveDispatches(leave, enter, from, to);
          return [leave, enter];
        },
      };
      function is(x, y) {
        return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);
      }
      var is$1 = typeof Object.is === 'function' ? Object.is : is;
      var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
      function shallowEqual(objA, objB) {
        if (is$1(objA, objB)) {
          return true;
        }
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty$2.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }
        return true;
      }
      var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
      var eventTypes$4 = {
        select: {
          phasedRegistrationNames: {
            bubbled: 'onSelect',
            captured: 'onSelectCapture',
          },
          dependencies: [
            TOP_BLUR,
            TOP_CONTEXT_MENU,
            TOP_DRAG_END,
            TOP_FOCUS,
            TOP_KEY_DOWN,
            TOP_KEY_UP,
            TOP_MOUSE_DOWN,
            TOP_MOUSE_UP,
            TOP_SELECTION_CHANGE,
          ],
        },
      };
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd,
          };
        } else {
          var win = (node.ownerDocument && node.ownerDocument.defaultView) || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset,
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget
          ? eventTarget.document
          : eventTarget.nodeType === DOCUMENT_NODE
          ? eventTarget
          : eventTarget.ownerDocument;
      }
      function constructSelectEvent(nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return null;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var syntheticEvent = SyntheticEvent.getPooled(
            eventTypes$4.select,
            activeElementInst$1,
            nativeEvent,
            nativeEventTarget,
          );
          syntheticEvent.type = 'select';
          syntheticEvent.target = activeElement$1;
          accumulateTwoPhaseDispatches(syntheticEvent);
          return syntheticEvent;
        }
        return null;
      }
      var SelectEventPlugin = {
        eventTypes: eventTypes$4,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
            return null;
          }
          var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
          switch (topLevelType) {
            case TOP_FOCUS:
              if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case TOP_BLUR:
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case TOP_MOUSE_DOWN:
              mouseDown = true;
              break;
            case TOP_CONTEXT_MENU:
            case TOP_MOUSE_UP:
            case TOP_DRAG_END:
              mouseDown = false;
              return constructSelectEvent(nativeEvent, nativeEventTarget);
            case TOP_SELECTION_CHANGE:
              if (skipSelectionChangeEvent) {
                break;
              }
            case TOP_KEY_DOWN:
            case TOP_KEY_UP:
              return constructSelectEvent(nativeEvent, nativeEventTarget);
          }
          return null;
        },
      };
      injection.injectEventPluginOrder(DOMEventPluginOrder);
      setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
      injection.injectEventPluginsByName({
        SimpleEventPlugin: SimpleEventPlugin,
        EnterLeaveEventPlugin: EnterLeaveEventPlugin,
        ChangeEventPlugin: ChangeEventPlugin,
        SelectEventPlugin: SelectEventPlugin,
        BeforeInputEventPlugin: BeforeInputEventPlugin,
      });
      var reactEmoji = '\u269B';
      var warningEmoji = '\u26D4';
      var supportsUserTiming =
        typeof performance !== 'undefined' &&
        typeof performance.mark === 'function' &&
        typeof performance.clearMarks === 'function' &&
        typeof performance.measure === 'function' &&
        typeof performance.clearMeasures === 'function';
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var labelsInCurrentCommit = new Set();
      var formatMarkName = function (markName) {
        return reactEmoji + ' ' + markName;
      };
      var formatLabel = function (label, warning) {
        var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
        var suffix = warning ? ' Warning: ' + warning : '';
        return '' + prefix + label + suffix;
      };
      var beginMark = function (markName) {
        performance.mark(formatMarkName(markName));
      };
      var clearMark = function (markName) {
        performance.clearMarks(formatMarkName(markName));
      };
      var endMark = function (label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);
        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };
      var getFiberMarkName = function (label, debugID) {
        return label + ' (#' + debugID + ')';
      };
      var getFiberLabel = function (componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
        } else {
          return componentName + '.' + phase;
        }
      };
      var beginFiberMark = function (fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }
        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };
      var clearFiberMark = function (fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };
      var endFiberMark = function (fiber, phase, warning) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
      };
      var shouldIgnoreFiber = function (fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
          case Mode:
            return true;
          default:
            return false;
        }
      };
      var clearPendingPhaseMeasurement = function () {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };
      var pauseTimers = function () {
        var fiber = currentFiber;
        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }
          fiber = fiber.return;
        }
      };
      var resumeTimersRecursively = function (fiber) {
        if (fiber.return !== null) {
          resumeTimersRecursively(fiber.return);
        }
        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };
      var resumeTimers = function () {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };
      function recordEffect() {
        {
          effectCountInCurrentCommit++;
        }
      }
      function recordScheduleUpdate() {
        {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }
          if (
            currentPhase !== null &&
            currentPhase !== 'componentWillMount' &&
            currentPhase !== 'componentWillReceiveProps'
          ) {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }
      function startWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber;
          if (!beginFiberMark(fiber, null)) {
            return;
          }
          fiber._debugIsCurrentlyTiming = true;
        }
      }
      function cancelWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }
      function stopWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber.return;
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }
      function stopFailedWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          currentFiber = fiber.return;
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          var warning =
            fiber.tag === SuspenseComponent
              ? 'Rendering was suspended'
              : 'An error was thrown inside this error boundary';
          endFiberMark(fiber, null, warning);
        }
      }
      function startPhaseTimer(fiber, phase) {
        {
          if (!supportsUserTiming) {
            return;
          }
          clearPendingPhaseMeasurement();
          if (!beginFiberMark(fiber, phase)) {
            return;
          }
          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }
      function stopPhaseTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning);
          }
          currentPhase = null;
          currentPhaseFiber = null;
        }
      }
      function startWorkLoopTimer(nextUnitOfWork) {
        {
          currentFiber = nextUnitOfWork;
          if (!supportsUserTiming) {
            return;
          }
          commitCountInCurrentWorkLoop = 0;
          beginMark('(React Tree Reconciliation)');
          resumeTimers();
        }
      }
      function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        {
          if (!supportsUserTiming) {
            return;
          }
          var warning = null;
          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning = 'A top-level update interrupted the previous render';
            } else {
              var componentName = getComponentName(interruptedBy.type) || 'Unknown';
              warning = 'An update to ' + componentName + ' interrupted the previous render';
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning = 'There were cascading updates';
          }
          commitCountInCurrentWorkLoop = 0;
          var label = didCompleteRoot
            ? '(React Tree Reconciliation: Completed Root)'
            : '(React Tree Reconciliation: Yielded)';
          pauseTimers();
          endMark(label, '(React Tree Reconciliation)', warning);
        }
      }
      function startCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark('(Committing Changes)');
        }
      }
      function stopCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          var warning = null;
          if (hasScheduledUpdateInCurrentCommit) {
            warning = 'Lifecycle hook scheduled a cascading update';
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning = 'Caused by a cascading update in earlier commit';
          }
          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark('(Committing Changes)', '(Committing Changes)', warning);
        }
      }
      function startCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark('(Committing Snapshot Effects)');
        }
      }
      function stopCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
        }
      }
      function startCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark('(Committing Host Effects)');
        }
      }
      function stopCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
        }
      }
      function startCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark('(Calling Lifecycle Methods)');
        }
      }
      function stopCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue,
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warningWithoutStack$1(false, 'Unexpected pop.');
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            warningWithoutStack$1(false, 'Unexpected Fiber popped.');
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentName(type) || 'Unknown';
            checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
          }
          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          (function () {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw ReactError(
                  Error(
                    'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== 'function') {
            {
              var componentName = getComponentName(type) || 'Unknown';
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                warningWithoutStack$1(
                  false,
                  '%s.childContextTypes is specified but there is no getChildContext() method ' +
                    'on the instance. You can either define getChildContext() on %s or remove ' +
                    'childContextTypes from it.',
                  componentName,
                  componentName,
                );
              }
            }
            return parentContext;
          }
          var childContext;
          {
            setCurrentPhase('getChildContext');
          }
          startPhaseTimer(fiber, 'getChildContext');
          childContext = instance.getChildContext();
          stopPhaseTimer();
          {
            setCurrentPhase(null);
          }
          for (var contextKey in childContext) {
            (function () {
              if (!(contextKey in childContextTypes)) {
                {
                  throw ReactError(
                    Error(
                      (getComponentName(type) || 'Unknown') +
                        '.getChildContext(): key "' +
                        contextKey +
                        '" is not defined in childContextTypes.',
                    ),
                  );
                }
              }
            })();
          }
          {
            var name = getComponentName(type) || 'Unknown';
            checkPropTypes(childContextTypes, childContext, 'child context', name, getCurrentFiberStackInDev);
          }
          return _assign({}, parentContext, {}, childContext);
        }
      }
      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext =
            (instance && instance.__reactInternalMemoizedMergedChildContext) || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode;
          (function () {
            if (!instance) {
              {
                throw ReactError(
                  Error(
                    'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
          if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          (function () {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw ReactError(
                  Error(
                    'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
        }
      }
      var LegacyRoot = 0;
      var BatchedRoot = 1;
      var ConcurrentRoot = 2;
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
      var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
      var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
      var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
      var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
      var Scheduler_now = Scheduler.unstable_now;
      var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
      var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
      var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        (function () {
          if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
            {
              throw ReactError(
                Error(
                  'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling',
                ),
              );
            }
          }
        })();
      }
      var fakeCallbackNode = {};
      var ImmediatePriority = 99;
      var UserBlockingPriority$2 = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs = Scheduler_now();
      var now =
        initialTimeMs < 10000
          ? Scheduler_now
          : function () {
              return Scheduler_now() - initialTimeMs;
            };
      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority;
          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$2;
          case Scheduler_NormalPriority:
            return NormalPriority;
          case Scheduler_LowPriority:
            return LowPriority;
          case Scheduler_IdlePriority:
            return IdlePriority;
          default:
            (function () {
              {
                {
                  throw ReactError(Error('Unknown priority level.'));
                }
              }
            })();
        }
      }
      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority:
            return Scheduler_ImmediatePriority;
          case UserBlockingPriority$2:
            return Scheduler_UserBlockingPriority;
          case NormalPriority:
            return Scheduler_NormalPriority;
          case LowPriority:
            return Scheduler_LowPriority;
          case IdlePriority:
            return Scheduler_IdlePriority;
          default:
            (function () {
              {
                {
                  throw ReactError(Error('Unknown priority level.'));
                }
              }
            })();
        }
      }
      function runWithPriority$2(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }
      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(
            Scheduler_ImmediatePriority,
            flushSyncCallbackQueueImpl,
          );
        } else {
          syncQueue.push(callback);
        }
        return fakeCallbackNode;
      }
      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }
      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
      }
      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          try {
            var _isSync = true;
            var queue = syncQueue;
            runWithPriority$2(ImmediatePriority, function () {
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(_isSync);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }
      var NoMode = 0;
      var StrictMode = 1;
      var BatchedMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Never = 1;
      var Idle = 2;
      var Sync = MAX_SIGNED_31_BIT_INT;
      var Batched = Sync - 1;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = Batched - 1;
      function msToExpirationTime(ms) {
        return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);
      }
      function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
      }
      function ceiling(num, precision) {
        return (((num / precision) | 0) + 1) * precision;
      }
      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return (
          MAGIC_NUMBER_OFFSET -
          ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE)
        );
      }
      var LOW_PRIORITY_EXPIRATION = 5000;
      var LOW_PRIORITY_BATCH_SIZE = 250;
      function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
      }
      function computeSuspenseExpiration(currentTime, timeoutMs) {
        return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
      }
      var HIGH_PRIORITY_EXPIRATION = 500;
      var HIGH_PRIORITY_BATCH_SIZE = 100;
      function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
      }
      function inferPriorityFromExpirationTime(currentTime, expirationTime) {
        if (expirationTime === Sync) {
          return ImmediatePriority;
        }
        if (expirationTime === Never || expirationTime === Idle) {
          return IdlePriority;
        }
        var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
        if (msUntil <= 0) {
          return ImmediatePriority;
        }
        if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
          return UserBlockingPriority$2;
        }
        if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
          return NormalPriority;
        }
        return IdlePriority;
      }
      var lowPriorityWarningWithoutStack = function () {};
      {
        var printWarning = function (format) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var argIndex = 0;
          var message =
            'Warning: ' +
            format.replace(/%s/g, function () {
              return args[argIndex++];
            });
          if (typeof console !== 'undefined') {
            console.warn(message);
          }
          try {
            throw new Error(message);
          } catch (x) {}
        };
        lowPriorityWarningWithoutStack = function (condition, format) {
          if (format === undefined) {
            throw new Error(
              '`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument',
            );
          }
          if (!condition) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(void 0, [format].concat(args));
          }
        };
      }
      var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function (fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function () {},
        recordLegacyContextWarning: function (fiber, instance) {},
        flushLegacyContextWarning: function () {},
        discardPendingWarnings: function () {},
      };
      {
        var findStrictRoot = function (fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function (set) {
          var array = [];
          set.forEach(function (value) {
            array.push(value);
          });
          return array.sort().join(', ');
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (
            typeof instance.componentWillMount === 'function' &&
            instance.componentWillMount.__suppressDeprecationWarning !== true
          ) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (
            typeof instance.componentWillReceiveProps === 'function' &&
            instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
          ) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (
            typeof instance.componentWillUpdate === 'function' &&
            instance.componentWillUpdate.__suppressDeprecationWarning !== true
          ) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          var componentWillMountUniqueNames = new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            warningWithoutStack$1(
              false,
              'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                '\nPlease update the following components: %s',
              sortedNames,
            );
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            warningWithoutStack$1(
              false,
              'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
                'and may indicate bugs in your code. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move data fetching code or side effects to componentDidUpdate.\n' +
                "* If you're updating state whenever props change, " +
                'refactor your code to use memoization techniques or move it to ' +
                'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                '\nPlease update the following components: %s',
              _sortedNames,
            );
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            warningWithoutStack$1(
              false,
              'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +
                'and may indicate bugs in your code. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move data fetching code or side effects to componentDidUpdate.\n' +
                '\nPlease update the following components: %s',
              _sortedNames2,
            );
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            lowPriorityWarningWithoutStack$1(
              false,
              'componentWillMount has been renamed, and is not recommended for use. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +
                'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                'To rename all deprecated lifecycles to their new names, you can run ' +
                '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                '\nPlease update the following components: %s',
              _sortedNames3,
            );
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            lowPriorityWarningWithoutStack$1(
              false,
              'componentWillReceiveProps has been renamed, and is not recommended for use. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move data fetching code or side effects to componentDidUpdate.\n' +
                "* If you're updating state whenever props change, refactor your " +
                'code to use memoization techniques or move it to ' +
                'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +
                'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                'To rename all deprecated lifecycles to their new names, you can run ' +
                '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                '\nPlease update the following components: %s',
              _sortedNames4,
            );
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            lowPriorityWarningWithoutStack$1(
              false,
              'componentWillUpdate has been renamed, and is not recommended for use. ' +
                'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                '* Move data fetching code or side effects to componentDidUpdate.\n' +
                '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +
                'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                'To rename all deprecated lifecycles to their new names, you can run ' +
                '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                '\nPlease update the following components: %s',
              _sortedNames5,
            );
          }
        };
        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            warningWithoutStack$1(
              false,
              'Expected to find a StrictMode component in a strict mode tree. ' +
                'This error is likely caused by a bug in React. Please file an issue.',
            );
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (
            fiber.type.contextTypes != null ||
            fiber.type.childContextTypes != null ||
            (instance !== null && typeof instance.getChildContext === 'function')
          ) {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
            var uniqueNames = new Set();
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || 'Component');
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(
              false,
              'Legacy context API has been detected within a strict-mode tree.' +
                '\n\nThe old API will be supported in all 16.x releases, but applications ' +
                'using it should migrate to the new version.' +
                '\n\nPlease update the following components: %s' +
                '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' +
                '%s',
              sortedNames,
              strictRootComponentStack,
            );
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function (handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === 'function') {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender,
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== 'function') {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function (root, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies,
            updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function (root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          updateContainerAtExpirationTime(element, root, null, Sync, null);
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate,
            child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error('Expected resolveFamily to be set during hot reload.');
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || (alternate !== null && failedBoundaries.has(alternate))) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            scheduleWork(fiber, Sync);
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function (root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(
            families.map(function (family) {
              return family.current;
            }),
          );
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error('Expected to reach root first.');
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = _assign({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      function readLazyComponentType(lazyComponent) {
        initializeLazyComponentType(lazyComponent);
        if (lazyComponent._status !== Resolved) {
          throw lazyComponent._result;
        }
        return lazyComponent._result;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            !(
              context._currentRenderer === undefined ||
              context._currentRenderer === null ||
              context._currentRenderer === rendererSigil
            )
              ? warningWithoutStack$1(
                  false,
                  'Detected multiple renderers concurrently rendering the ' +
                    'same context provider. This is currently unsupported.',
                )
              : void 0;
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue = currentValue;
        }
      }
      function calculateChangedBits(context, newValue, oldValue) {
        if (is$1(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits =
            typeof context._calculateChangedBits === 'function'
              ? context._calculateChangedBits(oldValue, newValue)
              : MAX_SIGNED_31_BIT_INT;
          {
            !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits)
              ? warning$1(
                  false,
                  'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s',
                  changedBits,
                )
              : void 0;
          }
          return changedBits | 0;
        }
      }
      function scheduleWorkOnParentPath(parent, renderExpirationTime) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (node.childExpirationTime < renderExpirationTime) {
            node.childExpirationTime = renderExpirationTime;
            if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
              alternate.childExpirationTime = renderExpirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          } else {
            break;
          }
          node = node.return;
        }
      }
      function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
        var fiber = workInProgress.child;
        if (fiber !== null) {
          fiber.return = workInProgress;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(renderExpirationTime, null);
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }
                if (fiber.expirationTime < renderExpirationTime) {
                  fiber.expirationTime = renderExpirationTime;
                }
                var alternate = fiber.alternate;
                if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                  alternate.expirationTime = renderExpirationTime;
                }
                scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
                if (list.expirationTime < renderExpirationTime) {
                  list.expirationTime = renderExpirationTime;
                }
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress, renderExpirationTime) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (dependencies.expirationTime >= renderExpirationTime) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
      function readContext(context, observedBits) {
        {
          !!isDisallowedContextReadInDEV
            ? warning$1(
                false,
                'Context can only be read while React is rendering. ' +
                  'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                  'In function components, you can read it directly in the function body, but not ' +
                  'inside Hooks like useReducer() or useMemo().',
              )
            : void 0;
        }
        if (lastContextWithAllBitsObserved === context);
        else if (observedBits === false || observedBits === 0);
        else {
          var resolvedObservedBits;
          if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }
          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null,
          };
          if (lastContextDependency === null) {
            (function () {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw ReactError(
                    Error(
                      'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().',
                    ),
                  );
                }
              }
            })();
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              expirationTime: NoWork,
              firstContext: contextItem,
              responders: null,
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue;
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          firstUpdate: null,
          lastUpdate: null,
          firstCapturedUpdate: null,
          lastCapturedUpdate: null,
          firstEffect: null,
          lastEffect: null,
          firstCapturedEffect: null,
          lastCapturedEffect: null,
        };
        return queue;
      }
      function cloneUpdateQueue(currentQueue) {
        var queue = {
          baseState: currentQueue.baseState,
          firstUpdate: currentQueue.firstUpdate,
          lastUpdate: currentQueue.lastUpdate,
          firstCapturedUpdate: null,
          lastCapturedUpdate: null,
          firstEffect: null,
          lastEffect: null,
          firstCapturedEffect: null,
          lastCapturedEffect: null,
        };
        return queue;
      }
      function createUpdate(expirationTime, suspenseConfig) {
        var update = {
          expirationTime: expirationTime,
          suspenseConfig: suspenseConfig,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null,
          nextEffect: null,
        };
        {
          update.priority = getCurrentPriorityLevel();
        }
        return update;
      }
      function appendUpdateToQueue(queue, update) {
        if (queue.lastUpdate === null) {
          queue.firstUpdate = queue.lastUpdate = update;
        } else {
          queue.lastUpdate.next = update;
          queue.lastUpdate = update;
        }
      }
      function enqueueUpdate(fiber, update) {
        var alternate = fiber.alternate;
        var queue1;
        var queue2;
        if (alternate === null) {
          queue1 = fiber.updateQueue;
          queue2 = null;
          if (queue1 === null) {
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
          }
        } else {
          queue1 = fiber.updateQueue;
          queue2 = alternate.updateQueue;
          if (queue1 === null) {
            if (queue2 === null) {
              queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
              queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
            } else {
              queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
            }
          } else {
            if (queue2 === null) {
              queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
            }
          }
        }
        if (queue2 === null || queue1 === queue2) {
          appendUpdateToQueue(queue1, update);
        } else {
          if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
            appendUpdateToQueue(queue1, update);
            appendUpdateToQueue(queue2, update);
          } else {
            appendUpdateToQueue(queue1, update);
            queue2.lastUpdate = update;
          }
        }
        {
          if (
            fiber.tag === ClassComponent &&
            (currentlyProcessingQueue === queue1 || (queue2 !== null && currentlyProcessingQueue === queue2)) &&
            !didWarnUpdateInsideUpdate
          ) {
            warningWithoutStack$1(
              false,
              'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                'from inside an update function. Update functions should be pure, ' +
                'with zero side-effects. Consider using componentDidUpdate or a ' +
                'callback.',
            );
            didWarnUpdateInsideUpdate = true;
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress, update) {
        var workInProgressQueue = workInProgress.updateQueue;
        if (workInProgressQueue === null) {
          workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
        } else {
          workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
        }
        if (workInProgressQueue.lastCapturedUpdate === null) {
          workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
        } else {
          workInProgressQueue.lastCapturedUpdate.next = update;
          workInProgressQueue.lastCapturedUpdate = update;
        }
      }
      function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
        var current = workInProgress.alternate;
        if (current !== null) {
          if (queue === current.updateQueue) {
            queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
          }
        }
        return queue;
      }
      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === 'function') {
              {
                enterDisallowedContextReadInDEV();
                if (workInProgress.mode & StrictMode) {
                  payload.call(instance, prevState, nextProps);
                }
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress.effectTag = (workInProgress.effectTag & ~ShouldCapture) | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === 'function') {
              {
                enterDisallowedContextReadInDEV();
                if (workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return _assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
        hasForceUpdate = false;
        queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
        {
          currentlyProcessingQueue = queue;
        }
        var newBaseState = queue.baseState;
        var newFirstUpdate = null;
        var newExpirationTime = NoWork;
        var update = queue.firstUpdate;
        var resultState = newBaseState;
        while (update !== null) {
          var updateExpirationTime = update.expirationTime;
          if (updateExpirationTime < renderExpirationTime) {
            if (newFirstUpdate === null) {
              newFirstUpdate = update;
              newBaseState = resultState;
            }
            if (newExpirationTime < updateExpirationTime) {
              newExpirationTime = updateExpirationTime;
            }
          } else {
            markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
            resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
            var callback = update.callback;
            if (callback !== null) {
              workInProgress.effectTag |= Callback;
              update.nextEffect = null;
              if (queue.lastEffect === null) {
                queue.firstEffect = queue.lastEffect = update;
              } else {
                queue.lastEffect.nextEffect = update;
                queue.lastEffect = update;
              }
            }
          }
          update = update.next;
        }
        var newFirstCapturedUpdate = null;
        update = queue.firstCapturedUpdate;
        while (update !== null) {
          var _updateExpirationTime = update.expirationTime;
          if (_updateExpirationTime < renderExpirationTime) {
            if (newFirstCapturedUpdate === null) {
              newFirstCapturedUpdate = update;
              if (newFirstUpdate === null) {
                newBaseState = resultState;
              }
            }
            if (newExpirationTime < _updateExpirationTime) {
              newExpirationTime = _updateExpirationTime;
            }
          } else {
            resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
            var _callback = update.callback;
            if (_callback !== null) {
              workInProgress.effectTag |= Callback;
              update.nextEffect = null;
              if (queue.lastCapturedEffect === null) {
                queue.firstCapturedEffect = queue.lastCapturedEffect = update;
              } else {
                queue.lastCapturedEffect.nextEffect = update;
                queue.lastCapturedEffect = update;
              }
            }
          }
          update = update.next;
        }
        if (newFirstUpdate === null) {
          queue.lastUpdate = null;
        }
        if (newFirstCapturedUpdate === null) {
          queue.lastCapturedUpdate = null;
        } else {
          workInProgress.effectTag |= Callback;
        }
        if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
          newBaseState = resultState;
        }
        queue.baseState = newBaseState;
        queue.firstUpdate = newFirstUpdate;
        queue.firstCapturedUpdate = newFirstCapturedUpdate;
        markUnprocessedUpdateTime(newExpirationTime);
        workInProgress.expirationTime = newExpirationTime;
        workInProgress.memoizedState = resultState;
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        (function () {
          if (!(typeof callback === 'function')) {
            {
              throw ReactError(
                Error('Invalid argument passed as callback. Expected a function. Instead received: ' + callback),
              );
            }
          }
        })();
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
        if (finishedQueue.firstCapturedUpdate !== null) {
          if (finishedQueue.lastUpdate !== null) {
            finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
            finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
          }
          finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
        }
        commitUpdateEffects(finishedQueue.firstEffect, instance);
        finishedQueue.firstEffect = finishedQueue.lastEffect = null;
        commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
        finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
      }
      function commitUpdateEffects(effect, instance) {
        while (effect !== null) {
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance);
          }
          effect = effect.nextEffect;
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      function requestCurrentSuspenseConfig() {
        return ReactCurrentBatchConfig.suspense;
      }
      var fakeInternalInstance = {};
      var isArray$1 = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback$1;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback$1 = function (callback, callerName) {
          if (callback === null || typeof callback === 'function') {
            return;
          }
          var key = callerName + '_' + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            warningWithoutStack$1(
              false,
              '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.',
              callerName,
              callback,
            );
          }
        };
        warnOnUndefinedDerivedState = function (type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              warningWithoutStack$1(
                false,
                '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +
                  'You have returned undefined.',
                componentName,
              );
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, '_processChildContext', {
          enumerable: false,
          value: function () {
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).",
                    ),
                  );
                }
              }
            })();
          },
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        {
          if (workInProgress.mode & StrictMode) {
            getDerivedStateFromProps(nextProps, prevState);
          }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState =
          partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function (inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTime();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, 'setState');
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function (inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTime();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, 'replaceState');
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function (inst, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTime();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, 'forceUpdate');
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
      };
      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
          startPhaseTimer(workInProgress, 'shouldComponentUpdate');
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          stopPhaseTimer();
          {
            !(shouldUpdate !== undefined)
              ? warningWithoutStack$1(
                  false,
                  '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                    'boolean value. Make sure to return true or false.',
                  getComponentName(ctor) || 'Component',
                )
              : void 0;
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
          var name = getComponentName(ctor) || 'Component';
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') {
              warningWithoutStack$1(
                false,
                '%s(...): No `render` method found on the returned component ' +
                  'instance: did you accidentally return an object from the constructor?',
                name,
              );
            } else {
              warningWithoutStack$1(
                false,
                '%s(...): No `render` method found on the returned component ' +
                  'instance: you may have forgotten to define `render`.',
                name,
              );
            }
          }
          var noGetInitialStateOnES6 =
            !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
          !noGetInitialStateOnES6
            ? warningWithoutStack$1(
                false,
                'getInitialState was defined on %s, a plain JavaScript class. ' +
                  'This is only supported for classes created using React.createClass. ' +
                  'Did you mean to define a state property instead?',
                name,
              )
            : void 0;
          var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
          !noGetDefaultPropsOnES6
            ? warningWithoutStack$1(
                false,
                'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                  'This is only supported for classes created using React.createClass. ' +
                  'Use a static property to define defaultProps instead.',
                name,
              )
            : void 0;
          var noInstancePropTypes = !instance.propTypes;
          !noInstancePropTypes
            ? warningWithoutStack$1(
                false,
                'propTypes was defined as an instance property on %s. Use a static ' +
                  'property to define propTypes instead.',
                name,
              )
            : void 0;
          var noInstanceContextType = !instance.contextType;
          !noInstanceContextType
            ? warningWithoutStack$1(
                false,
                'contextType was defined as an instance property on %s. Use a static ' +
                  'property to define contextType instead.',
                name,
              )
            : void 0;
          {
            var noInstanceContextTypes = !instance.contextTypes;
            !noInstanceContextTypes
              ? warningWithoutStack$1(
                  false,
                  'contextTypes was defined as an instance property on %s. Use a static ' +
                    'property to define contextTypes instead.',
                  name,
                )
              : void 0;
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              warningWithoutStack$1(
                false,
                '%s declares both contextTypes and contextType static properties. ' +
                  'The legacy contextTypes property will be ignored.',
                name,
              );
            }
          }
          var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
          !noComponentShouldUpdate
            ? warningWithoutStack$1(
                false,
                '%s has a method called ' +
                  'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                  'The name is phrased as a question because the function is ' +
                  'expected to return a value.',
                name,
              )
            : void 0;
          if (
            ctor.prototype &&
            ctor.prototype.isPureReactComponent &&
            typeof instance.shouldComponentUpdate !== 'undefined'
          ) {
            warningWithoutStack$1(
              false,
              '%s has a method called shouldComponentUpdate(). ' +
                'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                'Please extend React.Component if shouldComponentUpdate is used.',
              getComponentName(ctor) || 'A pure component',
            );
          }
          var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
          !noComponentDidUnmount
            ? warningWithoutStack$1(
                false,
                '%s has a method called ' +
                  'componentDidUnmount(). But there is no such lifecycle method. ' +
                  'Did you mean componentWillUnmount()?',
                name,
              )
            : void 0;
          var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
          !noComponentDidReceiveProps
            ? warningWithoutStack$1(
                false,
                '%s has a method called ' +
                  'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                  'If you meant to update the state in response to changing props, ' +
                  'use componentWillReceiveProps(). If you meant to fetch data or ' +
                  'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                name,
              )
            : void 0;
          var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
          !noComponentWillRecieveProps
            ? warningWithoutStack$1(
                false,
                '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                name,
              )
            : void 0;
          var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
          !noUnsafeComponentWillRecieveProps
            ? warningWithoutStack$1(
                false,
                '%s has a method called ' +
                  'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                name,
              )
            : void 0;
          var hasMutatedProps = instance.props !== newProps;
          !(instance.props === undefined || !hasMutatedProps)
            ? warningWithoutStack$1(
                false,
                '%s(...): When calling super() in `%s`, make sure to pass ' +
                  "up the same props that your component's constructor was passed.",
                name,
                name,
              )
            : void 0;
          var noInstanceDefaultProps = !instance.defaultProps;
          !noInstanceDefaultProps
            ? warningWithoutStack$1(
                false,
                'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                  ' Instead, define defaultProps as a static property on %s.',
                name,
                name,
              )
            : void 0;
          if (
            typeof instance.getSnapshotBeforeUpdate === 'function' &&
            typeof instance.componentDidUpdate !== 'function' &&
            !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
          ) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            warningWithoutStack$1(
              false,
              '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +
                'This component defines getSnapshotBeforeUpdate() only.',
              getComponentName(ctor),
            );
          }
          var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
          !noInstanceGetDerivedStateFromProps
            ? warningWithoutStack$1(
                false,
                '%s: getDerivedStateFromProps() is defined as an instance method ' +
                  'and will be ignored. Instead, declare it as a static method.',
                name,
              )
            : void 0;
          var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
          !noInstanceGetDerivedStateFromCatch
            ? warningWithoutStack$1(
                false,
                '%s: getDerivedStateFromError() is defined as an instance method ' +
                  'and will be ignored. Instead, declare it as a static method.',
                name,
              )
            : void 0;
          var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
          !noStaticGetSnapshotBeforeUpdate
            ? warningWithoutStack$1(
                false,
                '%s: getSnapshotBeforeUpdate() is defined as a static method ' +
                  'and will be ignored. Instead, declare it as an instance method.',
                name,
              )
            : void 0;
          var _state = instance.state;
          if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
            warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
          }
          if (typeof instance.getChildContext === 'function') {
            !(typeof ctor.childContextTypes === 'object')
              ? warningWithoutStack$1(
                  false,
                  '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().',
                  name,
                )
              : void 0;
          }
        }
      }
      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ('contextType' in ctor) {
            var isValid =
              contextType === null ||
              (contextType !== undefined &&
                contextType.$$typeof === REACT_CONTEXT_TYPE &&
                contextType._context === undefined);
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = '';
              if (contextType === undefined) {
                addendum =
                  ' However, it is set to undefined. ' +
                  'This can be caused by a typo or by mixing up named and default imports. ' +
                  'This can also happen due to a circular dependency, so ' +
                  'try moving the createContext() call to a separate file.';
              } else if (typeof contextType !== 'object') {
                addendum = ' However, it is set to a ' + typeof contextType + '.';
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = ' Did you accidentally pass the Context.Provider instead?';
              } else if (contextType._context !== undefined) {
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
              } else {
                addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
              }
              warningWithoutStack$1(
                false,
                '%s defines an invalid contextType. ' +
                  'contextType should point to the Context object returned by React.createContext().%s',
                getComponentName(ctor) || 'Component',
                addendum,
              );
            }
          }
        }
        if (typeof contextType === 'object' && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        {
          if (workInProgress.mode & StrictMode) {
            new ctor(props, context);
          }
        }
        var instance = new ctor(props, context);
        var state = (workInProgress.memoizedState =
          instance.state !== null && instance.state !== undefined ? instance.state : null);
        adoptClassInstance(workInProgress, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              warningWithoutStack$1(
                false,
                '`%s` uses `getDerivedStateFromProps` but its initial state is ' +
                  '%s. This is not recommended. Instead, define the initial state by ' +
                  'assigning an object to `this.state` in the constructor of `%s`. ' +
                  'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                componentName,
                instance.state === null ? 'null' : 'undefined',
                componentName,
              );
            }
          }
          if (
            typeof ctor.getDerivedStateFromProps === 'function' ||
            typeof instance.getSnapshotBeforeUpdate === 'function'
          ) {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (
              typeof instance.componentWillMount === 'function' &&
              instance.componentWillMount.__suppressDeprecationWarning !== true
            ) {
              foundWillMountName = 'componentWillMount';
            } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
              foundWillMountName = 'UNSAFE_componentWillMount';
            }
            if (
              typeof instance.componentWillReceiveProps === 'function' &&
              instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
            ) {
              foundWillReceivePropsName = 'componentWillReceiveProps';
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
              foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            }
            if (
              typeof instance.componentWillUpdate === 'function' &&
              instance.componentWillUpdate.__suppressDeprecationWarning !== true
            ) {
              foundWillUpdateName = 'componentWillUpdate';
            } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
              foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || 'Component';
              var newApiName =
                typeof ctor.getDerivedStateFromProps === 'function'
                  ? 'getDerivedStateFromProps()'
                  : 'getSnapshotBeforeUpdate()';
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                warningWithoutStack$1(
                  false,
                  'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                    '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' +
                    'The above lifecycles should be removed. Learn more about this warning here:\n' +
                    'https://fb.me/react-unsafe-component-lifecycles',
                  _componentName,
                  newApiName,
                  foundWillMountName !== null ? '\n  ' + foundWillMountName : '',
                  foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '',
                  foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '',
                );
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === 'function') {
          instance.UNSAFE_componentWillMount();
        }
        stopPhaseTimer();
        if (oldState !== instance.state) {
          {
            warningWithoutStack$1(
              false,
              '%s.componentWillMount(): Assigning directly to this.state is ' +
                "deprecated (except inside a component's " +
                'constructor). Use setState instead.',
              getComponentName(workInProgress.type) || 'Component',
            );
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, 'componentWillReceiveProps');
        if (typeof instance.componentWillReceiveProps === 'function') {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        stopPhaseTimer();
        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              warningWithoutStack$1(
                false,
                '%s.componentWillReceiveProps(): Assigning directly to ' +
                  "this.state is deprecated (except inside a component's " +
                  'constructor). Use setState instead.',
                componentName,
              );
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        {
          checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              warningWithoutStack$1(
                false,
                '%s: It is not recommended to assign props directly to state ' +
                  "because updates to props won't be reflected in state. " +
                  'In most cases, it is better to use props directly.',
                componentName,
              );
            }
          }
          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          }
        }
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress.memoizedState;
        }
        if (
          typeof ctor.getDerivedStateFromProps !== 'function' &&
          typeof instance.getSnapshotBeforeUpdate !== 'function' &&
          (typeof instance.UNSAFE_componentWillMount === 'function' ||
            typeof instance.componentWillMount === 'function')
        ) {
          callComponentWillMount(workInProgress, instance);
          updateQueue = workInProgress.updateQueue;
          if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            instance.state = workInProgress.memoizedState;
          }
        }
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      }
      function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles =
          typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        if (
          !hasNewLifecycles &&
          (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
            typeof instance.componentWillReceiveProps === 'function')
        ) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = (instance.state = oldState);
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          newState = workInProgress.memoizedState;
        }
        if (
          oldProps === newProps &&
          oldState === newState &&
          !hasContextChanged() &&
          !checkHasForceUpdateAfterProcessing()
        ) {
          if (typeof instance.componentDidMount === 'function') {
            workInProgress.effectTag |= Update;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }
        var shouldUpdate =
          checkHasForceUpdateAfterProcessing() ||
          checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillMount === 'function' ||
              typeof instance.componentWillMount === 'function')
          ) {
            startPhaseTimer(workInProgress, 'componentWillMount');
            if (typeof instance.componentWillMount === 'function') {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === 'function') {
              instance.UNSAFE_componentWillMount();
            }
            stopPhaseTimer();
          }
          if (typeof instance.componentDidMount === 'function') {
            workInProgress.effectTag |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === 'function') {
            workInProgress.effectTag |= Update;
          }
          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props =
          workInProgress.type === workInProgress.elementType
            ? oldProps
            : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles =
          typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        if (
          !hasNewLifecycles &&
          (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
            typeof instance.componentWillReceiveProps === 'function')
        ) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = (instance.state = oldState);
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          newState = workInProgress.memoizedState;
        }
        if (
          oldProps === newProps &&
          oldState === newState &&
          !hasContextChanged() &&
          !checkHasForceUpdateAfterProcessing()
        ) {
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }
        var shouldUpdate =
          checkHasForceUpdateAfterProcessing() ||
          checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillUpdate === 'function' ||
              typeof instance.componentWillUpdate === 'function')
          ) {
            startPhaseTimer(workInProgress, 'componentWillUpdate');
            if (typeof instance.componentWillUpdate === 'function') {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            stopPhaseTimer();
          }
          if (typeof instance.componentDidUpdate === 'function') {
            workInProgress.effectTag |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            workInProgress.effectTag |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }
          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function (child) {};
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function (child) {
          if (child === null || typeof child !== 'object') {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          (function () {
            if (!(typeof child._store === 'object')) {
              {
                throw ReactError(
                  Error(
                    'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
          child._store.validated = true;
          var currentComponentErrorInfo =
            'Each child in a list should have a unique ' +
            '"key" prop. See https://fb.me/react-warning-keys for ' +
            'more information.' +
            getCurrentFiberStackInDev();
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning$1(
            false,
            'Each child in a list should have a unique ' +
              '"key" prop. See https://fb.me/react-warning-keys for ' +
              'more information.',
          );
        };
      }
      var isArray = Array.isArray;
      function coerceRef(returnFiber, current$$1, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
          {
            if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
              var componentName = getComponentName(returnFiber.type) || 'Component';
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  warningWithoutStack$1(
                    false,
                    'A string ref, "%s", has been found within a strict mode tree. ' +
                      'String refs are a source of potential bugs and should be avoided. ' +
                      'We recommend using useRef() or createRef() instead. ' +
                      'Learn more about using refs safely here: ' +
                      'https://fb.me/react-strict-mode-string-ref%s',
                    mixedRef,
                    getStackByFiberInDevAndProd(returnFiber),
                  );
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              (function () {
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw ReactError(
                      Error('Function components cannot have refs. Did you mean to use React.forwardRef()?'),
                    );
                  }
                }
              })();
              inst = ownerFiber.stateNode;
            }
            (function () {
              if (!inst) {
                {
                  throw ReactError(
                    Error(
                      'Missing owner for string ref ' +
                        mixedRef +
                        '. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
            var stringRef = '' + mixedRef;
            if (
              current$$1 !== null &&
              current$$1.ref !== null &&
              typeof current$$1.ref === 'function' &&
              current$$1.ref._stringRef === stringRef
            ) {
              return current$$1.ref;
            }
            var ref = function (value) {
              var refs = inst.refs;
              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            (function () {
              if (!(typeof mixedRef === 'string')) {
                {
                  throw ReactError(
                    Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.'),
                  );
                }
              }
            })();
            (function () {
              if (!element._owner) {
                {
                  throw ReactError(
                    Error(
                      'Element ref was specified as a string (' +
                        mixedRef +
                        ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",
                    ),
                  );
                }
              }
            })();
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') {
          var addendum = '';
          {
            addendum =
              ' If you meant to render a collection of children, use an array ' +
              'instead.' +
              getCurrentFiberStackInDev();
          }
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'Objects are not valid as a React child (found: ' +
                      (Object.prototype.toString.call(newChild) === '[object Object]'
                        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'
                        : newChild) +
                      ').' +
                      addendum,
                  ),
                );
              }
            }
          })();
        }
      }
      function warnOnFunctionType() {
        var currentComponentErrorInfo =
          'Functions are not valid as a React child. This may happen if ' +
          'you return a Component instead of <Component /> from render. ' +
          'Or maybe you meant to call this function rather than return it.' +
          getCurrentFiberStackInDev();
        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning$1(
          false,
          'Functions are not valid as a React child. This may happen if ' +
            'you return a Component instead of <Component /> from render. ' +
            'Or maybe you meant to call this function rather than return it.',
        );
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }
          var current$$1 = newFiber.alternate;
          if (current$$1 !== null) {
            var oldIndex = current$$1.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
          if (current$$1 === null || current$$1.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current$$1, element, expirationTime) {
          if (
            current$$1 !== null &&
            (current$$1.elementType === element.type || isCompatibleFamilyForHotReloading(current$$1, element))
          ) {
            var existing = useFiber(current$$1, element.props);
            existing.ref = coerceRef(returnFiber, current$$1, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current$$1, element);
            created.return = returnFiber;
            return created;
          }
        }
        function updatePortal(returnFiber, current$$1, portal, expirationTime) {
          if (
            current$$1 === null ||
            current$$1.tag !== HostPortal ||
            current$$1.stateNode.containerInfo !== portal.containerInfo ||
            current$$1.stateNode.implementation !== portal.implementation
          ) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
          if (current$$1 === null || current$$1.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current$$1, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                _created2.return = returnFiber;
                return _created2;
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === 'function') {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
          }
          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === 'function') {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
          }
          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(
                    returnFiber,
                    _matchedFiber,
                    newChild.props.children,
                    expirationTime,
                    newChild.key,
                  );
                }
                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === 'function') {
              warnOnFunctionType();
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== 'object' || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;
                if (typeof key !== 'string') {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                warning$1(
                  false,
                  'Encountered two children with the same key, `%s`. ' +
                    'Keys should be unique so that components maintain their identity ' +
                    'across updates. Non-unique keys may cause children to be ' +
                    'duplicated and/or omitted — the behavior is unsupported and ' +
                    'could change in a future version.',
                  key,
                );
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;
            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          (function () {
            if (!(typeof iteratorFn === 'function')) {
              {
                throw ReactError(
                  Error(
                    'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.',
                  ),
                );
              }
            }
          })();
          {
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
              !didWarnAboutGenerators
                ? warning$1(
                    false,
                    'Using Generators as children is unsupported and will likely yield ' +
                      'unexpected results because enumerating a generator mutates it. ' +
                      'You may convert it to an array with `Array.from()` or the ' +
                      '`[...spread]` operator before rendering. Keep in mind ' +
                      'you might need to polyfill these features for older browsers.',
                  )
                : void 0;
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              !didWarnAboutMaps
                ? warning$1(
                    false,
                    'Using Maps as children is unsupported and will likely yield ' +
                      'unexpected results. Convert it to a sequence/iterable of keyed ' +
                      'ReactElements instead.',
                  )
                : void 0;
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          (function () {
            if (!(newChildren != null)) {
              {
                throw ReactError(Error('An iterable object provided no iterator.'));
              }
            }
          })();
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (
                child.tag === Fragment
                  ? element.type === REACT_FRAGMENT_TYPE
                  : child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)
              ) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(
                  child,
                  element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props,
                );
                existing.ref = coerceRef(returnFiber, child, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(
              element.props.children,
              returnFiber.mode,
              expirationTime,
              element.key,
            );
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (
                child.tag === HostPortal &&
                child.stateNode.containerInfo === portal.containerInfo &&
                child.stateNode.implementation === portal.implementation
              ) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          var isUnkeyedTopLevelFragment =
            typeof newChild === 'object' &&
            newChild !== null &&
            newChild.type === REACT_FRAGMENT_TYPE &&
            newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          var isObject = typeof newChild === 'object' && newChild !== null;
          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(
                  reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime),
                );
              case REACT_PORTAL_TYPE:
                return placeSingleChild(
                  reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime),
                );
            }
          }
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            return placeSingleChild(
              reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime),
            );
          }
          if (isArray(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }
          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === 'function') {
              warnOnFunctionType();
            }
          }
          if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent: {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    break;
                  }
                }
              }
              case FunctionComponent: {
                var Component = returnFiber.type;
                (function () {
                  {
                    {
                      throw ReactError(
                        Error(
                          (Component.displayName || Component.name || 'Component') +
                            '(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',
                        ),
                      );
                    }
                  }
                })();
              }
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current$$1, workInProgress) {
        (function () {
          if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
            {
              throw ReactError(Error('Resuming work not yet implemented.'));
            }
          }
        })();
        if (workInProgress.child === null) {
          return;
        }
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(
            currentChild,
            currentChild.pendingProps,
            currentChild.expirationTime,
          );
          newChild.return = workInProgress;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress, renderExpirationTime) {
        var child = workInProgress.child;
        while (child !== null) {
          resetWorkInProgress(child, renderExpirationTime);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        (function () {
          if (!(c !== NO_CONTEXT)) {
            {
              throw ReactError(
                Error(
                  'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return (parentContext & SubtreeSuspenseContextMask) | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress.memoizedProps;
        if (props.fallback === undefined) {
          return false;
        }
        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }
        if (hasInvisibleParent) {
          return false;
        }
        return true;
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (
                dehydrated === null ||
                isSuspenseInstancePending(dehydrated) ||
                isSuspenseInstanceFallback(dehydrated)
              ) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function createResponderListener(responder, props) {
        var eventResponderListener = {
          responder: responder,
          props: props,
        };
        {
          Object.freeze(eventResponderListener);
        }
        return eventResponderListener;
      }
      var NoEffect$1 = 0;
      var UnmountSnapshot = 2;
      var UnmountMutation = 4;
      var MountMutation = 8;
      var UnmountLayout = 16;
      var MountLayout = 32;
      var MountPassive = 64;
      var UnmountPassive = 128;
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var didWarnAboutMismatchedHooksForComponent;
      {
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderExpirationTime$1 = NoWork;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var nextCurrentHook = null;
      var firstWorkInProgressHook = null;
      var workInProgressHook = null;
      var nextWorkInProgressHook = null;
      var remainingExpirationTime = NoWork;
      var componentUpdateQueue = null;
      var sideEffectTag = 0;
      var didScheduleRenderPhaseUpdate = false;
      var renderPhaseUpdates = null;
      var numberOfReRenders = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            warning$1(
              false,
              '%s received a final argument that is not an array (instead, received `%s`). When ' +
                'specified, the final argument must be an array.',
              currentHookNameInDev,
              typeof deps,
            );
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = '';
              var secondColumnStart = 30;
              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + '. ' + oldHookName;
                while (row.length < secondColumnStart) {
                  row += ' ';
                }
                row += newHookName + '\n';
                table += row;
              }
              warning$1(
                false,
                'React has detected a change in the order of Hooks called by %s. ' +
                  'This will lead to bugs and errors if not fixed. ' +
                  'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' +
                  '   Previous render            Next render\n' +
                  '   ------------------------------------------------------\n' +
                  '%s' +
                  '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                componentName,
                table,
              );
            }
          }
        }
      }
      function throwInvalidHookError() {
        (function () {
          {
            {
              throw ReactError(
                Error(
                  'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.',
                ),
              );
            }
          }
        })();
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            warning$1(
              false,
              '%s received a final argument during this render, but not during ' +
                'the previous render. Even though the final argument is optional, ' +
                'its type cannot change between renders.',
              currentHookNameInDev,
            );
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            warning$1(
              false,
              'The final argument passed to %s changed size between renders. The ' +
                'order and size of this array must remain constant.\n\n' +
                'Previous: %s\n' +
                'Incoming: %s',
              currentHookNameInDev,
              '[' + prevDeps.join(', ') + ']',
              '[' + nextDeps.join(', ') + ']',
            );
          }
        }
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (is$1(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
        renderExpirationTime$1 = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        nextCurrentHook = current !== null ? current.memoizedState : null;
        {
          hookTypesDev = current !== null ? current._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        }
        {
          if (nextCurrentHook !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, refOrContext);
        if (didScheduleRenderPhaseUpdate) {
          do {
            didScheduleRenderPhaseUpdate = false;
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            nextCurrentHook = current !== null ? current.memoizedState : null;
            nextWorkInProgressHook = firstWorkInProgressHook;
            currentHook = null;
            workInProgressHook = null;
            componentUpdateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            children = Component(props, refOrContext);
          } while (didScheduleRenderPhaseUpdate);
          renderPhaseUpdates = null;
          numberOfReRenders = 0;
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        var renderedWork = currentlyRenderingFiber$1;
        renderedWork.memoizedState = firstWorkInProgressHook;
        renderedWork.expirationTime = remainingExpirationTime;
        renderedWork.updateQueue = componentUpdateQueue;
        renderedWork.effectTag |= sideEffectTag;
        {
          renderedWork._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime$1 = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        (function () {
          if (!!didRenderTooFewHooks) {
            {
              throw ReactError(
                Error(
                  'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.',
                ),
              );
            }
          }
        })();
        return children;
      }
      function bailoutHooks(current, workInProgress, expirationTime) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);
        if (current.expirationTime <= expirationTime) {
          current.expirationTime = NoWork;
        }
      }
      function resetHooks() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        renderExpirationTime$1 = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        didScheduleRenderPhaseUpdate = false;
        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          queue: null,
          baseUpdate: null,
          next: null,
        };
        if (workInProgressHook === null) {
          firstWorkInProgressHook = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
          nextCurrentHook = currentHook !== null ? currentHook.next : null;
        } else {
          (function () {
            if (!(nextCurrentHook !== null)) {
              {
                throw ReactError(Error('Rendered more hooks than during the previous render.'));
              }
            }
          })();
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            queue: currentHook.queue,
            baseUpdate: currentHook.baseUpdate,
            next: null,
          };
          if (workInProgressHook === null) {
            workInProgressHook = firstWorkInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
          nextCurrentHook = currentHook.next;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === 'function' ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = (hook.queue = {
          last: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState,
        });
        var dispatch = (queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue));
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        (function () {
          if (!(queue !== null)) {
            {
              throw ReactError(Error('Should have a queue. This is likely a bug in React. Please file an issue.'));
            }
          }
        })();
        queue.lastRenderedReducer = reducer;
        if (numberOfReRenders > 0) {
          var _dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== undefined) {
              renderPhaseUpdates.delete(queue);
              var newState = hook.memoizedState;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== null);
              if (!is$1(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseUpdate === queue.last) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
              return [newState, _dispatch];
            }
          }
          return [hook.memoizedState, _dispatch];
        }
        var last = queue.last;
        var baseUpdate = hook.baseUpdate;
        var baseState = hook.baseState;
        var first;
        if (baseUpdate !== null) {
          if (last !== null) {
            last.next = null;
          }
          first = baseUpdate.next;
        } else {
          first = last !== null ? last.next : null;
        }
        if (first !== null) {
          var _newState = baseState;
          var newBaseState = null;
          var newBaseUpdate = null;
          var prevUpdate = baseUpdate;
          var _update = first;
          var didSkip = false;
          do {
            var updateExpirationTime = _update.expirationTime;
            if (updateExpirationTime < renderExpirationTime$1) {
              if (!didSkip) {
                didSkip = true;
                newBaseUpdate = prevUpdate;
                newBaseState = _newState;
              }
              if (updateExpirationTime > remainingExpirationTime) {
                remainingExpirationTime = updateExpirationTime;
                markUnprocessedUpdateTime(remainingExpirationTime);
              }
            } else {
              markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig);
              if (_update.eagerReducer === reducer) {
                _newState = _update.eagerState;
              } else {
                var _action = _update.action;
                _newState = reducer(_newState, _action);
              }
            }
            prevUpdate = _update;
            _update = _update.next;
          } while (_update !== null && _update !== first);
          if (!didSkip) {
            newBaseUpdate = prevUpdate;
            newBaseState = _newState;
          }
          if (!is$1(_newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = _newState;
          hook.baseUpdate = newBaseUpdate;
          hook.baseState = newBaseState;
          queue.lastRenderedState = _newState;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = (hook.queue = {
          last: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState,
        });
        var dispatch = (queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue));
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          next: null,
        };
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
          current: initialValue,
        };
        {
          Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
      }
      function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(NoEffect$1, create, destroy, nextDeps);
              return;
            }
          }
        }
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        {
          if ('undefined' !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
      }
      function updateEffect(create, deps) {
        {
          if ('undefined' !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function () {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            !refObject.hasOwnProperty('current')
              ? warning$1(
                  false,
                  'Expected useImperativeHandle() first argument to either be a ' +
                    'ref callback or React.createRef() object. Instead received: %s.',
                  'an object with keys {' + Object.keys(refObject).join(', ') + '}',
                )
              : void 0;
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function () {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          !(typeof create === 'function')
            ? warning$1(
                false,
                'Expected useImperativeHandle() second argument to be a function ' +
                  'that creates a handle. Instead received: %s.',
                create !== null ? typeof create : 'null',
              )
            : void 0;
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(
          Update,
          UnmountMutation | MountLayout,
          imperativeHandleEffect.bind(null, create, ref),
          effectDeps,
        );
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          !(typeof create === 'function')
            ? warning$1(
                false,
                'Expected useImperativeHandle() second argument to be a function ' +
                  'that creates a handle. Instead received: %s.',
                create !== null ? typeof create : 'null',
              )
            : void 0;
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(
          Update,
          UnmountMutation | MountLayout,
          imperativeHandleEffect.bind(null, create, ref),
          effectDeps,
        );
      }
      function mountDebugValue(value, formatterFn) {}
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function dispatchAction(fiber, queue, action) {
        (function () {
          if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
            {
              throw ReactError(
                Error('Too many re-renders. React limits the number of renders to prevent an infinite loop.'),
              );
            }
          }
        })();
        {
          !(typeof arguments[3] !== 'function')
            ? warning$1(
                false,
                "State updates from the useState() and useReducer() Hooks don't support the " +
                  'second callback argument. To execute a side effect after ' +
                  'rendering, declare it in the component body with useEffect().',
              )
            : void 0;
        }
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || (alternate !== null && alternate === currentlyRenderingFiber$1)) {
          didScheduleRenderPhaseUpdate = true;
          var update = {
            expirationTime: renderExpirationTime$1,
            suspenseConfig: null,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null,
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          if (renderPhaseUpdates === null) {
            renderPhaseUpdates = new Map();
          }
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === undefined) {
            renderPhaseUpdates.set(queue, update);
          } else {
            var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
            while (lastRenderPhaseUpdate.next !== null) {
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            }
            lastRenderPhaseUpdate.next = update;
          }
        } else {
          var currentTime = requestCurrentTime();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var _update2 = {
            expirationTime: expirationTime,
            suspenseConfig: suspenseConfig,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null,
          };
          {
            _update2.priority = getCurrentPriorityLevel();
          }
          var last = queue.last;
          if (last === null) {
            _update2.next = _update2;
          } else {
            var first = last.next;
            if (first !== null) {
              _update2.next = first;
            }
            last.next = _update2;
          }
          queue.last = _update2;
          if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                _update2.eagerReducer = lastRenderedReducer;
                _update2.eagerState = eagerState;
                if (is$1(eagerState, currentState)) {
                  return;
                }
              } catch (error) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          {
            if ('undefined' !== typeof jest) {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleWork(fiber, expirationTime);
        }
      }
      var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useResponder: throwInvalidHookError,
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      {
        var warnInvalidContextAccess = function () {
          warning$1(
            false,
            'Context can only be read while React is rendering. ' +
              'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
              'In function components, you can read it directly in the function body, but not ' +
              'inside Hooks like useReducer() or useMemo().',
          );
        };
        var warnInvalidHookAccess = function () {
          warning$1(
            false,
            'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +
              'You can only call Hooks at the top level of your React function. ' +
              'For more information, see ' +
              'https://fb.me/rules-of-hooks',
          );
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function (responder, props) {
            currentHookNameInDev = 'useResponder';
            mountHookTypesDev();
            return createResponderListener(responder, props);
          },
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function (responder, props) {
            currentHookNameInDev = 'useResponder';
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function (responder, props) {
            currentHookNameInDev = 'useResponder';
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function (context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function (responder, props) {
            currentHookNameInDev = 'useResponder';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return createResponderListener(responder, props);
          },
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function (context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function (responder, props) {
            currentHookNameInDev = 'useResponder';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createResponderListener(responder, props);
          },
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }
      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
              break;
            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
              break;
          }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.effectTag = Deletion;
        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag = (fiber.effectTag & ~Hydrating) | Placement;
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
            default:
              return;
          }
        }
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            return false;
          }
          default:
            return false;
        }
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(
          instance,
          fiber.type,
          fiber.memoizedProps,
          rootContainerInstance,
          hostContext,
          fiber,
        );
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
              }
            }
          }
        }
        return shouldUpdate;
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (suspenseInstance === null) {
          return nextHydratableInstance;
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (
          parent !== null &&
          parent.tag !== HostComponent &&
          parent.tag !== HostRoot &&
          parent.tag !== SuspenseComponent
        ) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        var type = fiber.type;
        if (
          fiber.tag !== HostComponent ||
          (type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps))
        ) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutMaxDuration;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutMaxDuration = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
        if (current$$1 === null) {
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          workInProgress.child = reconcileChildFibers(
            workInProgress,
            current$$1.child,
            nextChildren,
            renderExpirationTime,
          );
        }
      }
      function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      }
      function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$3.current = workInProgress;
          setCurrentPhase('render');
          nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
          if (workInProgress.mode & StrictMode) {
            if (workInProgress.memoizedState !== null) {
              nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
            }
          }
          setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
          bailoutHooks(current$$1, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function updateMemoComponent(
        current$$1,
        workInProgress,
        Component,
        nextProps,
        updateExpirationTime,
        renderExpirationTime,
      ) {
        if (current$$1 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress.tag = SimpleMemoComponent;
            workInProgress.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress, type);
            }
            return updateSimpleMemoComponent(
              current$$1,
              workInProgress,
              resolvedType,
              nextProps,
              updateExpirationTime,
              renderExpirationTime,
            );
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type), getCurrentFiberStackInDev);
            }
          }
          var child = createFiberFromTypeAndProps(
            Component.type,
            null,
            nextProps,
            null,
            workInProgress.mode,
            renderExpirationTime,
          );
          child.ref = workInProgress.ref;
          child.return = workInProgress;
          workInProgress.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type), getCurrentFiberStackInDev);
          }
        }
        var currentChild = current$$1.child;
        if (updateExpirationTime < renderExpirationTime) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        }
        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(
        current$$1,
        workInProgress,
        Component,
        nextProps,
        updateExpirationTime,
        renderExpirationTime,
      ) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              outerMemoType = refineResolvedLazyComponent(outerMemoType);
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(
                outerPropTypes,
                nextProps,
                'prop',
                getComponentName(outerMemoType),
                getCurrentFiberStackInDev,
              );
            }
          }
        }
        if (current$$1 !== null) {
          var prevProps = current$$1.memoizedProps;
          if (
            shallowEqual(prevProps, nextProps) &&
            current$$1.ref === workInProgress.ref &&
            workInProgress.type === current$$1.type
          ) {
            didReceiveUpdate = false;
            if (updateExpirationTime < renderExpirationTime) {
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            }
          }
        }
        return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }
      function updateFragment(current$$1, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function updateMode(current$$1, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
        {
          workInProgress.effectTag |= Update;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function markRef(current$$1, workInProgress) {
        var ref = workInProgress.ref;
        if ((current$$1 === null && ref !== null) || (current$$1 !== null && current$$1.ref !== ref)) {
          workInProgress.effectTag |= Ref;
        }
      }
      function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$3.current = workInProgress;
          setCurrentPhase('render');
          nextChildren = renderWithHooks(
            current$$1,
            workInProgress,
            Component,
            nextProps,
            context,
            renderExpirationTime,
          );
          if (workInProgress.mode & StrictMode) {
            if (workInProgress.memoizedState !== null) {
              nextChildren = renderWithHooks(
                current$$1,
                workInProgress,
                Component,
                nextProps,
                context,
                renderExpirationTime,
              );
            }
          }
          setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
          bailoutHooks(current$$1, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
          if (current$$1 !== null) {
            current$$1.alternate = null;
            workInProgress.alternate = null;
            workInProgress.effectTag |= Placement;
          }
          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
          shouldUpdate = true;
        } else if (current$$1 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        } else {
          shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
        }
        var nextUnitOfWork = finishClassComponent(
          current$$1,
          workInProgress,
          Component,
          shouldUpdate,
          hasContext,
          renderExpirationTime,
        );
        {
          var inst = workInProgress.stateNode;
          if (inst.props !== nextProps) {
            !didWarnAboutReassigningProps
              ? warning$1(
                  false,
                  'It looks like %s is reassigning its own `this.props` while rendering. ' +
                    'This is not supported and can lead to confusing bugs.',
                  getComponentName(workInProgress.type) || 'a component',
                )
              : void 0;
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(
        current$$1,
        workInProgress,
        Component,
        shouldUpdate,
        hasContext,
        renderExpirationTime,
      ) {
        markRef(current$$1, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$3.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setCurrentPhase('render');
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
              instance.render();
            }
            setCurrentPhase(null);
          }
        }
        workInProgress.effectTag |= PerformedWork;
        if (current$$1 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        }
        workInProgress.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true);
        }
        return workInProgress.child;
      }
      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress, root.context, false);
        }
        pushHostContainer(workInProgress, root.containerInfo);
      }
      function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        (function () {
          if (!(updateQueue !== null)) {
            {
              throw ReactError(
                Error(
                  'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
        var nextState = workInProgress.memoizedState;
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        var root = workInProgress.stateNode;
        if (root.hydrate && enterHydrationState(workInProgress)) {
          var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          workInProgress.child = child;
          var node = child;
          while (node) {
            node.effectTag = (node.effectTag & ~Placement) | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
          resetHydrationState();
        }
        return workInProgress.child;
      }
      function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
        pushHostContext(workInProgress);
        if (current$$1 === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress.effectTag |= ContentReset;
        }
        markRef(current$$1, workInProgress);
        if (
          workInProgress.mode & ConcurrentMode &&
          renderExpirationTime !== Never &&
          shouldDeprioritizeSubtree(type, nextProps)
        ) {
          {
            markSpawnedWork(Never);
          }
          workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
          return null;
        }
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function updateHostText(current$$1, workInProgress) {
        if (current$$1 === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType);
        workInProgress.type = Component;
        var resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress, Component);
              workInProgress.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
          case ClassComponent: {
            {
              workInProgress.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
          case ForwardRef: {
            {
              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
          case MemoComponent: {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    resolvedProps,
                    'prop',
                    getComponentName(Component),
                    getCurrentFiberStackInDev,
                  );
                }
              }
            }
            child = updateMemoComponent(
              null,
              workInProgress,
              Component,
              resolveDefaultProps(Component.type, resolvedProps),
              updateExpirationTime,
              renderExpirationTime,
            );
            break;
          }
          default: {
            var hint = '';
            {
              if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = ' Did you wrap a component in React.lazy() more than once?';
              }
            }
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'Element type is invalid. Received a promise that resolves to: ' +
                        Component +
                        '. Lazy element type must resolve to a class or function.' +
                        hint,
                    ),
                  );
                }
              }
            })();
          }
        }
        return child;
      }
      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }
        workInProgress.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      }
      function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
              warningWithoutStack$1(
                false,
                "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                  'This is likely to cause errors. Change %s to extend React.Component instead.',
                componentName,
                componentName,
              );
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          }
          ReactCurrentOwner$3.current = workInProgress;
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
        workInProgress.effectTag |= PerformedWork;
        if (
          typeof value === 'object' &&
          value !== null &&
          typeof value.render === 'function' &&
          value.$$typeof === undefined
        ) {
          {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              warningWithoutStack$1(
                false,
                'The <%s /> component appears to be a function component that returns a class instance. ' +
                  'Change %s to a class that extends React.Component instead. ' +
                  "If you can't use a class try assigning the prototype on the function as a workaround. " +
                  "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " +
                  'cannot be called with `new` by React.',
                _componentName,
                _componentName,
                _componentName,
              );
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
          workInProgress.tag = ClassComponent;
          resetHooks();
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }
          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
          }
          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, Component, props, renderExpirationTime);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
        } else {
          workInProgress.tag = FunctionComponent;
          {
            if (workInProgress.mode & StrictMode) {
              if (workInProgress.memoizedState !== null) {
                value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
              }
            }
          }
          reconcileChildren(null, workInProgress, value, renderExpirationTime);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
          !!Component.childContextTypes
            ? warningWithoutStack$1(
                false,
                '%s(...): childContextTypes cannot be defined on a function component.',
                Component.displayName || Component.name || 'Component',
              )
            : void 0;
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            warning$1(
              false,
              'Function components cannot be given refs. ' +
                'Attempts to access this ref will fail. ' +
                'Did you mean to use React.forwardRef()?%s',
              info,
            );
          }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
          var _componentName2 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
            warningWithoutStack$1(
              false,
              '%s: Function components do not support getDerivedStateFromProps.',
              _componentName2,
            );
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
          }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
          var _componentName3 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
            warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName3);
            didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryTime: Never,
      };
      function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
        return (
          hasSuspenseContext(suspenseContext, ForceSuspenseFallback) &&
          (current$$1 === null || current$$1.memoizedState !== null)
        );
      }
      function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps;
        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.effectTag |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var nextDidTimeout = false;
        var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1)) {
          nextDidTimeout = true;
          workInProgress.effectTag &= ~DidCapture;
        } else {
          if (current$$1 === null || current$$1.memoizedState !== null) {
            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);
        {
          if ('maxDuration' in nextProps) {
            if (!didWarnAboutMaxDuration) {
              didWarnAboutMaxDuration = true;
              warning$1(false, 'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
            }
          }
        }
        if (current$$1 === null) {
          if (nextDidTimeout) {
            var nextFallbackChildren = nextProps.fallback;
            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
            primaryChildFragment.return = workInProgress;
            if ((workInProgress.mode & BatchedMode) === NoMode) {
              var progressedState = workInProgress.memoizedState;
              var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
              primaryChildFragment.child = progressedPrimaryChild;
              var progressedChild = progressedPrimaryChild;
              while (progressedChild !== null) {
                progressedChild.return = primaryChildFragment;
                progressedChild = progressedChild.sibling;
              }
            }
            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
          } else {
            var nextPrimaryChildren = nextProps.children;
            workInProgress.memoizedState = null;
            return (workInProgress.child = mountChildFibers(
              workInProgress,
              null,
              nextPrimaryChildren,
              renderExpirationTime,
            ));
          }
        } else {
          var prevState = current$$1.memoizedState;
          if (prevState !== null) {
            var currentPrimaryChildFragment = current$$1.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            if (nextDidTimeout) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _primaryChildFragment2 = createWorkInProgress(
                currentPrimaryChildFragment,
                currentPrimaryChildFragment.pendingProps,
              );
              _primaryChildFragment2.return = workInProgress;
              if ((workInProgress.mode & BatchedMode) === NoMode) {
                var _progressedState = workInProgress.memoizedState;
                var _progressedPrimaryChild =
                  _progressedState !== null ? workInProgress.child.child : workInProgress.child;
                if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                  _primaryChildFragment2.child = _progressedPrimaryChild;
                  var _progressedChild2 = _progressedPrimaryChild;
                  while (_progressedChild2 !== null) {
                    _progressedChild2.return = _primaryChildFragment2;
                    _progressedChild2 = _progressedChild2.sibling;
                  }
                }
              }
              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration = 0;
                var _hiddenChild = _primaryChildFragment2.child;
                while (_hiddenChild !== null) {
                  _treeBaseDuration += _hiddenChild.treeBaseDuration;
                  _hiddenChild = _hiddenChild.sibling;
                }
                _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
              }
              var _fallbackChildFragment2 = createWorkInProgress(
                currentFallbackChildFragment,
                _nextFallbackChildren2,
                currentFallbackChildFragment.expirationTime,
              );
              _fallbackChildFragment2.return = workInProgress;
              _primaryChildFragment2.sibling = _fallbackChildFragment2;
              _primaryChildFragment2.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment2;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren = nextProps.children;
              var currentPrimaryChild = currentPrimaryChildFragment.child;
              var primaryChild = reconcileChildFibers(
                workInProgress,
                currentPrimaryChild,
                _nextPrimaryChildren,
                renderExpirationTime,
              );
              workInProgress.memoizedState = null;
              return (workInProgress.child = primaryChild);
            }
          } else {
            var _currentPrimaryChild = current$$1.child;
            if (nextDidTimeout) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
              _primaryChildFragment3.return = workInProgress;
              _primaryChildFragment3.child = _currentPrimaryChild;
              if (_currentPrimaryChild !== null) {
                _currentPrimaryChild.return = _primaryChildFragment3;
              }
              if ((workInProgress.mode & BatchedMode) === NoMode) {
                var _progressedState2 = workInProgress.memoizedState;
                var _progressedPrimaryChild2 =
                  _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
                _primaryChildFragment3.child = _progressedPrimaryChild2;
                var _progressedChild3 = _progressedPrimaryChild2;
                while (_progressedChild3 !== null) {
                  _progressedChild3.return = _primaryChildFragment3;
                  _progressedChild3 = _progressedChild3.sibling;
                }
              }
              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration2 = 0;
                var _hiddenChild2 = _primaryChildFragment3.child;
                while (_hiddenChild2 !== null) {
                  _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                  _hiddenChild2 = _hiddenChild2.sibling;
                }
                _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
              }
              var _fallbackChildFragment3 = createFiberFromFragment(
                _nextFallbackChildren3,
                mode,
                renderExpirationTime,
                null,
              );
              _fallbackChildFragment3.return = workInProgress;
              _primaryChildFragment3.sibling = _fallbackChildFragment3;
              _fallbackChildFragment3.effectTag |= Placement;
              _primaryChildFragment3.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment3;
              return _fallbackChildFragment3;
            } else {
              workInProgress.memoizedState = null;
              var _nextPrimaryChildren2 = nextProps.children;
              return (workInProgress.child = reconcileChildFibers(
                workInProgress,
                _currentPrimaryChild,
                _nextPrimaryChildren2,
                renderExpirationTime,
              ));
            }
          }
        }
      }
      function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              if (node.expirationTime < renderExpirationTime) {
                node.expirationTime = renderExpirationTime;
              }
              var alternate = node.alternate;
              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }
              scheduleWorkOnParentPath(node.return, renderExpirationTime);
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (
            revealOrder !== undefined &&
            revealOrder !== 'forwards' &&
            revealOrder !== 'backwards' &&
            revealOrder !== 'together' &&
            !didWarnAboutRevealOrder[revealOrder]
          ) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') {
              switch (revealOrder.toLowerCase()) {
                case 'together':
                case 'forwards':
                case 'backwards': {
                  warning$1(
                    false,
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.',
                    revealOrder,
                    revealOrder.toLowerCase(),
                  );
                  break;
                }
                case 'forward':
                case 'backward': {
                  warning$1(
                    false,
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                      'React uses the -s suffix in the spelling. Use "%ss" instead.',
                    revealOrder,
                    revealOrder.toLowerCase(),
                  );
                  break;
                }
                default:
                  warning$1(
                    false,
                    '"%s" is not a supported revealOrder on <SuspenseList />. ' +
                      'Did you mean "together", "forwards" or "backwards"?',
                    revealOrder,
                  );
                  break;
              }
            } else {
              warning$1(
                false,
                '%s is not a supported value for revealOrder on <SuspenseList />. ' +
                  'Did you mean "together", "forwards" or "backwards"?',
                revealOrder,
              );
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
              didWarnAboutTailOptions[tailMode] = true;
              warning$1(
                false,
                '"%s" is not a supported value for tail on <SuspenseList />. ' +
                  'Did you mean "collapsed" or "hidden"?',
                tailMode,
              );
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
              didWarnAboutTailOptions[tailMode] = true;
              warning$1(
                false,
                '<SuspenseList tail="%s" /> is only valid if revealOrder is ' +
                  '"forwards" or "backwards". ' +
                  'Did you mean to specify revealOrder="forwards"?',
                tailMode,
              );
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot);
          var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
          if (isArray || isIterable) {
            var type = isArray ? 'array' : 'iterable';
            warning$1(
              false,
              'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +
                'an additional SuspenseList to configure its revealOrder: ' +
                '<SuspenseList revealOrder=...> ... ' +
                '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +
                '</SuspenseList>',
              type,
              index,
              type,
            );
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if (
            (revealOrder === 'forwards' || revealOrder === 'backwards') &&
            children !== undefined &&
            children !== null &&
            children !== false
          ) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === 'function') {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                warning$1(
                  false,
                  'A single row was passed to a <SuspenseList revealOrder="%s" />. ' +
                    'This is not useful since it needs multiple rows. ' +
                    'Did you mean to pass multiple children or an array?',
                  revealOrder,
                );
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            last: lastContentRow,
            tail: tail,
            tailExpiration: 0,
            tailMode: tailMode,
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailExpiration = 0;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress.effectTag |= DidCapture;
        } else {
          var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BatchedMode) === NoMode) {
          workInProgress.memoizedState = null;
        } else {
          switch (revealOrder) {
            case 'forwards': {
              var lastContentRow = findLastContentRow(workInProgress.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress.child;
                workInProgress.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
              break;
            }
            case 'backwards': {
              var _tail = null;
              var row = workInProgress.child;
              workInProgress.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
              break;
            }
            case 'together': {
              initSuspenseListRenderState(workInProgress, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress.memoizedState = null;
            }
          }
        }
        return workInProgress.child;
      }
      function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current$$1 === null) {
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        }
        return workInProgress.child;
      }
      function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
          var providerPropTypes = workInProgress.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
          }
        }
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);
          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
        var context = workInProgress.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                warning$1(
                  false,
                  'Rendering <Context> directly is not supported and will be removed in ' +
                    'a future major release. Did you mean to render <Context.Consumer> instead?',
                );
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
          !(typeof render === 'function')
            ? warningWithoutStack$1(
                false,
                'A context consumer was rendered with multiple children, or a child ' +
                  "that isn't a function. A context consumer expects a single child " +
                  'that is a function. If you did pass a function, make sure there ' +
                  'is no trailing or leading whitespace around it.',
              )
            : void 0;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        {
          ReactCurrentOwner$3.current = workInProgress;
          setCurrentPhase('render');
          newChildren = render(newValue);
          setCurrentPhase(null);
        }
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
        cancelWorkTimer(workInProgress);
        if (current$$1 !== null) {
          workInProgress.dependencies = current$$1.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        var updateExpirationTime = workInProgress.expirationTime;
        if (updateExpirationTime !== NoWork) {
          markUnprocessedUpdateTime(updateExpirationTime);
        }
        var childExpirationTime = workInProgress.childExpirationTime;
        if (childExpirationTime < renderExpirationTime) {
          return null;
        } else {
          cloneChildFibers(current$$1, workInProgress);
          return workInProgress.child;
        }
      }
      function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error('Cannot swap the root fiber.');
          }
          current$$1.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error('Expected parent to have a child.');
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error('Expected to find the previous sibling.');
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = current$$1;
            returnFiber.lastEffect = current$$1;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
          }
          current$$1.nextEffect = null;
          current$$1.effectTag = Deletion;
          newWorkInProgress.effectTag |= Placement;
          return newWorkInProgress;
        }
      }
      function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
        var updateExpirationTime = workInProgress.expirationTime;
        {
          if (workInProgress._debugNeedsRemount && current$$1 !== null) {
            return remountFiber(
              current$$1,
              workInProgress,
              createFiberFromTypeAndProps(
                workInProgress.type,
                workInProgress.key,
                workInProgress.pendingProps,
                workInProgress._debugOwner || null,
                workInProgress.mode,
                workInProgress.expirationTime,
              ),
            );
          }
        }
        if (current$$1 !== null) {
          var oldProps = current$$1.memoizedProps;
          var newProps = workInProgress.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current$$1.type) {
            didReceiveUpdate = true;
          } else if (updateExpirationTime < renderExpirationTime) {
            didReceiveUpdate = false;
            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress);
                if (
                  workInProgress.mode & ConcurrentMode &&
                  renderExpirationTime !== Never &&
                  shouldDeprioritizeSubtree(workInProgress.type, newProps)
                ) {
                  {
                    markSpawnedWork(Never);
                  }
                  workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                  return null;
                }
                break;
              case ClassComponent: {
                var Component = workInProgress.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }
              case Profiler:
                {
                  workInProgress.effectTag |= Update;
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress.memoizedState;
                if (state !== null) {
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
                var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;
                if (didSuspendBefore) {
                  if (hasChildWork) {
                    return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                  }
                  workInProgress.effectTag |= DidCapture;
                }
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
            }
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          } else {
            didReceiveUpdate = false;
          }
        } else {
          didReceiveUpdate = false;
        }
        workInProgress.expirationTime = NoWork;
        switch (workInProgress.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
          }
          case LazyComponent: {
            var elementType = workInProgress.elementType;
            return mountLazyComponent(
              current$$1,
              workInProgress,
              elementType,
              updateExpirationTime,
              renderExpirationTime,
            );
          }
          case FunctionComponent: {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps =
              workInProgress.elementType === _Component
                ? unresolvedProps
                : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }
          case ClassComponent: {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;
            var _resolvedProps =
              workInProgress.elementType === _Component2
                ? _unresolvedProps
                : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }
          case HostRoot:
            return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
          case HostComponent:
            return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
          case HostText:
            return updateHostText(current$$1, workInProgress);
          case SuspenseComponent:
            return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
          case HostPortal:
            return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
          case ForwardRef: {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;
            var _resolvedProps2 =
              workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }
          case Fragment:
            return updateFragment(current$$1, workInProgress, renderExpirationTime);
          case Mode:
            return updateMode(current$$1, workInProgress, renderExpirationTime);
          case Profiler:
            return updateProfiler(current$$1, workInProgress, renderExpirationTime);
          case ContextProvider:
            return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
          case ContextConsumer:
            return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
          case MemoComponent: {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    _resolvedProps3,
                    'prop',
                    getComponentName(_type2),
                    getCurrentFiberStackInDev,
                  );
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(
              current$$1,
              workInProgress,
              _type2,
              _resolvedProps3,
              updateExpirationTime,
              renderExpirationTime,
            );
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(
              current$$1,
              workInProgress,
              workInProgress.type,
              workInProgress.pendingProps,
              updateExpirationTime,
              renderExpirationTime,
            );
          }
          case IncompleteClassComponent: {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;
            var _resolvedProps4 =
              workInProgress.elementType === _Component3
                ? _unresolvedProps4
                : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(
              current$$1,
              workInProgress,
              _Component3,
              _resolvedProps4,
              renderExpirationTime,
            );
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
          }
        }
        (function () {
          {
            {
              throw ReactError(
                Error(
                  'Unknown unit of work tag (' +
                    workInProgress.tag +
                    '). This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
      }
      function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update;
      }
      function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal);
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function (workInProgress) {};
        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
          var oldProps = current.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(
            instance,
            type,
            oldProps,
            newProps,
            rootContainerInstance,
            currentHostContext,
          );
          workInProgress.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress);
          }
        };
        updateHostText$1 = function (current, workInProgress, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case 'hidden': {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case 'collapsed': {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;
        switch (workInProgress.tag) {
          case IndeterminateComponent:
            break;
          case LazyComponent:
            break;
          case SimpleMemoComponent:
          case FunctionComponent:
            break;
          case ClassComponent: {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current === null || current.child === null) {
              var wasHydrated = popHydrationState(workInProgress);
              if (wasHydrated) {
                markUpdate(workInProgress);
              }
            }
            updateHostContainer(workInProgress);
            break;
          }
          case HostComponent: {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;
            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                (function () {
                  if (!(workInProgress.stateNode !== null)) {
                    {
                      throw ReactError(
                        Error(
                          'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
                break;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(
                  type,
                  newProps,
                  rootContainerInstance,
                  currentHostContext,
                  workInProgress,
                );
                appendAllChildren(instance, workInProgress, false, false);
                workInProgress.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress);
                }
              }
              if (workInProgress.ref !== null) {
                markRef$1(workInProgress);
              }
            }
            break;
          }
          case HostText: {
            var newText = newProps;
            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps;
              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                (function () {
                  if (!(workInProgress.stateNode !== null)) {
                    {
                      throw ReactError(
                        Error(
                          'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(
                  newText,
                  _rootContainerInstance,
                  _currentHostContext,
                  workInProgress,
                );
              }
            }
            break;
          }
          case ForwardRef:
            break;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress);
            var nextState = workInProgress.memoizedState;
            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              workInProgress.expirationTime = renderExpirationTime;
              return workInProgress;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current === null) {
              popHydrationState(workInProgress);
            } else {
              var prevState = current.memoizedState;
              prevDidTimeout = prevState !== null;
              if (!nextDidTimeout && prevState !== null) {
                var currentFallbackChild = current.child.sibling;
                if (currentFallbackChild !== null) {
                  var first = workInProgress.firstEffect;
                  if (first !== null) {
                    workInProgress.firstEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = first;
                  } else {
                    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = null;
                  }
                  currentFallbackChild.effectTag = Deletion;
                }
              }
            }
            if (nextDidTimeout && !prevDidTimeout) {
              if ((workInProgress.mode & BatchedMode) !== NoMode) {
                var hasInvisibleChildContext =
                  current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                if (
                  hasInvisibleChildContext ||
                  hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)
                ) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            {
              if (nextDidTimeout || prevDidTimeout) {
                workInProgress.effectTag |= Update;
              }
            }
            break;
          }
          case Fragment:
            break;
          case Mode:
            break;
          case Profiler:
            break;
          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);
            break;
          case ContextProvider:
            popProvider(workInProgress);
            break;
          case ContextConsumer:
            break;
          case MemoComponent:
            break;
          case IncompleteClassComponent: {
            var _Component = workInProgress.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }
            break;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress);
            var renderState = workInProgress.memoizedState;
            if (renderState === null) {
              break;
            }
            var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended =
                  renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);
                if (!cannotBeSuspended) {
                  var row = workInProgress.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress.effectTag |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress.updateQueue = newThennables;
                        workInProgress.effectTag |= Update;
                      }
                      workInProgress.firstEffect = workInProgress.lastEffect = null;
                      resetChildFibers(workInProgress, renderExpirationTime);
                      pushSuspenseContext(
                        workInProgress,
                        setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback),
                      );
                      return workInProgress.child;
                    }
                    row = row.sibling;
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === 'hidden') {
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.effectTag |= Update;
                    }
                    var lastEffect = (workInProgress.lastEffect = renderState.lastEffect);
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    return null;
                  }
                } else if (now() > renderState.tailExpiration && renderExpirationTime > Never) {
                  workInProgress.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  var nextPriority = renderExpirationTime - 1;
                  workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                  {
                    markSpawnedWork(nextPriority);
                  }
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress.child;
                workInProgress.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              if (renderState.tailExpiration === 0) {
                var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
              }
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress.lastEffect;
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress, suspenseContext);
              return next;
            }
            break;
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          default:
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'Unknown unit of work tag (' +
                        workInProgress.tag +
                        '). This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
        }
        return null;
      }
      function unwindWork(workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
          case ClassComponent: {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            var effectTag = workInProgress.effectTag;
            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;
              return workInProgress;
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;
            (function () {
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw ReactError(
                    Error(
                      'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
            workInProgress.effectTag = (_effectTag & ~ShouldCapture) | DidCapture;
            return workInProgress;
          }
          case HostComponent: {
            popHostContext(workInProgress);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress);
            var _effectTag2 = workInProgress.effectTag;
            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = (_effectTag2 & ~ShouldCapture) | DidCapture;
              return workInProgress;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress);
            return null;
          case ContextProvider:
            popProvider(workInProgress);
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            popProvider(interruptedWork);
            break;
        }
      }
      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source),
        };
      }
      function logCapturedError(capturedError) {
        var error = capturedError.error;
        {
          var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry;
          if (error != null && error._suppressLogging) {
            if (errorBoundaryFound && willRetry) {
              return;
            }
            console.error(error);
          }
          var componentNameMessage = componentName
            ? 'The above error occurred in the <' + componentName + '> component:'
            : 'The above error occurred in one of your React components:';
          var errorBoundaryMessage;
          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage =
                'React will try to recreate this component tree from scratch ' +
                ('using the error boundary you provided, ' + errorBoundaryName + '.');
            } else {
              errorBoundaryMessage =
                'This error was initially handled by the error boundary ' +
                errorBoundaryName +
                '.\n' +
                'Recreating the tree from scratch failed so React will unmount the tree.';
            }
          } else {
            errorBoundaryMessage =
              'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
              'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
          }
          var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        if (stack === null && source !== null) {
          stack = getStackByFiberInDevAndProd(source);
        }
        var capturedError = {
          componentName: source !== null ? getComponentName(source.type) : null,
          componentStack: stack !== null ? stack : '',
          error: errorInfo.value,
          errorBoundary: null,
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false,
        };
        if (boundary !== null && boundary.tag === ClassComponent) {
          capturedError.errorBoundary = boundary.stateNode;
          capturedError.errorBoundaryName = getComponentName(boundary.type);
          capturedError.errorBoundaryFound = true;
          capturedError.willRetry = true;
        }
        try {
          logCapturedError(capturedError);
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }
      var callComponentWillUnmountWithTimer = function (current$$1, instance) {
        startPhaseTimer(current$$1, 'componentWillUnmount');
        instance.props = current$$1.memoizedProps;
        instance.state = current$$1.memoizedState;
        instance.componentWillUnmount();
        stopPhaseTimer();
      };
      function safelyCallComponentWillUnmount(current$$1, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current$$1, unmountError);
          }
        }
      }
      function safelyDetachRef(current$$1) {
        var ref = current$$1.ref;
        if (ref !== null) {
          if (typeof ref === 'function') {
            {
              invokeGuardedCallback(null, ref, null, null);
              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current$$1, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current$$1, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);
          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current$$1, error);
          }
        }
      }
      function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }
          case ClassComponent: {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps)
                      ? warning$1(
                          false,
                          'Expected %s props to match memoized props before ' +
                            'getSnapshotBeforeUpdate. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                    !(instance.state === finishedWork.memoizedState)
                      ? warning$1(
                          false,
                          'Expected %s state to match memoized state before ' +
                            'getSnapshotBeforeUpdate. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(
                  finishedWork.elementType === finishedWork.type
                    ? prevProps
                    : resolveDefaultProps(finishedWork.type, prevProps),
                  prevState,
                );
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(
                      false,
                      '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +
                        'must be returned. You have returned undefined.',
                      getComponentName(finishedWork.type),
                    );
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }
            return;
          }
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
          default: {
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
          }
        }
      }
      function commitHookEffectList(unmountTag, mountTag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & unmountTag) !== NoEffect$1) {
              var destroy = effect.destroy;
              effect.destroy = undefined;
              if (destroy !== undefined) {
                destroy();
              }
            }
            if ((effect.tag & mountTag) !== NoEffect$1) {
              var create = effect.create;
              effect.destroy = create();
              {
                var _destroy = effect.destroy;
                if (_destroy !== undefined && typeof _destroy !== 'function') {
                  var addendum = void 0;
                  if (_destroy === null) {
                    addendum =
                      ' You returned null. If your effect does not require clean ' +
                      'up, return undefined (or nothing).';
                  } else if (typeof _destroy.then === 'function') {
                    addendum =
                      '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +
                      'Instead, write the async function inside your effect ' +
                      'and call it immediately:\n\n' +
                      'useEffect(() => {\n' +
                      '  async function fetchData() {\n' +
                      '    // You can await here\n' +
                      '    const response = await MyAPI.getData(someId);\n' +
                      '    // ...\n' +
                      '  }\n' +
                      '  fetchData();\n' +
                      "}, [someId]); // Or [] if effect doesn't need props or state\n\n" +
                      'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                  } else {
                    addendum = ' You returned: ' + _destroy;
                  }
                  warningWithoutStack$1(
                    false,
                    'An effect function must not return anything besides a function, ' +
                      'which is used for clean-up.%s%s',
                    addendum,
                    getStackByFiberInDevAndProd(finishedWork),
                  );
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveHookEffects(finishedWork) {
        if ((finishedWork.effectTag & Passive) !== NoEffect) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
              commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
              break;
            }
          }
        }
      }
      function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount');
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps)
                      ? warning$1(
                          false,
                          'Expected %s props to match memoized props before ' +
                            'componentDidMount. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                    !(instance.state === finishedWork.memoizedState)
                      ? warning$1(
                          false,
                          'Expected %s state to match memoized state before ' +
                            'componentDidMount. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps =
                  finishedWork.elementType === finishedWork.type
                    ? current$$1.memoizedProps
                    : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate');
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps)
                      ? warning$1(
                          false,
                          'Expected %s props to match memoized props before ' +
                            'componentDidUpdate. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                    !(instance.state === finishedWork.memoizedState)
                      ? warning$1(
                          false,
                          'Expected %s state to match memoized state before ' +
                            'componentDidUpdate. ' +
                            'This might either be because of a bug in React, or because ' +
                            'a component reassigns its own `this.props`. ' +
                            'Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance',
                        )
                      : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance.props === finishedWork.memoizedProps)
                    ? warning$1(
                        false,
                        'Expected %s props to match memoized props before ' +
                          'processing the update queue. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.props`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance',
                      )
                    : void 0;
                  !(instance.state === finishedWork.memoizedState)
                    ? warning$1(
                        false,
                        'Expected %s state to match memoized state before ' +
                          'processing the update queue. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.props`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance',
                      )
                    : void 0;
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            return;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            return;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            return;
          }
          case HostText: {
            return;
          }
          case HostPortal: {
            return;
          }
          case Profiler: {
            {
              var onRender = finishedWork.memoizedProps.onRender;
              if (typeof onRender === 'function') {
                {
                  onRender(
                    finishedWork.memoizedProps.id,
                    current$$1 === null ? 'mount' : 'update',
                    finishedWork.actualDuration,
                    finishedWork.treeBaseDuration,
                    finishedWork.actualStartTime,
                    getCommitTime(),
                    finishedRoot.memoizedInteractions,
                  );
                }
              }
            }
            return;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
            return;
          default: {
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;
              if (isHidden) {
                hideInstance(instance);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;
              if (isHidden) {
                hideTextInstance(_instance3);
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if (
              node.tag === SuspenseComponent &&
              node.memoizedState !== null &&
              node.memoizedState.dehydrated === null
            ) {
              var fallbackChildFragment = node.child.sibling;
              fallbackChildFragment.return = node;
              node = fallbackChildFragment;
              continue;
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === 'function') {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty('current')) {
                warningWithoutStack$1(
                  false,
                  'Unexpected ref object provided for %s. ' +
                    'Use either a ref-setter function or React.createRef().%s',
                  getComponentName(finishedWork.type),
                  getStackByFiberInDevAndProd(finishedWork),
                );
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function commitDetachRef(current$$1) {
        var currentRef = current$$1.ref;
        if (currentRef !== null) {
          if (typeof currentRef === 'function') {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }
      function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
        onCommitUnmount(current$$1);
        switch (current$$1.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            var updateQueue = current$$1.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                runWithPriority$2(priorityLevel, function () {
                  var effect = firstEffect;
                  do {
                    var destroy = effect.destroy;
                    if (destroy !== undefined) {
                      safelyCallDestroy(current$$1, destroy);
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                });
              }
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;
            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }
            return;
          }
          case HostComponent: {
            safelyDetachRef(current$$1);
            return;
          }
          case HostPortal: {
            {
              unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
            }
            return;
          }
          case FundamentalComponent: {
            return;
          }
          case DehydratedFragment: {
            return;
          }
        }
      }
      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;
        while (true) {
          commitUnmount(finishedRoot, node, renderPriorityLevel);
          if (node.child !== null && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === root) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function detachFiber(current$$1) {
        var alternate = current$$1.alternate;
        current$$1.return = null;
        current$$1.child = null;
        current$$1.memoizedState = null;
        current$$1.updateQueue = null;
        current$$1.dependencies = null;
        current$$1.alternate = null;
        current$$1.firstEffect = null;
        current$$1.lastEffect = null;
        current$$1.pendingProps = null;
        current$$1.memoizedProps = null;
        if (alternate !== null) {
          detachFiber(alternate);
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        (function () {
          {
            {
              throw ReactError(
                Error(
                  'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings: while (true) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.effectTag & Placement) {
              continue siblings;
            }
            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child.return = node;
              node = node.child;
            }
          }
          if (!(node.effectTag & Placement)) {
            return node.stateNode;
          }
        }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;
          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case FundamentalComponent:
          default:
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
        }
        if (parentFiber.effectTag & ContentReset) {
          resetTextContent(parent);
          parentFiber.effectTag &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        var node = finishedWork;
        while (true) {
          var isHost = node.tag === HostComponent || node.tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              if (isContainer) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                insertBefore(parent, stateNode, before);
              }
            } else {
              if (isContainer) {
                appendChildToContainer(parent, stateNode);
              } else {
                appendChild(parent, stateNode);
              }
            }
          } else if (node.tag === HostPortal);
          else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
        var node = current$$1;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;
        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;
            findParent: while (true) {
              (function () {
                if (!(parent !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
              var parentStateNode = parent.stateNode;
              switch (parent.tag) {
                case HostComponent:
                  currentParent = parentStateNode;
                  currentParentIsContainer = false;
                  break findParent;
                case HostRoot:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
                case HostPortal:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
              }
              parent = parent.return;
            }
            currentParentIsValid = true;
          }
          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }
          if (node === current$$1) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === current$$1) {
              return;
            }
            node = node.return;
            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
        {
          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
        }
        detachFiber(current$$1);
      }
      function commitWork(current$$1, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }
          case ClassComponent: {
            return;
          }
          case HostComponent: {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              var newProps = finishedWork.memoizedProps;
              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type;
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps);
              }
            }
            return;
          }
          case HostText: {
            (function () {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw ReactError(
                    Error(
                      'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
          case HostRoot: {
            {
              var _root = finishedWork.stateNode;
              if (_root.hydrate) {
                _root.hydrate = false;
                commitHydratedContainer(_root.containerInfo);
              }
            }
            return;
          }
          case Profiler: {
            return;
          }
          case SuspenseComponent: {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case SuspenseListComponent: {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case IncompleteClassComponent: {
            return;
          }
          case FundamentalComponent: {
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            (function () {
              {
                {
                  throw ReactError(
                    Error(
                      'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                    ),
                  );
                }
              }
            })();
          }
        }
      }
      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        var newDidTimeout;
        var primaryChildParent = finishedWork;
        if (newState === null) {
          newDidTimeout = false;
        } else {
          newDidTimeout = true;
          primaryChildParent = finishedWork.child;
          markCommitTimeOfFallback();
        }
        if (primaryChildParent !== null) {
          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current$$1 = finishedWork.alternate;
          if (current$$1 !== null) {
            var prevState = current$$1.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var thenables = finishedWork.updateQueue;
        if (thenables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          thenables.forEach(function (thenable) {
            var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
            if (!retryCache.has(thenable)) {
              {
                if (thenable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing$1.unstable_wrap(retry);
                }
              }
              retryCache.add(thenable);
              thenable.then(retry, retry);
            }
          });
        }
      }
      function commitResetTextContent(current$$1) {
        resetTextContent(current$$1.stateNode);
      }
      var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null,
        };
        var error = errorInfo.value;
        update.callback = function () {
          onUncaughtError(error);
          logError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
          var error = errorInfo.value;
          update.payload = function () {
            logError(fiber, errorInfo);
            return getDerivedStateFromError(error);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            if (typeof getDerivedStateFromError !== 'function') {
              markLegacyErrorBoundaryAsFailed(this);
              logError(fiber, errorInfo);
            }
            var error = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error, {
              componentStack: stack !== null ? stack : '',
            });
            {
              if (typeof getDerivedStateFromError !== 'function') {
                !(fiber.expirationTime === Sync)
                  ? warningWithoutStack$1(
                      false,
                      '%s: Error boundaries should implement getDerivedStateFromError(). ' +
                        'In that method, return a state update to display an error message or fallback UI.',
                      getComponentName(fiber.type) || 'Unknown',
                    )
                  : void 0;
              }
            }
          };
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }
        return update;
      }
      function attachPingListener(root, renderExpirationTime, thenable) {
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        } else {
          threadIDs = pingCache.get(thenable);
          if (threadIDs === undefined) {
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          }
        }
        if (!threadIDs.has(renderExpirationTime)) {
          threadIDs.add(renderExpirationTime);
          var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
          thenable.then(ping, ping);
        }
      }
      function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
        sourceFiber.effectTag |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
          var thenable = value;
          checkForWrongSuspensePriorityInDEV(sourceFiber);
          var hasInvisibleParentBoundary = hasSuspenseContext(
            suspenseStackCursor.current,
            InvisibleParentSuspenseContext,
          );
          var _workInProgress = returnFiber;
          do {
            if (
              _workInProgress.tag === SuspenseComponent &&
              shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)
            ) {
              var thenables = _workInProgress.updateQueue;
              if (thenables === null) {
                var updateQueue = new Set();
                updateQueue.add(thenable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                thenables.add(thenable);
              }
              if ((_workInProgress.mode & BatchedMode) === NoMode) {
                _workInProgress.effectTag |= DidCapture;
                sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(Sync, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }
                sourceFiber.expirationTime = Sync;
                return;
              }
              attachPingListener(root, renderExpirationTime, thenable);
              _workInProgress.effectTag |= ShouldCapture;
              _workInProgress.expirationTime = renderExpirationTime;
              return;
            }
            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);
          value = new Error(
            (getComponentName(sourceFiber.type) || 'A React component') +
              ' suspended while rendering, but no fallback UI was specified.\n' +
              '\n' +
              'Add a <Suspense fallback=...> component higher in the tree to ' +
              'provide a loading indicator or placeholder to display.' +
              getStackByFiberInDevAndProd(sourceFiber),
          );
        }
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
          switch (workInProgress.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;
              var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress.type;
              var instance = workInProgress.stateNode;
              if (
                (workInProgress.effectTag & DidCapture) === NoEffect &&
                (typeof ctor.getDerivedStateFromError === 'function' ||
                  (instance !== null &&
                    typeof instance.componentDidCatch === 'function' &&
                    !isAlreadyFailedLegacyErrorBoundary(instance)))
              ) {
                workInProgress.effectTag |= ShouldCapture;
                workInProgress.expirationTime = renderExpirationTime;
                var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
                enqueueCapturedUpdate(workInProgress, _update2);
                return;
              }
              break;
          }
          workInProgress = workInProgress.return;
        } while (workInProgress !== null);
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
      var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var EventContext = 2;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootLocked = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var renderExpirationTime = NoWork;
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootLatestProcessedExpirationTime = Sync;
      var workInProgressRootLatestSuspenseTimeout = Sync;
      var workInProgressRootCanSuspendUsingConfig = null;
      var workInProgressRootNextUnprocessedUpdateTime = NoWork;
      var workInProgressRootHasPendingPing = false;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority;
      var pendingPassiveEffectsExpirationTime = NoWork;
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var interruptedBy = null;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoWork;
      function requestCurrentTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return msToExpirationTime(now());
        }
        if (currentEventTime !== NoWork) {
          return currentEventTime;
        }
        currentEventTime = msToExpirationTime(now());
        return currentEventTime;
      }
      function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
        var mode = fiber.mode;
        if ((mode & BatchedMode) === NoMode) {
          return Sync;
        }
        var priorityLevel = getCurrentPriorityLevel();
        if ((mode & ConcurrentMode) === NoMode) {
          return priorityLevel === ImmediatePriority ? Sync : Batched;
        }
        if ((executionContext & RenderContext) !== NoContext) {
          return renderExpirationTime;
        }
        var expirationTime;
        if (suspenseConfig !== null) {
          expirationTime = computeSuspenseExpiration(
            currentTime,
            suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION,
          );
        } else {
          switch (priorityLevel) {
            case ImmediatePriority:
              expirationTime = Sync;
              break;
            case UserBlockingPriority$2:
              expirationTime = computeInteractiveExpiration(currentTime);
              break;
            case NormalPriority:
            case LowPriority:
              expirationTime = computeAsyncExpiration(currentTime);
              break;
            case IdlePriority:
              expirationTime = Idle;
              break;
            default:
              (function () {
                {
                  {
                    throw ReactError(Error('Expected a valid priority level'));
                  }
                }
              })();
          }
        }
        if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
          expirationTime -= 1;
        }
        return expirationTime;
      }
      var lastUniqueAsyncExpiration = NoWork;
      function computeUniqueAsyncExpiration() {
        var currentTime = requestCurrentTime();
        var result = computeAsyncExpiration(currentTime);
        if (result <= lastUniqueAsyncExpiration) {
          result -= 1;
        }
        lastUniqueAsyncExpiration = result;
        return result;
      }
      function scheduleUpdateOnFiber(fiber, expirationTime) {
        checkForNestedUpdates();
        warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
        var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return;
        }
        checkForInterruption(fiber, expirationTime);
        recordScheduleUpdate();
        var priorityLevel = getCurrentPriorityLevel();
        if (expirationTime === Sync) {
          if (
            (executionContext & LegacyUnbatchedContext) !== NoContext &&
            (executionContext & (RenderContext | CommitContext)) === NoContext
          ) {
            schedulePendingInteractions(root, expirationTime);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, expirationTime);
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        } else {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, expirationTime);
        }
        if (
          (executionContext & DiscreteEventContext) !== NoContext &&
          (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority)
        ) {
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
          } else {
            var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
            if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
              rootsWithPendingDiscreteUpdates.set(root, expirationTime);
            }
          }
        }
      }
      var scheduleWork = scheduleUpdateOnFiber;
      function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
        if (fiber.expirationTime < expirationTime) {
          fiber.expirationTime = expirationTime;
        }
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < expirationTime) {
          alternate.expirationTime = expirationTime;
        }
        var node = fiber.return;
        var root = null;
        if (node === null && fiber.tag === HostRoot) {
          root = fiber.stateNode;
        } else {
          while (node !== null) {
            alternate = node.alternate;
            if (node.childExpirationTime < expirationTime) {
              node.childExpirationTime = expirationTime;
              if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
            if (node.return === null && node.tag === HostRoot) {
              root = node.stateNode;
              break;
            }
            node = node.return;
          }
        }
        if (root !== null) {
          if (workInProgressRoot === root) {
            markUnprocessedUpdateTime(expirationTime);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspendedAtTime(root, renderExpirationTime);
            }
          }
          markRootUpdatedAtTime(root, expirationTime);
        }
        return root;
      }
      function getNextRootExpirationTimeToWorkOn(root) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime !== NoWork) {
          return lastExpiredTime;
        }
        var firstPendingTime = root.firstPendingTime;
        if (!isRootSuspendedAtTime(root, firstPendingTime)) {
          return firstPendingTime;
        }
        var lastPingedTime = root.lastPingedTime;
        var nextKnownPendingLevel = root.nextKnownPendingLevel;
        return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
      }
      function ensureRootIsScheduled(root) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime !== NoWork) {
          root.callbackExpirationTime = Sync;
          root.callbackPriority = ImmediatePriority;
          root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          return;
        }
        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        var existingCallbackNode = root.callbackNode;
        if (expirationTime === NoWork) {
          if (existingCallbackNode !== null) {
            root.callbackNode = null;
            root.callbackExpirationTime = NoWork;
            root.callbackPriority = NoPriority;
          }
          return;
        }
        var currentTime = requestCurrentTime();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;
          var existingCallbackExpirationTime = root.callbackExpirationTime;
          if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
            return;
          }
          cancelCallback(existingCallbackNode);
        }
        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        var callbackNode;
        if (expirationTime === Sync) {
          callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else {
          callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
            timeout: expirationTimeToMs(expirationTime) - now(),
          });
        }
        root.callbackNode = callbackNode;
      }
      function performConcurrentWorkOnRoot(root, didTimeout) {
        currentEventTime = NoWork;
        if (didTimeout) {
          var currentTime = requestCurrentTime();
          markRootExpiredAtTime(root, currentTime);
          ensureRootIsScheduled(root);
          return null;
        }
        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        if (expirationTime !== NoWork) {
          var originalCallbackNode = root.callbackNode;
          (function () {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw ReactError(Error('Should not already be working.'));
              }
            }
          })();
          flushPassiveEffects();
          if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
            prepareFreshStack(root, expirationTime);
            startWorkOnPendingInteractions(root, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root, expirationTime);
              markRootSuspendedAtTime(root, expirationTime);
              ensureRootIsScheduled(root);
              throw fatalError;
            }
            if (workInProgress !== null) {
              stopInterruptedWorkLoopTimer();
            } else {
              stopFinishedWorkLoopTimer();
              var finishedWork = (root.finishedWork = root.current.alternate);
              root.finishedExpirationTime = expirationTime;
              resolveLocksOnRoot(root, expirationTime);
              finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
            }
            ensureRootIsScheduled(root);
            if (root.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root);
            }
          }
        }
        return null;
      }
      function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
        workInProgressRoot = null;
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored: {
            (function () {
              {
                {
                  throw ReactError(Error('Root did not complete. This is a bug in React.'));
                }
              }
            })();
          }
          case RootErrored: {
            if (expirationTime !== Idle) {
              markRootExpiredAtTime(root, Idle);
              break;
            }
            commitRoot(root);
            break;
          }
          case RootSuspended: {
            markRootSuspendedAtTime(root, expirationTime);
            var lastSuspendedTime = root.lastSuspendedTime;
            if (expirationTime === lastSuspendedTime) {
              root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
            }
            flushSuspensePriorityWarningInDEV();
            var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
            if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                if (workInProgressRootHasPendingPing) {
                  var lastPingedTime = root.lastPingedTime;
                  if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                    root.lastPingedTime = expirationTime;
                    prepareFreshStack(root, expirationTime);
                    break;
                  }
                }
                var nextTime = getNextRootExpirationTimeToWorkOn(root);
                if (nextTime !== NoWork && nextTime !== expirationTime) {
                  break;
                }
                if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                  root.lastPingedTime = lastSuspendedTime;
                  break;
                }
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspendedAtTime(root, expirationTime);
            var _lastSuspendedTime = root.lastSuspendedTime;
            if (expirationTime === _lastSuspendedTime) {
              root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
            }
            flushSuspensePriorityWarningInDEV();
            if (!IsThisRendererActing.current) {
              if (workInProgressRootHasPendingPing) {
                var _lastPingedTime = root.lastPingedTime;
                if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                  root.lastPingedTime = expirationTime;
                  prepareFreshStack(root, expirationTime);
                  break;
                }
              }
              var _nextTime = getNextRootExpirationTimeToWorkOn(root);
              if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                break;
              }
              if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                root.lastPingedTime = _lastSuspendedTime;
                break;
              }
              var _msUntilTimeout;
              if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
              } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                _msUntilTimeout = 0;
              } else {
                var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                var currentTimeMs = now();
                var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                var timeElapsed = currentTimeMs - eventTimeMs;
                if (timeElapsed < 0) {
                  timeElapsed = 0;
                }
                _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                if (timeUntilExpirationMs < _msUntilTimeout) {
                  _msUntilTimeout = timeUntilExpirationMs;
                }
              }
              if (_msUntilTimeout > 10) {
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          case RootCompleted: {
            if (
              !IsThisRendererActing.current &&
              workInProgressRootLatestProcessedExpirationTime !== Sync &&
              workInProgressRootCanSuspendUsingConfig !== null
            ) {
              var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(
                workInProgressRootLatestProcessedExpirationTime,
                expirationTime,
                workInProgressRootCanSuspendUsingConfig,
              );
              if (_msUntilTimeout2 > 10) {
                markRootSuspendedAtTime(root, expirationTime);
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                break;
              }
            }
            commitRoot(root);
            break;
          }
          case RootLocked: {
            markRootSuspendedAtTime(root, expirationTime);
            break;
          }
          default: {
            (function () {
              {
                {
                  throw ReactError(Error('Unknown root exit status.'));
                }
              }
            })();
          }
        }
      }
      function performSyncWorkOnRoot(root) {
        var lastExpiredTime = root.lastExpiredTime;
        var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
        if (root.finishedExpirationTime === expirationTime) {
          commitRoot(root);
        } else {
          (function () {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw ReactError(Error('Should not already be working.'));
              }
            }
          })();
          flushPassiveEffects();
          if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
            prepareFreshStack(root, expirationTime);
            startWorkOnPendingInteractions(root, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root, expirationTime);
              markRootSuspendedAtTime(root, expirationTime);
              ensureRootIsScheduled(root);
              throw fatalError;
            }
            if (workInProgress !== null) {
              (function () {
                {
                  {
                    throw ReactError(
                      Error(
                        'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
            } else {
              stopFinishedWorkLoopTimer();
              root.finishedWork = root.current.alternate;
              root.finishedExpirationTime = expirationTime;
              resolveLocksOnRoot(root, expirationTime);
              finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
            }
            ensureRootIsScheduled(root);
          }
        }
        return null;
      }
      function finishSyncRender(root, exitStatus, expirationTime) {
        if (exitStatus === RootLocked) {
          markRootSuspendedAtTime(root, expirationTime);
        } else {
          workInProgressRoot = null;
          {
            if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
              flushSuspensePriorityWarningInDEV();
            }
          }
          commitRoot(root);
        }
      }
      function flushRoot(root, expirationTime) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.',
                  ),
                );
              }
            }
          })();
        }
        markRootExpiredAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        flushSyncCallbackQueue();
      }
      function flushDiscreteUpdates() {
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
          if ((executionContext & RenderContext) !== NoContext) {
            warning$1(
              false,
              'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.',
            );
          }
          return;
        }
        flushPendingDiscreteUpdates();
        flushPassiveEffects();
      }
      function resolveLocksOnRoot(root, expirationTime) {
        var firstBatch = root.firstBatch;
        if (firstBatch !== null && firstBatch._defer && firstBatch._expirationTime >= expirationTime) {
          scheduleCallback(NormalPriority, function () {
            firstBatch._onComplete();
            return null;
          });
          workInProgressRootExitStatus = RootLocked;
        }
      }
      function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
          var roots = rootsWithPendingDiscreteUpdates;
          rootsWithPendingDiscreteUpdates = null;
          roots.forEach(function (expirationTime, root) {
            markRootExpiredAtTime(root, expirationTime);
            ensureRootIsScheduled(root);
          });
          flushSyncCallbackQueue();
        }
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function discreteUpdates$1(fn, a, b, c) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
          return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function flushSync(fn, a) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.',
                  ),
                );
              }
            }
          })();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return runWithPriority$2(ImmediatePriority, fn.bind(null, a));
        } finally {
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
        }
      }
      function flushControlled(fn) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          runWithPriority$2(ImmediatePriority, fn);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }
      function prepareFreshStack(root, expirationTime) {
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null);
        renderExpirationTime = expirationTime;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootLatestProcessedExpirationTime = Sync;
        workInProgressRootLatestSuspenseTimeout = Sync;
        workInProgressRootCanSuspendUsingConfig = null;
        workInProgressRootNextUnprocessedUpdateTime = NoWork;
        workInProgressRootHasPendingPing = false;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
          componentsThatTriggeredHighPriSuspend = null;
        }
      }
      function handleError(root, thrownValue) {
        do {
          try {
            resetContextDependencies();
            resetHooks();
            if (workInProgress === null || workInProgress.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              return null;
            }
            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
            }
            throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
            workInProgress = completeUnitOfWork(workInProgress);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher(root) {
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
      function pushInteractions(root) {
        {
          var prevInteractions = tracing$1.__interactionsRef.current;
          tracing$1.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
      }
      function popInteractions(prevInteractions) {
        {
          tracing$1.__interactionsRef.current = prevInteractions;
        }
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
        if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
          workInProgressRootLatestProcessedExpirationTime = expirationTime;
        }
        if (suspenseConfig !== null) {
          if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
            workInProgressRootLatestSuspenseTimeout = expirationTime;
            workInProgressRootCanSuspendUsingConfig = suspenseConfig;
          }
        }
      }
      function markUnprocessedUpdateTime(expirationTime) {
        if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
          workInProgressRootNextUnprocessedUpdateTime = expirationTime;
        }
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
          markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
          markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
        }
      }
      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }
      function inferTimeFromExpirationTime(expirationTime) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
      }
      function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current$$1 = unitOfWork.alternate;
        startWorkTimer(unitOfWork);
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          next = completeUnitOfWork(unitOfWork);
        }
        ReactCurrentOwner$2.current = null;
        return next;
      }
      function completeUnitOfWork(unitOfWork) {
        workInProgress = unitOfWork;
        do {
          var current$$1 = workInProgress.alternate;
          var returnFiber = workInProgress.return;
          if ((workInProgress.effectTag & Incomplete) === NoEffect) {
            setCurrentFiber(workInProgress);
            var next = void 0;
            if ((workInProgress.mode & ProfileMode) === NoMode) {
              next = completeWork(current$$1, workInProgress, renderExpirationTime);
            } else {
              startProfilerTimer(workInProgress);
              next = completeWork(current$$1, workInProgress, renderExpirationTime);
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
            stopWorkTimer(workInProgress);
            resetCurrentFiber();
            resetChildExpirationTime(workInProgress);
            if (next !== null) {
              return next;
            }
            if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }
              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }
                returnFiber.lastEffect = workInProgress.lastEffect;
              }
              var effectTag = workInProgress.effectTag;
              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }
                returnFiber.lastEffect = workInProgress;
              }
            }
          } else {
            var _next = unwindWork(workInProgress);
            if ((workInProgress.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              var actualDuration = workInProgress.actualDuration;
              var child = workInProgress.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              workInProgress.actualDuration = actualDuration;
            }
            if (_next !== null) {
              stopFailedWorkTimer(workInProgress);
              _next.effectTag &= HostEffectMask;
              return _next;
            }
            stopWorkTimer(workInProgress);
            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.effectTag |= Incomplete;
            }
          }
          var siblingFiber = workInProgress.sibling;
          if (siblingFiber !== null) {
            return siblingFiber;
          }
          workInProgress = returnFiber;
        } while (workInProgress !== null);
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
        return null;
      }
      function getRemainingExpirationTime(fiber) {
        var updateExpirationTime = fiber.expirationTime;
        var childExpirationTime = fiber.childExpirationTime;
        return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
      }
      function resetChildExpirationTime(completedWork) {
        if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
          return;
        }
        var newChildExpirationTime = NoWork;
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations =
            completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;
          while (child !== null) {
            var childUpdateExpirationTime = child.expirationTime;
            var childChildExpirationTime = child.childExpirationTime;
            if (childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childUpdateExpirationTime;
            }
            if (childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childChildExpirationTime;
            }
            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            var _childUpdateExpirationTime = _child.expirationTime;
            var _childChildExpirationTime = _child.childExpirationTime;
            if (_childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childUpdateExpirationTime;
            }
            if (_childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childChildExpirationTime;
            }
            _child = _child.sibling;
          }
        }
        completedWork.childExpirationTime = newChildExpirationTime;
      }
      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$2(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }
      function commitRootImpl(root, renderPriorityLevel) {
        flushPassiveEffects();
        flushRenderPhaseStrictModeWarningsInDEV();
        (function () {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw ReactError(Error('Should not already be working.'));
            }
          }
        })();
        var finishedWork = root.finishedWork;
        var expirationTime = root.finishedExpirationTime;
        if (finishedWork === null) {
          return null;
        }
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        (function () {
          if (!(finishedWork !== root.current)) {
            {
              throw ReactError(
                Error(
                  'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.',
                ),
              );
            }
          }
        })();
        root.callbackNode = null;
        root.callbackExpirationTime = NoWork;
        root.callbackPriority = NoPriority;
        root.nextKnownPendingLevel = NoWork;
        startCommitTimer();
        var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
        markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);
        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          renderExpirationTime = NoWork;
        }
        var firstEffect;
        if (finishedWork.effectTag > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }
        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$2.current = null;
          startCommitSnapshotEffectsTimer();
          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);
              if (hasCaughtError()) {
                (function () {
                  if (!(nextEffect !== null)) {
                    {
                      throw ReactError(Error('Should be working on an effect.'));
                    }
                  }
                })();
                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
              if (hasCaughtError()) {
                (function () {
                  if (!(nextEffect !== null)) {
                    {
                      throw ReactError(Error('Should be working on an effect.'));
                    }
                  }
                })();
                var _error = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          startCommitLifeCyclesTimer();
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
              if (hasCaughtError()) {
                (function () {
                  if (!(nextEffect !== null)) {
                    {
                      throw ReactError(Error('Should be working on an effect.'));
                    }
                  }
                })();
                var _error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          stopCommitLifeCyclesTimer();
          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          startCommitSnapshotEffectsTimer();
          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          stopCommitHostEffectsTimer();
          startCommitLifeCyclesTimer();
          stopCommitLifeCyclesTimer();
        }
        stopCommitTimer();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsExpirationTime = expirationTime;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;
          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = nextNextEffect;
          }
        }
        var remainingExpirationTime = root.firstPendingTime;
        if (remainingExpirationTime !== NoWork) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;
              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }
            schedulePendingInteractions(root, remainingExpirationTime);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, expirationTime);
          }
        }
        if (remainingExpirationTime === Sync) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }
        onCommitRoot(finishedWork.stateNode, expirationTime);
        ensureRootIsScheduled(root);
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }
        flushSyncCallbackQueue();
        return null;
      }
      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;
          if ((effectTag & Snapshot) !== NoEffect) {
            setCurrentFiber(nextEffect);
            recordEffect();
            var current$$1 = nextEffect.alternate;
            commitBeforeMutationLifeCycles(current$$1, nextEffect);
            resetCurrentFiber();
          }
          if ((effectTag & Passive) !== NoEffect) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;
          if (effectTag & ContentReset) {
            commitResetTextContent(nextEffect);
          }
          if (effectTag & Ref) {
            var current$$1 = nextEffect.alternate;
            if (current$$1 !== null) {
              commitDetachRef(current$$1);
            }
          }
          var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
          switch (primaryEffectTag) {
            case Placement: {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              break;
            }
            case PlacementAndUpdate: {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
            case Hydrating: {
              nextEffect.effectTag &= ~Hydrating;
              break;
            }
            case HydratingAndUpdate: {
              nextEffect.effectTag &= ~Hydrating;
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
            case Update: {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
            case Deletion: {
              commitDeletion(root, nextEffect, renderPriorityLevel);
              break;
            }
          }
          recordEffect();
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitLayoutEffects(root, committedExpirationTime) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;
          if (effectTag & (Update | Callback)) {
            recordEffect();
            var current$$1 = nextEffect.alternate;
            commitLifeCycles(root, current$$1, nextEffect);
          }
          if (effectTag & Ref) {
            recordEffect();
            commitAttachRef(nextEffect);
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority) {
          var priorityLevel =
            pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority;
          return runWithPriority$2(priorityLevel, flushPassiveEffectsImpl);
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var root = rootWithPendingPassiveEffects;
        var expirationTime = pendingPassiveEffectsExpirationTime;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsExpirationTime = NoWork;
        (function () {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw ReactError(Error('Cannot flush passive effects while already rendering.'));
            }
          }
        })();
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        var effect = root.current.firstEffect;
        while (effect !== null) {
          {
            setCurrentFiber(effect);
            invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
            if (hasCaughtError()) {
              (function () {
                if (!(effect !== null)) {
                  {
                    throw ReactError(Error('Should be working on an effect.'));
                  }
                }
              })();
              var error = clearCaughtError();
              captureCommitPhaseError(effect, error);
            }
            resetCurrentFiber();
          }
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;
          effect = nextNextEffect;
        }
        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, expirationTime);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
        enqueueUpdate(rootFiber, update);
        var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }
      }
      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }
        var fiber = sourceFiber.return;
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (
              typeof ctor.getDerivedStateFromError === 'function' ||
              (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))
            ) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, Sync);
              enqueueUpdate(fiber, update);
              var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
              if (root !== null) {
                ensureRootIsScheduled(root);
                schedulePendingInteractions(root, Sync);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
      }
      function pingSuspendedRoot(root, thenable, suspendedTime) {
        var pingCache = root.pingCache;
        if (pingCache !== null) {
          pingCache.delete(thenable);
        }
        if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
          if (
            workInProgressRootExitStatus === RootSuspendedWithDelay ||
            (workInProgressRootExitStatus === RootSuspended &&
              workInProgressRootLatestProcessedExpirationTime === Sync &&
              now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
          ) {
            prepareFreshStack(root, renderExpirationTime);
          } else {
            workInProgressRootHasPendingPing = true;
          }
          return;
        }
        if (!isRootSuspendedAtTime(root, suspendedTime)) {
          return;
        }
        var lastPingedTime = root.lastPingedTime;
        if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
          return;
        }
        root.lastPingedTime = suspendedTime;
        if (root.finishedExpirationTime === suspendedTime) {
          root.finishedExpirationTime = NoWork;
          root.finishedWork = null;
        }
        ensureRootIsScheduled(root);
        schedulePendingInteractions(root, suspendedTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryTime) {
        if (retryTime === Never) {
          var suspenseConfig = null;
          var currentTime = requestCurrentTime();
          retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
        }
        var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, retryTime);
        }
      }
      function resolveRetryThenable(boundaryFiber, thenable) {
        var retryTime = Never;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }
        if (retryCache !== null) {
          retryCache.delete(thenable);
        }
        retryTimedOutBoundary(boundaryFiber, retryTime);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120
          ? 120
          : timeElapsed < 480
          ? 480
          : timeElapsed < 1080
          ? 1080
          : timeElapsed < 1920
          ? 1920
          : timeElapsed < 3000
          ? 3000
          : timeElapsed < 4320
          ? 4320
          : ceil(timeElapsed / 1960) * 1960;
      }
      function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
        var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
        if (busyMinDurationMs <= 0) {
          return 0;
        }
        var busyDelayMs = suspenseConfig.busyDelayMs | 0;
        var currentTimeMs = now();
        var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
        var timeElapsed = currentTimeMs - eventTimeMs;
        if (timeElapsed <= busyDelayMs) {
          return 0;
        }
        var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
        return msUntilTimeout;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          (function () {
            {
              {
                throw ReactError(
                  Error(
                    'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.',
                  ),
                );
              }
            }
          })();
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            warning$1(
              false,
              'Maximum update depth exceeded. This can happen when a component ' +
                "calls setState inside useEffect, but useEffect either doesn't " +
                'have a dependency array, or one of the dependencies changes on ' +
                'every render.',
            );
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function stopFinishedWorkLoopTimer() {
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }
      function stopInterruptedWorkLoopTimer() {
        var didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }
      function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
        if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
          interruptedBy = fiberThatReceivedUpdate;
        }
      }
      var didWarnStateUpdateForUnmountedComponent = null;
      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;
          if (
            tag !== HostRoot &&
            tag !== ClassComponent &&
            tag !== FunctionComponent &&
            tag !== ForwardRef &&
            tag !== MemoComponent &&
            tag !== SimpleMemoComponent
          ) {
            return;
          }
          var componentName = getComponentName(fiber.type) || 'ReactComponent';
          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }
          warningWithoutStack$1(
            false,
            "Can't perform a React state update on an unmounted component. This " +
              'is a no-op, but it indicates a memory leak in your application. To ' +
              'fix, cancel all subscriptions and asynchronous tasks in %s.%s',
            tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function',
            getStackByFiberInDevAndProd(fiber),
          );
        }
      }
      var beginWork$$1;
      {
        var dummyFiber = null;
        beginWork$$1 = function (current$$1, unitOfWork, expirationTime) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork$1(current$$1, unitOfWork, expirationTime);
          } catch (originalError) {
            if (
              originalError !== null &&
              typeof originalError === 'object' &&
              typeof originalError.then === 'function'
            ) {
              throw originalError;
            }
            resetContextDependencies();
            resetHooks();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInGetChildContext = false;
      function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
        {
          if (fiber.tag === ClassComponent) {
            switch (phase) {
              case 'getChildContext':
                if (didWarnAboutUpdateInGetChildContext) {
                  return;
                }
                warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
                didWarnAboutUpdateInGetChildContext = true;
                break;
              case 'render':
                if (didWarnAboutUpdateInRender) {
                  return;
                }
                warningWithoutStack$1(
                  false,
                  'Cannot update during an existing state transition (such as ' +
                    'within `render`). Render methods should be a pure function of ' +
                    'props and state.',
                );
                didWarnAboutUpdateInRender = true;
                break;
            }
          }
        }
      }
      var IsThisRendererActing = {
        current: false,
      };
      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            warningWithoutStack$1(
              false,
              "It looks like you're using the wrong act() around your test interactions.\n" +
                'Be sure to use the matching version of act() corresponding to your renderer:\n\n' +
                '// for react-dom:\n' +
                "import {act} from 'react-dom/test-utils';\n" +
                '// ...\n' +
                'act(() => ...);\n\n' +
                '// for react-test-renderer:\n' +
                "import TestRenderer from 'react-test-renderer';\n" +
                'const {act} = TestRenderer;\n' +
                '// ...\n' +
                'act(() => ...);' +
                '%s',
              getStackByFiberInDevAndProd(fiber),
            );
          }
        }
      }
      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if (
            (fiber.mode & StrictMode) !== NoMode &&
            IsSomeRendererActing.current === false &&
            IsThisRendererActing.current === false
          ) {
            warningWithoutStack$1(
              false,
              'An update to %s ran an effect, but was not wrapped in act(...).\n\n' +
                'When testing, code that causes React state updates should be ' +
                'wrapped into act(...):\n\n' +
                'act(() => {\n' +
                '  /* fire events that update state */\n' +
                '});\n' +
                '/* assert on the output */\n\n' +
                "This ensures that you're testing the behavior the user would see " +
                'in the browser.' +
                ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                '%s',
              getComponentName(fiber.type),
              getStackByFiberInDevAndProd(fiber),
            );
          }
        }
      }
      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (
            executionContext === NoContext &&
            IsSomeRendererActing.current === false &&
            IsThisRendererActing.current === false
          ) {
            warningWithoutStack$1(
              false,
              'An update to %s inside a test was not wrapped in act(...).\n\n' +
                'When testing, code that causes React state updates should be ' +
                'wrapped into act(...):\n\n' +
                'act(() => {\n' +
                '  /* fire events that update state */\n' +
                '});\n' +
                '/* assert on the output */\n\n' +
                "This ensures that you're testing the behavior the user would see " +
                'in the browser.' +
                ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                '%s',
              getComponentName(fiber.type),
              getStackByFiberInDevAndProd(fiber),
            );
          }
        }
      }
      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;
      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BatchedMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              warningWithoutStack$1(
                false,
                'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' +
                  'to guarantee consistent behaviour across tests and browsers. ' +
                  'For example, with jest: \n' +
                  "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" +
                  'For more info, visit https://fb.me/react-mock-scheduler',
              );
            }
          }
        }
      }
      var componentsThatTriggeredHighPriSuspend = null;
      function checkForWrongSuspensePriorityInDEV(sourceFiber) {
        {
          var currentPriorityLevel = getCurrentPriorityLevel();
          if (
            (sourceFiber.mode & ConcurrentMode) !== NoEffect &&
            (currentPriorityLevel === UserBlockingPriority$2 || currentPriorityLevel === ImmediatePriority)
          ) {
            var workInProgressNode = sourceFiber;
            while (workInProgressNode !== null) {
              var current$$1 = workInProgressNode.alternate;
              if (current$$1 !== null) {
                switch (workInProgressNode.tag) {
                  case ClassComponent:
                    var updateQueue = current$$1.updateQueue;
                    if (updateQueue !== null) {
                      var update = updateQueue.firstUpdate;
                      while (update !== null) {
                        var priorityLevel = update.priority;
                        if (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority) {
                          if (componentsThatTriggeredHighPriSuspend === null) {
                            componentsThatTriggeredHighPriSuspend = new Set([
                              getComponentName(workInProgressNode.type),
                            ]);
                          } else {
                            componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                          }
                          break;
                        }
                        update = update.next;
                      }
                    }
                    break;
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent:
                    if (
                      workInProgressNode.memoizedState !== null &&
                      workInProgressNode.memoizedState.baseUpdate !== null
                    ) {
                      var _update = workInProgressNode.memoizedState.baseUpdate;
                      while (_update !== null) {
                        var priority = _update.priority;
                        if (priority === UserBlockingPriority$2 || priority === ImmediatePriority) {
                          if (componentsThatTriggeredHighPriSuspend === null) {
                            componentsThatTriggeredHighPriSuspend = new Set([
                              getComponentName(workInProgressNode.type),
                            ]);
                          } else {
                            componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                          }
                          break;
                        }
                        if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                          break;
                        }
                        _update = _update.next;
                      }
                    }
                    break;
                }
              }
              workInProgressNode = workInProgressNode.return;
            }
          }
        }
      }
      function flushSuspensePriorityWarningInDEV() {
        {
          if (componentsThatTriggeredHighPriSuspend !== null) {
            var componentNames = [];
            componentsThatTriggeredHighPriSuspend.forEach(function (name) {
              return componentNames.push(name);
            });
            componentsThatTriggeredHighPriSuspend = null;
            if (componentNames.length > 0) {
              warningWithoutStack$1(
                false,
                '%s triggered a user-blocking update that suspended.' +
                  '\n\n' +
                  'The fix is to split the update into multiple parts: a user-blocking ' +
                  'update to provide immediate feedback, and another update that ' +
                  'triggers the bulk of the changes.' +
                  '\n\n' +
                  'Refer to the documentation for useSuspenseTransition to learn how ' +
                  'to implement this pattern.',
                componentNames.sort().join(', '),
              );
            }
          }
        }
      }
      function computeThreadID(root, expirationTime) {
        return expirationTime * 1000 + root.interactionThreadID;
      }
      function markSpawnedWork(expirationTime) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [expirationTime];
        } else {
          spawnedWorkDuringRender.push(expirationTime);
        }
      }
      function scheduleInteractions(root, expirationTime, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(expirationTime);
          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }
              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(expirationTime, new Set(interactions));
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }
          var subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }
      function schedulePendingInteractions(root, expirationTime) {
        scheduleInteractions(root, expirationTime, tracing$1.__interactionsRef.current);
      }
      function startWorkOnPendingInteractions(root, expirationTime) {
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime >= expirationTime) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;
        if (interactions.size > 0) {
          var subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        }
      }
      function finishPendingInteractions(root, committedExpirationTime) {
        var earliestRemainingTimeAfterCommit = root.firstPendingTime;
        var subscriber;
        try {
          subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedExpirationTime);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority, function () {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority, function () {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }
      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            warningWithoutStack$1(
              false,
              'The installed version of React DevTools is too old and will not work ' +
                'with the current version of React. Please update React DevTools. ' +
                'https://fb.me/react-devtools',
            );
          }
          return true;
        }
        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = function (root, expirationTime) {
            try {
              var didError = (root.current.effectTag & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var currentTime = requestCurrentTime();
                var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                hook.onCommitFiberRoot(rendererID, root, undefined, didError);
              }
            } catch (err) {
              if (true && !hasLoggedError) {
                hasLoggedError = true;
                warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
              }
            }
          };
          onCommitFiberUnmount = function (fiber) {
            try {
              hook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              if (true && !hasLoggedError) {
                hasLoggedError = true;
                warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
              }
            }
          };
        } catch (err) {
          {
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
          }
        }
        return true;
      }
      function onCommitRoot(root, expirationTime) {
        if (typeof onCommitFiberRoot === 'function') {
          onCommitFiberRoot(root, expirationTime);
        }
      }
      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === 'function') {
          onCommitFiberUnmount(fiber);
        }
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugIsCurrentlyTiming = false;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function (tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.elementType = current.elementType;
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          {
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
          }
        }
        workInProgress.childExpirationTime = current.childExpirationTime;
        workInProgress.expirationTime = current.expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies =
          currentDependencies === null
            ? null
            : {
                expirationTime: currentDependencies.expirationTime,
                firstContext: currentDependencies.firstContext,
                responders: currentDependencies.responders,
              };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount;
          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type);
              break;
            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type);
              break;
            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(current.type);
              break;
          }
        }
        return workInProgress;
      }
      function resetWorkInProgress(workInProgress, renderExpirationTime) {
        workInProgress.effectTag &= Placement;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;
        if (current === null) {
          workInProgress.childExpirationTime = NoWork;
          workInProgress.expirationTime = renderExpirationTime;
          workInProgress.child = null;
          workInProgress.memoizedProps = null;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.dependencies = null;
          {
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
          }
        } else {
          workInProgress.childExpirationTime = current.childExpirationTime;
          workInProgress.expirationTime = current.expirationTime;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          var currentDependencies = current.dependencies;
          workInProgress.dependencies =
            currentDependencies === null
              ? null
              : {
                  expirationTime: currentDependencies.expirationTime,
                  firstContext: currentDependencies.firstContext,
                  responders: currentDependencies.responders,
                };
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
        }
        return workInProgress;
      }
      function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BatchedMode | StrictMode;
        } else if (tag === BatchedRoot) {
          mode = BatchedMode | StrictMode;
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber;
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === 'function') {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === 'string') {
          fiberTag = HostComponent;
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
            case REACT_CONCURRENT_MODE_TYPE:
              fiberTag = Mode;
              mode |= ConcurrentMode | BatchedMode | StrictMode;
              break;
            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
            default: {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info = '';
              {
                if (
                  type === undefined ||
                  (typeof type === 'object' && type !== null && Object.keys(type).length === 0)
                ) {
                  info +=
                    ' You likely forgot to export your component from the file ' +
                    "it's defined in, or you might have mixed up default and " +
                    'named imports.';
                }
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              (function () {
                {
                  {
                    throw ReactError(
                      Error(
                        'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ' +
                          (type == null ? type : typeof type) +
                          '.' +
                          info,
                      ),
                    );
                  }
                }
              })();
            }
          }
        }
        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        {
          if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
            warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
      }
      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation,
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.current = null;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.pingCache = null;
        this.finishedExpirationTime = NoWork;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.firstBatch = null;
        this.callbackNode = null;
        this.callbackPriority = NoPriority;
        this.firstPendingTime = NoWork;
        this.firstSuspendedTime = NoWork;
        this.lastSuspendedTime = NoWork;
        this.nextKnownPendingLevel = NoWork;
        this.lastPingedTime = NoWork;
        this.lastExpiredTime = NoWork;
        {
          this.interactionThreadID = tracing$1.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        return root;
      }
      function isRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        return (
          firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime
        );
      }
      function markRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        if (firstSuspendedTime < expirationTime) {
          root.firstSuspendedTime = expirationTime;
        }
        if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
          root.lastSuspendedTime = expirationTime;
        }
        if (expirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }
        if (expirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }
      function markRootUpdatedAtTime(root, expirationTime) {
        var firstPendingTime = root.firstPendingTime;
        if (expirationTime > firstPendingTime) {
          root.firstPendingTime = expirationTime;
        }
        var firstSuspendedTime = root.firstSuspendedTime;
        if (firstSuspendedTime !== NoWork) {
          if (expirationTime >= firstSuspendedTime) {
            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
          } else if (expirationTime >= root.lastSuspendedTime) {
            root.lastSuspendedTime = expirationTime + 1;
          }
          if (expirationTime > root.nextKnownPendingLevel) {
            root.nextKnownPendingLevel = expirationTime;
          }
        }
      }
      function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
        root.firstPendingTime = remainingExpirationTime;
        if (finishedExpirationTime <= root.lastSuspendedTime) {
          root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
        } else if (finishedExpirationTime <= root.firstSuspendedTime) {
          root.firstSuspendedTime = finishedExpirationTime - 1;
        }
        if (finishedExpirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }
        if (finishedExpirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }
      function markRootExpiredAtTime(root, expirationTime) {
        var lastExpiredTime = root.lastExpiredTime;
        if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
          root.lastExpiredTime = expirationTime;
        }
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function scheduleRootUpdate(current$$1, element, expirationTime, suspenseConfig, callback) {
        {
          if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            warningWithoutStack$1(
              false,
              'Render methods should be a pure function of props and state; ' +
                'triggering nested component updates from render is not allowed. ' +
                'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                'Check the render method of %s.',
              getComponentName(current.type) || 'Unknown',
            );
          }
        }
        var update = createUpdate(expirationTime, suspenseConfig);
        update.payload = {
          element: element,
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          !(typeof callback === 'function')
            ? warningWithoutStack$1(
                false,
                'render(...): Expected the last optional `callback` argument to be a ' +
                  'function. Instead received: %s.',
                callback,
              )
            : void 0;
          update.callback = callback;
        }
        enqueueUpdate(current$$1, update);
        scheduleWork(current$$1, expirationTime);
        return expirationTime;
      }
      function updateContainerAtExpirationTime(
        element,
        container,
        parentComponent,
        expirationTime,
        suspenseConfig,
        callback,
      ) {
        var current$$1 = container.current;
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        return scheduleRootUpdate(current$$1, element, expirationTime, suspenseConfig, callback);
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === undefined) {
            if (typeof component.render === 'function') {
              (function () {
                {
                  {
                    throw ReactError(Error('Unable to find node on an unmounted component.'));
                  }
                }
              })();
            } else {
              (function () {
                {
                  {
                    throw ReactError(
                      Error('Argument appears to not be a ReactComponent. Keys: ' + Object.keys(component)),
                    );
                  }
                }
              })();
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              if (fiber.mode & StrictMode) {
                warningWithoutStack$1(
                  false,
                  '%s is deprecated in StrictMode. ' +
                    '%s was passed an instance of %s which is inside StrictMode. ' +
                    'Instead, add a ref directly to the element you want to reference. ' +
                    'Learn more about using refs safely here: ' +
                    'https://fb.me/react-strict-mode-find-node%s',
                  methodName,
                  methodName,
                  componentName,
                  getStackByFiberInDevAndProd(hostFiber),
                );
              } else {
                warningWithoutStack$1(
                  false,
                  '%s is deprecated in StrictMode. ' +
                    '%s was passed an instance of %s which renders StrictMode children. ' +
                    'Instead, add a ref directly to the element you want to reference. ' +
                    'Learn more about using refs safely here: ' +
                    'https://fb.me/react-strict-mode-find-node%s',
                  methodName,
                  methodName,
                  componentName,
                  getStackByFiberInDevAndProd(hostFiber),
                );
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
      }
      function updateContainer(element, container, parentComponent, callback) {
        var current$$1 = container.current;
        var currentTime = requestCurrentTime();
        {
          if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$$1);
            warnIfNotScopedWithMatchingAct(current$$1);
          }
        }
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
        return updateContainerAtExpirationTime(
          element,
          container,
          parentComponent,
          expirationTime,
          suspenseConfig,
          callback,
        );
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.tag === FundamentalComponent) {
          return hostFiber.stateNode.instance;
        }
        return hostFiber.stateNode;
      }
      var shouldSuspendImpl = function (fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideProps = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithSetImpl = function (obj, path, idx, value) {
          if (idx >= path.length) {
            return value;
          }
          var key = path[idx];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
          return updated;
        };
        var copyWithSet = function (obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        overrideHookState = function (fiber, id, path, value) {
          var currentHook = fiber.memoizedState;
          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next;
            id--;
          }
          if (currentHook !== null) {
            var newState = copyWithSet(currentHook.memoizedState, path, value);
            currentHook.memoizedState = newState;
            currentHook.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleWork(fiber, Sync);
          }
        };
        overrideProps = function (fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleWork(fiber, Sync);
        };
        scheduleUpdate = function (fiber) {
          scheduleWork(fiber, Sync);
        };
        setSuspenseHandler = function (newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals(
          _assign({}, devToolsConfig, {
            overrideHookState: overrideHookState,
            overrideProps: overrideProps,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: function (fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function (instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            getCurrentFiber: function () {
              return current;
            },
          }),
        );
      }
      function createPortal$1(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : '' + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation,
        };
      }
      var ReactVersion = '16.10.2';
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      var warnOnInvalidCallback;
      var didWarnAboutUnstableCreatePortal = false;
      {
        if (
          typeof Map !== 'function' ||
          Map.prototype == null ||
          typeof Map.prototype.forEach !== 'function' ||
          typeof Set !== 'function' ||
          Set.prototype == null ||
          typeof Set.prototype.clear !== 'function' ||
          typeof Set.prototype.forEach !== 'function'
        ) {
          warningWithoutStack$1(
            false,
            'React depends on Map and Set built-in types. Make sure that you load a ' +
              'polyfill in older browsers. https://fb.me/react-polyfills',
          );
        }
        topLevelUpdateWarnings = function (container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
              !(hostInstance.parentNode === container)
                ? warningWithoutStack$1(
                    false,
                    'render(...): It looks like the React-rendered content of this ' +
                      'container was removed without using React. This is not ' +
                      'supported and will cause errors. Instead, call ' +
                      'ReactDOM.unmountComponentAtNode to empty a container.',
                  )
                : void 0;
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
          !(!hasNonRootReactChild || isRootRenderedBySomeReact)
            ? warningWithoutStack$1(
                false,
                'render(...): Replacing React-rendered children with a new root ' +
                  'component. If you intended to update the children of this node, ' +
                  'you should instead have the existing children update their state ' +
                  'and render the new components instead of calling ReactDOM.render.',
              )
            : void 0;
          !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY')
            ? warningWithoutStack$1(
                false,
                'render(): Rendering components directly into document.body is ' +
                  'discouraged, since its children are often manipulated by third-party ' +
                  'scripts and browser extensions. This may lead to subtle ' +
                  'reconciliation issues. Try rendering into a container element created ' +
                  'for your app.',
              )
            : void 0;
        };
        warnOnInvalidCallback = function (callback, callerName) {
          !(callback === null || typeof callback === 'function')
            ? warningWithoutStack$1(
                false,
                '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.',
                callerName,
                callback,
              )
            : void 0;
        };
      }
      setRestoreImplementation(restoreControlledState$$1);
      function ReactBatch(root) {
        var expirationTime = computeUniqueAsyncExpiration();
        this._expirationTime = expirationTime;
        this._root = root;
        this._next = null;
        this._callbacks = null;
        this._didComplete = false;
        this._hasChildren = false;
        this._children = null;
        this._defer = true;
      }
      ReactBatch.prototype.render = function (children) {
        var _this = this;
        (function () {
          if (!_this._defer) {
            {
              throw ReactError(Error('batch.render: Cannot render a batch that already committed.'));
            }
          }
        })();
        this._hasChildren = true;
        this._children = children;
        var internalRoot = this._root._internalRoot;
        var expirationTime = this._expirationTime;
        var work = new ReactWork();
        updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, null, work._onCommit);
        return work;
      };
      ReactBatch.prototype.then = function (onComplete) {
        if (this._didComplete) {
          onComplete();
          return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) {
          callbacks = this._callbacks = [];
        }
        callbacks.push(onComplete);
      };
      ReactBatch.prototype.commit = function () {
        var _this2 = this;
        var internalRoot = this._root._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        (function () {
          if (!(_this2._defer && firstBatch !== null)) {
            {
              throw ReactError(Error('batch.commit: Cannot commit a batch multiple times.'));
            }
          }
        })();
        if (!this._hasChildren) {
          this._next = null;
          this._defer = false;
          return;
        }
        var expirationTime = this._expirationTime;
        if (firstBatch !== this) {
          if (this._hasChildren) {
            expirationTime = this._expirationTime = firstBatch._expirationTime;
            this.render(this._children);
          }
          var previous = null;
          var batch = firstBatch;
          while (batch !== this) {
            previous = batch;
            batch = batch._next;
          }
          (function () {
            if (!(previous !== null)) {
              {
                throw ReactError(Error('batch.commit: Cannot commit a batch multiple times.'));
              }
            }
          })();
          previous._next = batch._next;
          this._next = firstBatch;
          firstBatch = internalRoot.firstBatch = this;
        }
        this._defer = false;
        flushRoot(internalRoot, expirationTime);
        var next = this._next;
        this._next = null;
        firstBatch = internalRoot.firstBatch = next;
        if (firstBatch !== null && firstBatch._hasChildren) {
          firstBatch.render(firstBatch._children);
        }
      };
      ReactBatch.prototype._onComplete = function () {
        if (this._didComplete) {
          return;
        }
        this._didComplete = true;
        var callbacks = this._callbacks;
        if (callbacks === null) {
          return;
        }
        for (var i = 0; i < callbacks.length; i++) {
          var _callback = callbacks[i];
          _callback();
        }
      };
      function ReactWork() {
        this._callbacks = null;
        this._didCommit = false;
        this._onCommit = this._onCommit.bind(this);
      }
      ReactWork.prototype.then = function (onCommit) {
        if (this._didCommit) {
          onCommit();
          return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) {
          callbacks = this._callbacks = [];
        }
        callbacks.push(onCommit);
      };
      ReactWork.prototype._onCommit = function () {
        if (this._didCommit) {
          return;
        }
        this._didCommit = true;
        var callbacks = this._callbacks;
        if (callbacks === null) {
          return;
        }
        for (var i = 0; i < callbacks.length; i++) {
          var _callback2 = callbacks[i];
          (function () {
            if (!(typeof _callback2 === 'function')) {
              {
                throw ReactError(
                  Error('Invalid argument passed as callback. Expected a function. Instead received: ' + _callback2),
                );
              }
            }
          })();
          _callback2();
        }
      };
      function createRootImpl(container, tag, options) {
        var hydrate = options != null && options.hydrate === true;
        var hydrationCallbacks = (options != null && options.hydrationOptions) || null;
        var root = createContainer(container, tag, hydrate);
        markContainerAsRoot(root.current, container);
        if (hydrate && tag !== LegacyRoot) {
          var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
          eagerlyTrapReplayableEvents(doc);
        }
        return root;
      }
      function ReactSyncRoot(container, tag, options) {
        this._internalRoot = createRootImpl(container, tag, options);
      }
      function ReactRoot(container, options) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
      }
      ReactRoot.prototype.render = ReactSyncRoot.prototype.render = function (children, callback) {
        var root = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        {
          warnOnInvalidCallback(callback, 'render');
        }
        if (callback !== null) {
          work.then(callback);
        }
        updateContainer(children, root, null, work._onCommit);
        return work;
      };
      ReactRoot.prototype.unmount = ReactSyncRoot.prototype.unmount = function (callback) {
        var root = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        {
          warnOnInvalidCallback(callback, 'render');
        }
        if (callback !== null) {
          work.then(callback);
        }
        updateContainer(null, root, null, work._onCommit);
        return work;
      };
      ReactRoot.prototype.createBatch = function () {
        var batch = new ReactBatch(this);
        var expirationTime = batch._expirationTime;
        var internalRoot = this._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        if (firstBatch === null) {
          internalRoot.firstBatch = batch;
          batch._next = null;
        } else {
          var insertAfter = null;
          var insertBefore = firstBatch;
          while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
            insertAfter = insertBefore;
            insertBefore = insertBefore._next;
          }
          batch._next = insertBefore;
          if (insertAfter !== null) {
            insertAfter._next = batch;
          }
        }
        return batch;
      };
      function isValidContainer(node) {
        return !!(
          node &&
          (node.nodeType === ELEMENT_NODE ||
            node.nodeType === DOCUMENT_NODE ||
            node.nodeType === DOCUMENT_FRAGMENT_NODE ||
            (node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '))
        );
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(
          rootElement &&
          rootElement.nodeType === ELEMENT_NODE &&
          rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
        );
      }
      setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
      var warnedAboutHydrateAPI = false;
      function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        if (!shouldHydrate) {
          var warned = false;
          var rootSibling;
          while ((rootSibling = container.lastChild)) {
            {
              if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                warned = true;
                warningWithoutStack$1(
                  false,
                  'render(): Target node has markup rendered by React, but there ' +
                    'are unrelated nodes as well. This is most commonly caused by ' +
                    'white-space inserted around server-rendered markup.',
                );
              }
            }
            container.removeChild(rootSibling);
          }
        }
        {
          if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            lowPriorityWarningWithoutStack$1(
              false,
              'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' +
                'will stop working in React v17. Replace the ReactDOM.render() call ' +
                'with ReactDOM.hydrate() if you want React to attach to the server HTML.',
            );
          }
        }
        return new ReactSyncRoot(
          container,
          LegacyRoot,
          shouldHydrate
            ? {
                hydrate: true,
              }
            : undefined,
        );
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback(callback === undefined ? null : callback, 'render');
        }
        var root = container._reactRootContainer;
        var fiberRoot;
        if (!root) {
          root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
          fiberRoot = root._internalRoot;
          if (typeof callback === 'function') {
            var originalCallback = callback;
            callback = function () {
              var instance = getPublicRootInstance(fiberRoot);
              originalCallback.call(instance);
            };
          }
          unbatchedUpdates(function () {
            updateContainer(children, fiberRoot, parentComponent, callback);
          });
        } else {
          fiberRoot = root._internalRoot;
          if (typeof callback === 'function') {
            var _originalCallback = callback;
            callback = function () {
              var instance = getPublicRootInstance(fiberRoot);
              _originalCallback.call(instance);
            };
          }
          updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
      }
      function createPortal$$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        (function () {
          if (!isValidContainer(container)) {
            {
              throw ReactError(Error('Target container is not a DOM element.'));
            }
          }
        })();
        return createPortal$1(children, container, null, key);
      }
      var ReactDOM = {
        createPortal: createPortal$$1,
        findDOMNode: function (componentOrElement) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              !warnedAboutRefsInRender
                ? warningWithoutStack$1(
                    false,
                    '%s is accessing findDOMNode inside its render(). ' +
                      'render() should be a pure function of props and state. It should ' +
                      'never access something that requires stale data from the previous ' +
                      'render, such as refs. Move this logic to componentDidMount and ' +
                      'componentDidUpdate instead.',
                    getComponentName(owner.type) || 'A component',
                  )
                : void 0;
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
          }
        },
        hydrate: function (element, container, callback) {
          (function () {
            if (!isValidContainer(container)) {
              {
                throw ReactError(Error('Target container is not a DOM element.'));
              }
            }
          })();
          {
            !!container._reactHasBeenPassedToCreateRootDEV
              ? warningWithoutStack$1(
                  false,
                  'You are calling ReactDOM.hydrate() on a container that was previously ' +
                    'passed to ReactDOM.%s(). This is not supported. ' +
                    'Did you mean to call createRoot(container, {hydrate: true}).render(element)?',
                  'unstable_createRoot',
                )
              : void 0;
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        },
        render: function (element, container, callback) {
          (function () {
            if (!isValidContainer(container)) {
              {
                throw ReactError(Error('Target container is not a DOM element.'));
              }
            }
          })();
          {
            !!container._reactHasBeenPassedToCreateRootDEV
              ? warningWithoutStack$1(
                  false,
                  'You are calling ReactDOM.render() on a container that was previously ' +
                    'passed to ReactDOM.%s(). This is not supported. ' +
                    'Did you mean to call root.render(element)?',
                  'unstable_createRoot',
                )
              : void 0;
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        },
        unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
          (function () {
            if (!isValidContainer(containerNode)) {
              {
                throw ReactError(Error('Target container is not a DOM element.'));
              }
            }
          })();
          (function () {
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw ReactError(Error('parentComponent must be a valid React Component'));
              }
            }
          })();
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        },
        unmountComponentAtNode: function (container) {
          (function () {
            if (!isValidContainer(container)) {
              {
                throw ReactError(Error('unmountComponentAtNode(...): Target container is not a DOM element.'));
              }
            }
          })();
          {
            !!container._reactHasBeenPassedToCreateRootDEV
              ? warningWithoutStack$1(
                  false,
                  'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' +
                    'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?',
                  'unstable_createRoot',
                )
              : void 0;
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              !!renderedByDifferentReact
                ? warningWithoutStack$1(
                    false,
                    "unmountComponentAtNode(): The node you're attempting to unmount " +
                      'was rendered by another copy of React.',
                  )
                : void 0;
            }
            unbatchedUpdates(function () {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                container._reactRootContainer = null;
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot =
                container.nodeType === ELEMENT_NODE &&
                isValidContainer(container.parentNode) &&
                !!container.parentNode._reactRootContainer;
              !!hasNonRootReactChild
                ? warningWithoutStack$1(
                    false,
                    "unmountComponentAtNode(): The node you're attempting to unmount " +
                      'was rendered by React and is not a top-level container. %s',
                    isContainerReactRoot
                      ? 'You may have accidentally passed in a React root node instead ' + 'of its container.'
                      : 'Instead, have the parent component update its state and ' +
                          'rerender in order to remove this component.',
                  )
                : void 0;
            }
            return false;
          }
        },
        unstable_createPortal: function () {
          if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            lowPriorityWarningWithoutStack$1(
              false,
              'The ReactDOM.unstable_createPortal() alias has been deprecated, ' +
                'and will be removed in React 17+. Update your code to use ' +
                'ReactDOM.createPortal() instead. It has the exact same API, ' +
                'but without the "unstable_" prefix.',
            );
          }
          return createPortal$$1.apply(void 0, arguments);
        },
        unstable_batchedUpdates: batchedUpdates$1,
        unstable_interactiveUpdates: function (fn, a, b, c) {
          flushDiscreteUpdates();
          return discreteUpdates$1(fn, a, b, c);
        },
        unstable_discreteUpdates: discreteUpdates$1,
        unstable_flushDiscreteUpdates: flushDiscreteUpdates,
        flushSync: flushSync,
        unstable_createRoot: createRoot,
        unstable_createSyncRoot: createSyncRoot,
        unstable_flushControlled: flushControlled,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          Events: [
            getInstanceFromNode$1,
            getNodeFromInstance$1,
            getFiberCurrentPropsFromNode$1,
            injection.injectEventPluginsByName,
            eventNameDispatchConfigs,
            accumulateTwoPhaseDispatches,
            accumulateDirectDispatches,
            enqueueStateRestore,
            restoreStateIfNeeded,
            dispatchEvent,
            runEventsInBatch,
            flushPassiveEffects,
            IsThisRendererActing,
          ],
        },
      };
      function createRoot(container, options) {
        var functionName = 'unstable_createRoot';
        (function () {
          if (!isValidContainer(container)) {
            {
              throw ReactError(Error(functionName + '(...): Target container is not a DOM element.'));
            }
          }
        })();
        warnIfReactDOMContainerInDEV(container);
        return new ReactRoot(container, options);
      }
      function createSyncRoot(container, options) {
        var functionName = 'unstable_createRoot';
        (function () {
          if (!isValidContainer(container)) {
            {
              throw ReactError(Error(functionName + '(...): Target container is not a DOM element.'));
            }
          }
        })();
        warnIfReactDOMContainerInDEV(container);
        return new ReactSyncRoot(container, BatchedRoot, options);
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          !!container._reactRootContainer
            ? warningWithoutStack$1(
                false,
                'You are calling ReactDOM.%s() on a container that was previously ' +
                  'passed to ReactDOM.render(). This is not supported.',
                'unstable_createRoot',
              )
            : void 0;
          container._reactHasBeenPassedToCreateRootDEV = true;
        }
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom',
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (
            (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1) ||
            navigator.userAgent.indexOf('Firefox') > -1
          ) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info(
                '%cDownload the React DevTools ' +
                  'for a better development experience: ' +
                  'https://fb.me/react-devtools' +
                  (protocol === 'file:'
                    ? '\nYou might need to use a local HTTP server (instead of file://): ' +
                      'https://fb.me/react-devtools-faq'
                    : ''),
                'font-weight:bold',
              );
            }
          }
        }
      }
      var ReactDOM$2 = Object.freeze({
        default: ReactDOM,
      });
      var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2;
      var reactDom = ReactDOM$3.default || ReactDOM$3;
      module.exports = reactDom;
    })();
  }
});
var reactDom = createCommonjsModule(function (module) {
  {
    module.exports = reactDom_development;
  }
});
var reactDom_1 = reactDom.findDOMNode;
var interopRequireDefault = createCommonjsModule(function (module) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  module.exports = _interopRequireDefault;
});
unwrapExports(interopRequireDefault);
var warning = function () {};
{
  var printWarning$1 = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message =
      'Warning: ' +
      format.replace(/%s/g, function () {
        return args[argIndex++];
      });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      printWarning$1.apply(null, [format].concat(args));
    }
  };
}
var warning_1 = warning;
var createGenerateClassName_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createGenerateClassName;
  var _warning = interopRequireDefault(warning_1);
  var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
  function safePrefix(classNamePrefix) {
    var prefix = String(classNamePrefix);
    (0, _warning.default)(prefix.length < 256, 'Material-UI: the class name prefix is too long: '.concat(prefix, '.'));
    return prefix.replace(escapeRegex, '-');
  }
  function createGenerateClassName() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,
      dangerouslyUseGlobalCSS = _options$dangerouslyU === void 0 ? false : _options$dangerouslyU,
      _options$productionPr = options.productionPrefix,
      _options$seed = options.seed,
      seed = _options$seed === void 0 ? '' : _options$seed;
    var ruleCounter = 0;
    return function (rule, styleSheet) {
      ruleCounter += 1;
      (0,
      _warning.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
      if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name) {
        return ''.concat(safePrefix(styleSheet.options.name), '-').concat(rule.key);
      }
      if (styleSheet && styleSheet.options.classNamePrefix) {
        return ''
          .concat(safePrefix(styleSheet.options.classNamePrefix), '-')
          .concat(rule.key, '-')
          .concat(seed)
          .concat(ruleCounter);
      }
      return ''.concat(rule.key, '-').concat(seed).concat(ruleCounter);
    };
  }
});
unwrapExports(createGenerateClassName_1);
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var defineProperty = _defineProperty;
var _extends_1 = createCommonjsModule(function (module) {
  function _extends() {
    module.exports = _extends =
      Object.assign ||
      function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
    return _extends.apply(this, arguments);
  }
  module.exports = _extends;
});
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
var objectWithoutProperties = _objectWithoutProperties;
var umd = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory();
  })(commonjsGlobal, function () {
    var isMergeableObject = function isMergeableObject(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === 'object';
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value)
        ? deepmerge(emptyTarget(value), value, options)
        : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function (element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === 'function' ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols
        ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
            return target.propertyIsEnumerable(symbol);
          })
        : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function (key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function (key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        } else {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error('first argument should be an array');
      }
      return array.reduce(function (prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    return deepmerge_1;
  });
});
var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};
function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}
var isPlainObject = function isPlainObject(o) {
  var ctor, prot;
  if (isObjectObject(o) === false) return false;
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }
  return true;
};
var createBreakpoints_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createBreakpoints;
  exports.keys = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var keys = ['xs', 'sm', 'md', 'lg', 'xl'];
  exports.keys = keys;
  function createBreakpoints(breakpoints) {
    var _breakpoints$values = breakpoints.values,
      values =
        _breakpoints$values === void 0
          ? {
              xs: 0,
              sm: 600,
              md: 960,
              lg: 1280,
              xl: 1920,
            }
          : _breakpoints$values,
      _breakpoints$unit = breakpoints.unit,
      unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
      _breakpoints$step = breakpoints.step,
      step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
      other = (0, _objectWithoutProperties2.default)(breakpoints, ['values', 'unit', 'step']);
    function up(key) {
      var value = typeof values[key] === 'number' ? values[key] : key;
      return '@media (min-width:'.concat(value).concat(unit, ')');
    }
    function down(key) {
      var endIndex = keys.indexOf(key) + 1;
      var upperbound = values[keys[endIndex]];
      if (endIndex === keys.length) {
        return up('xs');
      }
      var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
      return '@media (max-width:'.concat(value - step / 100).concat(unit, ')');
    }
    function between(start, end) {
      var endIndex = keys.indexOf(end) + 1;
      if (endIndex === keys.length) {
        return up(start);
      }
      return (
        '@media (min-width:'.concat(values[start]).concat(unit, ') and ') +
        '(max-width:'.concat(values[keys[endIndex]] - step / 100).concat(unit, ')')
      );
    }
    function only(key) {
      return between(key, key);
    }
    function width(key) {
      return values[key];
    }
    return (0, _extends2.default)(
      {
        keys: keys,
        values: values,
        up: up,
        down: down,
        between: between,
        only: only,
        width: width,
      },
      other,
    );
  }
});
unwrapExports(createBreakpoints_1);
var createBreakpoints_2 = createBreakpoints_1.keys;
var createMixins_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createMixins;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends3 = interopRequireDefault(_extends_1);
  function createMixins(breakpoints, spacing, mixins) {
    var _toolbar;
    return (0, _extends3.default)(
      {
        gutters: function gutters() {
          var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return (0, _extends3.default)(
            {
              paddingLeft: spacing.unit * 2,
              paddingRight: spacing.unit * 2,
            },
            styles,
            (0, _defineProperty2.default)(
              {},
              breakpoints.up('sm'),
              (0, _extends3.default)(
                {
                  paddingLeft: spacing.unit * 3,
                  paddingRight: spacing.unit * 3,
                },
                styles[breakpoints.up('sm')],
              ),
            ),
          );
        },
        toolbar:
          ((_toolbar = {
            minHeight: 56,
          }),
          (0, _defineProperty2.default)(_toolbar, ''.concat(breakpoints.up('xs'), ' and (orientation: landscape)'), {
            minHeight: 48,
          }),
          (0, _defineProperty2.default)(_toolbar, breakpoints.up('sm'), {
            minHeight: 64,
          }),
          _toolbar),
      },
      mixins,
    );
  }
});
unwrapExports(createMixins_1);
var indigo_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var indigo = {
    50: '#e8eaf6',
    100: '#c5cae9',
    200: '#9fa8da',
    300: '#7986cb',
    400: '#5c6bc0',
    500: '#3f51b5',
    600: '#3949ab',
    700: '#303f9f',
    800: '#283593',
    900: '#1a237e',
    A100: '#8c9eff',
    A200: '#536dfe',
    A400: '#3d5afe',
    A700: '#304ffe',
  };
  var _default = indigo;
  exports.default = _default;
});
unwrapExports(indigo_1);
var pink_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var pink = {
    50: '#fce4ec',
    100: '#f8bbd0',
    200: '#f48fb1',
    300: '#f06292',
    400: '#ec407a',
    500: '#e91e63',
    600: '#d81b60',
    700: '#c2185b',
    800: '#ad1457',
    900: '#880e4f',
    A100: '#ff80ab',
    A200: '#ff4081',
    A400: '#f50057',
    A700: '#c51162',
  };
  var _default = pink;
  exports.default = _default;
});
unwrapExports(pink_1);
var grey_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#d5d5d5',
    A200: '#aaaaaa',
    A400: '#303030',
    A700: '#616161',
  };
  var _default = grey;
  exports.default = _default;
});
unwrapExports(grey_1);
var red_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000',
  };
  var _default = red;
  exports.default = _default;
});
unwrapExports(red_1);
var common_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var common = {
    black: '#000',
    white: '#fff',
  };
  var _default = common;
  exports.default = _default;
});
unwrapExports(common_1);
var colorManipulator = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.convertHexToRGB = convertHexToRGB;
  exports.rgbToHex = rgbToHex;
  exports.decomposeColor = decomposeColor;
  exports.recomposeColor = recomposeColor;
  exports.getContrastRatio = getContrastRatio;
  exports.getLuminance = getLuminance;
  exports.emphasize = emphasize;
  exports.fade = fade;
  exports.darken = darken;
  exports.lighten = lighten;
  var _warning = interopRequireDefault(warning_1);
  function clamp(value) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    (0,
    _warning.default)(value >= min && value <= max, 'Material-UI: the value provided '.concat(value, ' is out of range [').concat(min, ', ').concat(max, '].'));
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  function convertHexToRGB(color) {
    color = color.substr(1);
    var re = new RegExp('.{1,'.concat(color.length / 3, '}'), 'g');
    var colors = color.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map(function (n) {
        return n + n;
      });
    }
    return colors
      ? 'rgb('.concat(
          colors
            .map(function (n) {
              return parseInt(n, 16);
            })
            .join(', '),
          ')',
        )
      : '';
  }
  function rgbToHex(color) {
    if (color.indexOf('#') === 0) {
      return color;
    }
    function intToHex(c) {
      var hex = c.toString(16);
      return hex.length === 1 ? '0'.concat(hex) : hex;
    }
    var _decomposeColor = decomposeColor(color),
      values = _decomposeColor.values;
    values = values.map(function (n) {
      return intToHex(n);
    });
    return '#'.concat(values.join(''));
  }
  function decomposeColor(color) {
    if (color.charAt(0) === '#') {
      return decomposeColor(convertHexToRGB(color));
    }
    var marker = color.indexOf('(');
    var type = color.substring(0, marker);
    var values = color.substring(marker + 1, color.length - 1).split(',');
    values = values.map(function (value) {
      return parseFloat(value);
    });
    {
      if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
        throw new Error(
          [
            'Material-UI: unsupported `'.concat(color, '` color.'),
            'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().',
          ].join('\n'),
        );
      }
    }
    return {
      type: type,
      values: values,
    };
  }
  function recomposeColor(color) {
    var type = color.type;
    var values = color.values;
    if (type.indexOf('rgb') !== -1) {
      values = values.map(function (n, i) {
        return i < 3 ? parseInt(n, 10) : n;
      });
    }
    if (type.indexOf('hsl') !== -1) {
      values[1] = ''.concat(values[1], '%');
      values[2] = ''.concat(values[2], '%');
    }
    return ''.concat(color.type, '(').concat(values.join(', '), ')');
  }
  function getContrastRatio(foreground, background) {
    var lumA = getLuminance(foreground);
    var lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function getLuminance(color) {
    var decomposedColor = decomposeColor(color);
    if (decomposedColor.type.indexOf('rgb') !== -1) {
      var rgb = decomposedColor.values.map(function (val) {
        val /= 255;
        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      });
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    return decomposedColor.values[2] / 100;
  }
  function emphasize(color) {
    var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
    return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
  }
  function fade(color, value) {
    (0,
    _warning.default)(color, 'Material-UI: missing color argument in fade('.concat(color, ', ').concat(value, ').'));
    if (!color) return color;
    color = decomposeColor(color);
    value = clamp(value);
    if (color.type === 'rgb' || color.type === 'hsl') {
      color.type += 'a';
    }
    color.values[3] = value;
    return recomposeColor(color);
  }
  function darken(color, coefficient) {
    (0,
    _warning.default)(color, 'Material-UI: missing color argument in darken('.concat(color, ', ').concat(coefficient, ').'));
    if (!color) return color;
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] *= 1 - coefficient;
    } else if (color.type.indexOf('rgb') !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color);
  }
  function lighten(color, coefficient) {
    (0,
    _warning.default)(color, 'Material-UI: missing color argument in lighten('.concat(color, ', ').concat(coefficient, ').'));
    if (!color) return color;
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] += (100 - color.values[2]) * coefficient;
    } else if (color.type.indexOf('rgb') !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] += (255 - color.values[i]) * coefficient;
      }
    }
    return recomposeColor(color);
  }
});
unwrapExports(colorManipulator);
var colorManipulator_1 = colorManipulator.convertHexToRGB;
var colorManipulator_2 = colorManipulator.rgbToHex;
var colorManipulator_3 = colorManipulator.decomposeColor;
var colorManipulator_4 = colorManipulator.recomposeColor;
var colorManipulator_5 = colorManipulator.getContrastRatio;
var colorManipulator_6 = colorManipulator.getLuminance;
var colorManipulator_7 = colorManipulator.emphasize;
var colorManipulator_8 = colorManipulator.fade;
var colorManipulator_9 = colorManipulator.darken;
var colorManipulator_10 = colorManipulator.lighten;
var createPalette_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createPalette;
  exports.dark = exports.light = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _warning = interopRequireDefault(warning_1);
  var _deepmerge = interopRequireDefault(umd);
  var _indigo = interopRequireDefault(indigo_1);
  var _pink = interopRequireDefault(pink_1);
  var _grey = interopRequireDefault(grey_1);
  var _red = interopRequireDefault(red_1);
  var _common = interopRequireDefault(common_1);
  var light = {
    text: {
      primary: 'rgba(0, 0, 0, 0.87)',
      secondary: 'rgba(0, 0, 0, 0.54)',
      disabled: 'rgba(0, 0, 0, 0.38)',
      hint: 'rgba(0, 0, 0, 0.38)',
    },
    divider: 'rgba(0, 0, 0, 0.12)',
    background: {
      paper: _common.default.white,
      default: _grey.default[50],
    },
    action: {
      active: 'rgba(0, 0, 0, 0.54)',
      hover: 'rgba(0, 0, 0, 0.08)',
      hoverOpacity: 0.08,
      selected: 'rgba(0, 0, 0, 0.14)',
      disabled: 'rgba(0, 0, 0, 0.26)',
      disabledBackground: 'rgba(0, 0, 0, 0.12)',
    },
  };
  exports.light = light;
  var dark = {
    text: {
      primary: _common.default.white,
      secondary: 'rgba(255, 255, 255, 0.7)',
      disabled: 'rgba(255, 255, 255, 0.5)',
      hint: 'rgba(255, 255, 255, 0.5)',
      icon: 'rgba(255, 255, 255, 0.5)',
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
      paper: _grey.default[800],
      default: '#303030',
    },
    action: {
      active: _common.default.white,
      hover: 'rgba(255, 255, 255, 0.1)',
      hoverOpacity: 0.1,
      selected: 'rgba(255, 255, 255, 0.2)',
      disabled: 'rgba(255, 255, 255, 0.3)',
      disabledBackground: 'rgba(255, 255, 255, 0.12)',
    },
  };
  exports.dark = dark;
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === 'light') {
        intent.light = (0, colorManipulator.lighten)(intent.main, tonalOffset);
      } else if (direction === 'dark') {
        intent.dark = (0, colorManipulator.darken)(intent.main, tonalOffset * 1.5);
      }
    }
  }
  function createPalette(palette) {
    var _palette$primary = palette.primary,
      primary =
        _palette$primary === void 0
          ? {
              light: _indigo.default[300],
              main: _indigo.default[500],
              dark: _indigo.default[700],
            }
          : _palette$primary,
      _palette$secondary = palette.secondary,
      secondary =
        _palette$secondary === void 0
          ? {
              light: _pink.default.A200,
              main: _pink.default.A400,
              dark: _pink.default.A700,
            }
          : _palette$secondary,
      _palette$error = palette.error,
      error =
        _palette$error === void 0
          ? {
              light: _red.default[300],
              main: _red.default[500],
              dark: _red.default[700],
            }
          : _palette$error,
      _palette$type = palette.type,
      type = _palette$type === void 0 ? 'light' : _palette$type,
      _palette$contrastThre = palette.contrastThreshold,
      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
      _palette$tonalOffset = palette.tonalOffset,
      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
      other = (0, _objectWithoutProperties2.default)(palette, [
        'primary',
        'secondary',
        'error',
        'type',
        'contrastThreshold',
        'tonalOffset',
      ]);
    function getContrastText(background) {
      var contrastText =
        (0, colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold
          ? dark.text.primary
          : light.text.primary;
      {
        var contrast = (0, colorManipulator.getContrastRatio)(background, contrastText);
        (0,
        _warning.default)(contrast >= 3, ['Material-UI: the contrast ratio of '.concat(contrast, ':1 for ').concat(contrastText, ' on ').concat(background), 'falls below the WACG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
      }
      return contrastText;
    }
    function augmentColor(color) {
      var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
      var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }
      if (!color.main) {
        throw new Error(
          [
            'Material-UI: the color provided to augmentColor(color) is invalid.',
            'The color object needs to have a `main` property or a `'.concat(mainShade, '` property.'),
          ].join('\n'),
        );
      }
      addLightOrDark(color, 'light', lightShade, tonalOffset);
      addLightOrDark(color, 'dark', darkShade, tonalOffset);
      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }
      return color;
    }
    augmentColor(primary);
    augmentColor(secondary, 'A400', 'A200', 'A700');
    augmentColor(error);
    var types = {
      dark: dark,
      light: light,
    };
    (0, _warning.default)(types[type], 'Material-UI: the palette type `'.concat(type, '` is not supported.'));
    var paletteOutput = (0, _deepmerge.default)(
      (0, _extends2.default)(
        {
          common: _common.default,
          type: type,
          primary: primary,
          secondary: secondary,
          error: error,
          grey: _grey.default,
          contrastThreshold: contrastThreshold,
          getContrastText: getContrastText,
          augmentColor: augmentColor,
          tonalOffset: tonalOffset,
        },
        types[type],
      ),
      other,
      {
        clone: false,
      },
    );
    return paletteOutput;
  }
});
unwrapExports(createPalette_1);
var createPalette_2 = createPalette_1.dark;
var createPalette_3 = createPalette_1.light;
var _typeof_1 = createCommonjsModule(function (module) {
  function _typeof2(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
      _typeof2 = function _typeof2(obj) {
        return typeof obj;
      };
    } else {
      _typeof2 = function _typeof2(obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
          ? 'symbol'
          : typeof obj;
      };
    }
    return _typeof2(obj);
  }
  function _typeof(obj) {
    if (typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol') {
      module.exports = _typeof = function _typeof(obj) {
        return _typeof2(obj);
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
          ? 'symbol'
          : _typeof2(obj);
      };
    }
    return _typeof(obj);
  }
  module.exports = _typeof;
});
var reactIs_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: !0,
  });
  var b = 'function' === typeof Symbol && Symbol.for,
    c = b ? Symbol.for('react.element') : 60103,
    d = b ? Symbol.for('react.portal') : 60106,
    e = b ? Symbol.for('react.fragment') : 60107,
    f = b ? Symbol.for('react.strict_mode') : 60108,
    g = b ? Symbol.for('react.profiler') : 60114,
    h = b ? Symbol.for('react.provider') : 60109,
    k = b ? Symbol.for('react.context') : 60110,
    l = b ? Symbol.for('react.async_mode') : 60111,
    m = b ? Symbol.for('react.concurrent_mode') : 60111,
    n = b ? Symbol.for('react.forward_ref') : 60112,
    p = b ? Symbol.for('react.suspense') : 60113,
    q = b ? Symbol.for('react.suspense_list') : 60120,
    r = b ? Symbol.for('react.memo') : 60115,
    t = b ? Symbol.for('react.lazy') : 60116,
    v = b ? Symbol.for('react.fundamental') : 60117,
    w = b ? Symbol.for('react.responder') : 60118,
    x = b ? Symbol.for('react.scope') : 60119;
  function y(a) {
    if ('object' === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (((a = a.type), a)) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (((a = a && a.$$typeof), a)) {
                case k:
                case n:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case t:
        case r:
        case d:
          return u;
      }
    }
  }
  function z(a) {
    return y(a) === m;
  }
  exports.typeOf = y;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isValidElementType = function (a) {
    return (
      'string' === typeof a ||
      'function' === typeof a ||
      a === e ||
      a === m ||
      a === g ||
      a === f ||
      a === p ||
      a === q ||
      ('object' === typeof a &&
        null !== a &&
        (a.$$typeof === t ||
          a.$$typeof === r ||
          a.$$typeof === h ||
          a.$$typeof === k ||
          a.$$typeof === n ||
          a.$$typeof === v ||
          a.$$typeof === w ||
          a.$$typeof === x))
    );
  };
  exports.isAsyncMode = function (a) {
    return z(a) || y(a) === l;
  };
  exports.isConcurrentMode = z;
  exports.isContextConsumer = function (a) {
    return y(a) === k;
  };
  exports.isContextProvider = function (a) {
    return y(a) === h;
  };
  exports.isElement = function (a) {
    return 'object' === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function (a) {
    return y(a) === n;
  };
  exports.isFragment = function (a) {
    return y(a) === e;
  };
  exports.isLazy = function (a) {
    return y(a) === t;
  };
  exports.isMemo = function (a) {
    return y(a) === r;
  };
  exports.isPortal = function (a) {
    return y(a) === d;
  };
  exports.isProfiler = function (a) {
    return y(a) === g;
  };
  exports.isStrictMode = function (a) {
    return y(a) === f;
  };
  exports.isSuspense = function (a) {
    return y(a) === p;
  };
});
unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Lazy;
var reactIs_production_min_10 = reactIs_production_min.Memo;
var reactIs_production_min_11 = reactIs_production_min.Portal;
var reactIs_production_min_12 = reactIs_production_min.Profiler;
var reactIs_production_min_13 = reactIs_production_min.StrictMode;
var reactIs_production_min_14 = reactIs_production_min.Suspense;
var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
var reactIs_production_min_20 = reactIs_production_min.isElement;
var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
var reactIs_production_min_22 = reactIs_production_min.isFragment;
var reactIs_production_min_23 = reactIs_production_min.isLazy;
var reactIs_production_min_24 = reactIs_production_min.isMemo;
var reactIs_production_min_25 = reactIs_production_min.isPortal;
var reactIs_production_min_26 = reactIs_production_min.isProfiler;
var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
var reactIs_production_min_28 = reactIs_production_min.isSuspense;
var reactIs_development = createCommonjsModule(function (module, exports) {
  {
    (function () {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
      function isValidElementType(type) {
        return (
          typeof type === 'string' ||
          typeof type === 'function' ||
          type === REACT_FRAGMENT_TYPE ||
          type === REACT_CONCURRENT_MODE_TYPE ||
          type === REACT_PROFILER_TYPE ||
          type === REACT_STRICT_MODE_TYPE ||
          type === REACT_SUSPENSE_TYPE ||
          type === REACT_SUSPENSE_LIST_TYPE ||
          (typeof type === 'object' &&
            type !== null &&
            (type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE ||
              type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
              type.$$typeof === REACT_RESPONDER_TYPE ||
              type.$$typeof === REACT_SCOPE_TYPE))
        );
      }
      var lowPriorityWarningWithoutStack = function () {};
      {
        var printWarning = function (format) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var argIndex = 0;
          var message =
            'Warning: ' +
            format.replace(/%s/g, function () {
              return args[argIndex++];
            });
          if (typeof console !== 'undefined') {
            console.warn(message);
          }
          try {
            throw new Error(message);
          } catch (x) {}
        };
        lowPriorityWarningWithoutStack = function (condition, format) {
          if (format === undefined) {
            throw new Error(
              '`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument',
            );
          }
          if (!condition) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(void 0, [format].concat(args));
          }
        };
      }
      var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;
      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_LAZY_TYPE:
            case REACT_MEMO_TYPE:
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return undefined;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            lowPriorityWarningWithoutStack$1(
              false,
              'The ReactIs.isAsyncMode() alias has been deprecated, ' +
                'and will be removed in React 17+. Update your code to use ' +
                'ReactIs.isConcurrentMode() instead. It has the exact same API.',
            );
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.typeOf = typeOf;
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isValidElementType = isValidElementType;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
    })();
  }
});
unwrapExports(reactIs_development);
var reactIs_development_1 = reactIs_development.typeOf;
var reactIs_development_2 = reactIs_development.AsyncMode;
var reactIs_development_3 = reactIs_development.ConcurrentMode;
var reactIs_development_4 = reactIs_development.ContextConsumer;
var reactIs_development_5 = reactIs_development.ContextProvider;
var reactIs_development_6 = reactIs_development.Element;
var reactIs_development_7 = reactIs_development.ForwardRef;
var reactIs_development_8 = reactIs_development.Fragment;
var reactIs_development_9 = reactIs_development.Lazy;
var reactIs_development_10 = reactIs_development.Memo;
var reactIs_development_11 = reactIs_development.Portal;
var reactIs_development_12 = reactIs_development.Profiler;
var reactIs_development_13 = reactIs_development.StrictMode;
var reactIs_development_14 = reactIs_development.Suspense;
var reactIs_development_15 = reactIs_development.isValidElementType;
var reactIs_development_16 = reactIs_development.isAsyncMode;
var reactIs_development_17 = reactIs_development.isConcurrentMode;
var reactIs_development_18 = reactIs_development.isContextConsumer;
var reactIs_development_19 = reactIs_development.isContextProvider;
var reactIs_development_20 = reactIs_development.isElement;
var reactIs_development_21 = reactIs_development.isForwardRef;
var reactIs_development_22 = reactIs_development.isFragment;
var reactIs_development_23 = reactIs_development.isLazy;
var reactIs_development_24 = reactIs_development.isMemo;
var reactIs_development_25 = reactIs_development.isPortal;
var reactIs_development_26 = reactIs_development.isProfiler;
var reactIs_development_27 = reactIs_development.isStrictMode;
var reactIs_development_28 = reactIs_development.isSuspense;
var reactIs = createCommonjsModule(function (module) {
  {
    module.exports = reactIs_development;
  }
});
var reactIs_1 = reactIs.AsyncMode;
var reactIs_2 = reactIs.ConcurrentMode;
var reactIs_3 = reactIs.ContextConsumer;
var reactIs_4 = reactIs.ContextProvider;
var reactIs_5 = reactIs.Element;
var reactIs_6 = reactIs.ForwardRef;
var reactIs_7 = reactIs.Fragment;
var reactIs_8 = reactIs.Lazy;
var reactIs_9 = reactIs.Memo;
var reactIs_10 = reactIs.Portal;
var reactIs_11 = reactIs.Profiler;
var reactIs_12 = reactIs.StrictMode;
var reactIs_13 = reactIs.Suspense;
var reactIs_14 = reactIs.isAsyncMode;
var reactIs_15 = reactIs.isConcurrentMode;
var reactIs_16 = reactIs.isContextConsumer;
var reactIs_17 = reactIs.isContextProvider;
var reactIs_18 = reactIs.isElement;
var reactIs_19 = reactIs.isForwardRef;
var reactIs_20 = reactIs.isFragment;
var reactIs_21 = reactIs.isLazy;
var reactIs_22 = reactIs.isMemo;
var reactIs_23 = reactIs.isPortal;
var reactIs_24 = reactIs.isProfiler;
var reactIs_25 = reactIs.isStrictMode;
var reactIs_26 = reactIs.isSuspense;
var reactIs_27 = reactIs.isValidElementType;
var reactIs_28 = reactIs.typeOf;
var componentPropType_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _typeof2 = interopRequireDefault(_typeof_1);
  function createComponentProp(isRequired) {
    return function componentPropType(props, key, componentName, location, propFullName) {
      var prop = props[key];
      var propName = propFullName || key;
      var message;
      if (prop == null) {
        if (isRequired) {
          message =
            'The '
              .concat(location, ' `')
              .concat(propName, '` is marked as required in `')
              .concat(componentName, '`, ') + 'but its value is `'.concat((0, _typeof2.default)(prop), '`.');
        }
      } else if (!(0, reactIs.isValidElementType)(prop)) {
        var preciseType = (0, _typeof2.default)(prop);
        message =
          'Invalid '.concat(location, ' `').concat(propName, '` of type `').concat(preciseType, '` ') +
          'supplied to `'.concat(componentName, '`, expected a component.');
      }
      if (message != null) {
        return new Error(''.concat(message).concat(''));
      }
      return null;
    };
  }
  var componentPropType = createComponentProp(false);
  componentPropType.isRequired = createComponentProp(true);
  var _default = componentPropType;
  exports.default = _default;
});
var componentPropType = unwrapExports(componentPropType_1);
var chainPropTypes_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  function chainPropTypes(propType1, propType2) {
    return function validate() {
      return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
    };
  }
  var _default = chainPropTypes;
  exports.default = _default;
});
var chainPropTypes = unwrapExports(chainPropTypes_1);
var exactProp_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.specialProperty = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends3 = interopRequireDefault(_extends_1);
  var specialProperty = 'exact-prop: \u200B';
  exports.specialProperty = specialProperty;
  function exactProp(propTypes) {
    return (0, _extends3.default)(
      {},
      propTypes,
      (0, _defineProperty2.default)({}, specialProperty, function (props) {
        var unsupportedProps = Object.keys(props).filter(function (prop) {
          return !propTypes.hasOwnProperty(prop);
        });
        if (unsupportedProps.length > 0) {
          return new Error(
            'The following properties are not supported: '.concat(
              unsupportedProps
                .map(function (prop) {
                  return '`'.concat(prop, '`');
                })
                .join(', '),
              '. Please remove them.',
            ),
          );
        }
        return null;
      }),
    );
  }
  var _default = exactProp;
  exports.default = _default;
});
var exactProp = unwrapExports(exactProp_1);
var exactProp_2 = exactProp_1.specialProperty;
var getDisplayName_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.getFunctionName = getFunctionName;
  exports.default = void 0;
  var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    var match = ''.concat(fn).match(fnNameMatchRegex);
    var name = match && match[1];
    return name || '';
  }
  function getDisplayName(Component) {
    if (typeof Component === 'string') {
      return Component;
    }
    if (!Component) {
      return undefined;
    }
    return Component.displayName || Component.name || getFunctionName(Component) || 'Component';
  }
  var _default = getDisplayName;
  exports.default = _default;
});
var getDisplayName = unwrapExports(getDisplayName_1);
var getDisplayName_2 = getDisplayName_1.getFunctionName;
var ponyfillGlobal = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _default =
    typeof window != 'undefined' && window.Math == Math
      ? window
      : typeof self != 'undefined' && self.Math == Math
      ? self
      : Function('return this')();
  exports.default = _default;
});
var ponyfillGlobal$1 = unwrapExports(ponyfillGlobal);
var index_es = Object.freeze({
  __proto__: null,
  componentPropType: componentPropType,
  chainPropTypes: chainPropTypes,
  exactProp: exactProp,
  getDisplayName: getDisplayName,
  ponyfillGlobal: ponyfillGlobal$1,
});
var createTypography_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createTypography;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _deepmerge = interopRequireDefault(umd);
  var _warning = interopRequireDefault(warning_1);
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: 'uppercase',
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette, typography) {
    var _ref = typeof typography === 'function' ? typography(palette) : typography,
      _ref$fontFamily = _ref.fontFamily,
      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
      _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
      _ref$fontWeightLight = _ref.fontWeightLight,
      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
      _ref$fontWeightRegula = _ref.fontWeightRegular,
      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
      _ref$fontWeightMedium = _ref.fontWeightMedium,
      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
      _ref$htmlFontSize = _ref.htmlFontSize,
      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
      _ref$useNextVariants = _ref.useNextVariants,
      useNextVariants =
        _ref$useNextVariants === void 0
          ? Boolean(index_es.ponyfillGlobal.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__)
          : _ref$useNextVariants,
      _ref$suppressWarning = _ref.suppressWarning,
      suppressWarning = _ref$suppressWarning === void 0 ? false : _ref$suppressWarning,
      allVariants = _ref.allVariants,
      other = (0, _objectWithoutProperties2.default)(_ref, [
        'fontFamily',
        'fontSize',
        'fontWeightLight',
        'fontWeightRegular',
        'fontWeightMedium',
        'htmlFontSize',
        'useNextVariants',
        'suppressWarning',
        'allVariants',
      ]);
    (0,
    _warning.default)(useNextVariants || suppressWarning, 'Material-UI: you are using the deprecated typography variants ' + 'that will be removed in the next major release.' + '\nPlease read the migration guide under https://material-ui.com/style/typography#migration-to-typography-v2');
    var coef = fontSize / 14;
    var pxToRem = function pxToRem(size) {
      return ''.concat((size / htmlFontSize) * coef, 'rem');
    };
    var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
      return (0, _extends2.default)(
        {
          color: palette.text.primary,
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          fontSize: pxToRem(size),
          lineHeight: lineHeight,
        },
        fontFamily === defaultFontFamily
          ? {
              letterSpacing: ''.concat(round(letterSpacing / size), 'em'),
            }
          : {},
        casing,
        allVariants,
      );
    };
    var nextVariants = {
      h1: buildVariant(fontWeightLight, 96, 1, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.04, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.17, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.33, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1Next: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2Next: buildVariant(fontWeightRegular, 14, 1.5, 0.15),
      buttonNext: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      captionNext: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    };
    var oldVariants = {
      display4: (0, _extends2.default)(
        {
          fontSize: pxToRem(112),
          fontWeight: fontWeightLight,
          fontFamily: fontFamily,
          letterSpacing: '-.04em',
          lineHeight: ''.concat(round(128 / 112), 'em'),
          marginLeft: '-.04em',
          color: palette.text.secondary,
        },
        allVariants,
      ),
      display3: (0, _extends2.default)(
        {
          fontSize: pxToRem(56),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          letterSpacing: '-.02em',
          lineHeight: ''.concat(round(73 / 56), 'em'),
          marginLeft: '-.02em',
          color: palette.text.secondary,
        },
        allVariants,
      ),
      display2: (0, _extends2.default)(
        {
          fontSize: pxToRem(45),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(51 / 45), 'em'),
          marginLeft: '-.02em',
          color: palette.text.secondary,
        },
        allVariants,
      ),
      display1: (0, _extends2.default)(
        {
          fontSize: pxToRem(34),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(41 / 34), 'em'),
          color: palette.text.secondary,
        },
        allVariants,
      ),
      headline: (0, _extends2.default)(
        {
          fontSize: pxToRem(24),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(32.5 / 24), 'em'),
          color: palette.text.primary,
        },
        allVariants,
      ),
      title: (0, _extends2.default)(
        {
          fontSize: pxToRem(21),
          fontWeight: fontWeightMedium,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(24.5 / 21), 'em'),
          color: palette.text.primary,
        },
        allVariants,
      ),
      subheading: (0, _extends2.default)(
        {
          fontSize: pxToRem(16),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(24 / 16), 'em'),
          color: palette.text.primary,
        },
        allVariants,
      ),
      body2: (0, _extends2.default)(
        {
          fontSize: pxToRem(14),
          fontWeight: fontWeightMedium,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(24 / 14), 'em'),
          color: palette.text.primary,
        },
        allVariants,
      ),
      body1: (0, _extends2.default)(
        {
          fontSize: pxToRem(14),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(20.5 / 14), 'em'),
          color: palette.text.primary,
        },
        allVariants,
      ),
      caption: (0, _extends2.default)(
        {
          fontSize: pxToRem(12),
          fontWeight: fontWeightRegular,
          fontFamily: fontFamily,
          lineHeight: ''.concat(round(16.5 / 12), 'em'),
          color: palette.text.secondary,
        },
        allVariants,
      ),
      button: (0, _extends2.default)(
        {
          fontSize: pxToRem(14),
          textTransform: 'uppercase',
          fontWeight: fontWeightMedium,
          fontFamily: fontFamily,
          color: palette.text.primary,
        },
        allVariants,
      ),
    };
    return (0, _deepmerge.default)(
      (0, _extends2.default)(
        {
          pxToRem: pxToRem,
          round: round,
          fontFamily: fontFamily,
          fontSize: fontSize,
          fontWeightLight: fontWeightLight,
          fontWeightRegular: fontWeightRegular,
          fontWeightMedium: fontWeightMedium,
        },
        oldVariants,
        nextVariants,
        useNextVariants
          ? {
              body1: nextVariants.body1Next,
              body2: nextVariants.body2Next,
              button: nextVariants.buttonNext,
              caption: nextVariants.captionNext,
            }
          : {},
        {
          useNextVariants: useNextVariants,
        },
      ),
      other,
      {
        clone: false,
      },
    );
  }
});
unwrapExports(createTypography_1);
var shadows_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow() {
    return [
      ''
        .concat(arguments.length <= 0 ? undefined : arguments[0], 'px ')
        .concat(arguments.length <= 1 ? undefined : arguments[1], 'px ')
        .concat(arguments.length <= 2 ? undefined : arguments[2], 'px ')
        .concat(arguments.length <= 3 ? undefined : arguments[3], 'px rgba(0,0,0,')
        .concat(shadowKeyUmbraOpacity, ')'),
      ''
        .concat(arguments.length <= 4 ? undefined : arguments[4], 'px ')
        .concat(arguments.length <= 5 ? undefined : arguments[5], 'px ')
        .concat(arguments.length <= 6 ? undefined : arguments[6], 'px ')
        .concat(arguments.length <= 7 ? undefined : arguments[7], 'px rgba(0,0,0,')
        .concat(shadowKeyPenumbraOpacity, ')'),
      ''
        .concat(arguments.length <= 8 ? undefined : arguments[8], 'px ')
        .concat(arguments.length <= 9 ? undefined : arguments[9], 'px ')
        .concat(arguments.length <= 10 ? undefined : arguments[10], 'px ')
        .concat(arguments.length <= 11 ? undefined : arguments[11], 'px rgba(0,0,0,')
        .concat(shadowAmbientShadowOpacity, ')'),
    ].join(',');
  }
  var shadows = [
    'none',
    createShadow(0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1),
    createShadow(0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2),
    createShadow(0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2),
    createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
    createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
    createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
    createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
    createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
    createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
    createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
    createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
    createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
    createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
    createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
    createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
    createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
    createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
    createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
    createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
    createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
    createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
    createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
    createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
    createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8),
  ];
  var _default = shadows;
  exports.default = _default;
});
unwrapExports(shadows_1);
var shape_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var shape = {
    borderRadius: 4,
  };
  var _default = shape;
  exports.default = _default;
});
unwrapExports(shape_1);
var spacing_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var spacing = {
    unit: 8,
  };
  var _default = spacing;
  exports.default = _default;
});
unwrapExports(spacing_1);
var transitions = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.isNumber = exports.isString = exports.formatMs = exports.duration = exports.easing = void 0;
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _warning = interopRequireDefault(warning_1);
  var easing = {
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',
  };
  exports.easing = easing;
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195,
  };
  exports.duration = duration;
  var formatMs = function formatMs(milliseconds) {
    return ''.concat(Math.round(milliseconds), 'ms');
  };
  exports.formatMs = formatMs;
  var isString = function isString(value) {
    return typeof value === 'string';
  };
  exports.isString = isString;
  var isNumber = function isNumber(value) {
    return !isNaN(parseFloat(value));
  };
  exports.isNumber = isNumber;
  var _default = {
    easing: easing,
    duration: duration,
    create: function create() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$duration = options.duration,
        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
        _options$easing = options.easing,
        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
        _options$delay = options.delay,
        delay = _options$delay === void 0 ? 0 : _options$delay,
        other = (0, _objectWithoutProperties2.default)(options, ['duration', 'easing', 'delay']);
      (0, _warning.default)(
        isString(props) || Array.isArray(props),
        'Material-UI: argument "props" must be a string or Array.',
      );
      (0, _warning.default)(
        isNumber(durationOption) || isString(durationOption),
        'Material-UI: argument "duration" must be a number or a string but found '.concat(durationOption, '.'),
      );
      (0, _warning.default)(isString(easingOption), 'Material-UI: argument "easing" must be a string.');
      (0, _warning.default)(
        isNumber(delay) || isString(delay),
        'Material-UI: argument "delay" must be a number or a string.',
      );
      (0, _warning.default)(
        Object.keys(other).length === 0,
        'Material-UI: unrecognized argument(s) ['.concat(Object.keys(other).join(','), ']'),
      );
      return (Array.isArray(props) ? props : [props])
        .map(function (animatedProp) {
          return ''
            .concat(animatedProp, ' ')
            .concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), ' ')
            .concat(easingOption, ' ')
            .concat(typeof delay === 'string' ? delay : formatMs(delay));
        })
        .join(',');
    },
    getAutoHeightDuration: function getAutoHeightDuration(height) {
      if (!height) {
        return 0;
      }
      var constant = height / 36;
      return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
    },
  };
  exports.default = _default;
});
unwrapExports(transitions);
var transitions_1 = transitions.isNumber;
var transitions_2 = transitions.isString;
var transitions_3 = transitions.formatMs;
var transitions_4 = transitions.duration;
var transitions_5 = transitions.easing;
var zIndex_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var zIndex = {
    mobileStepper: 1000,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500,
  };
  var _default = zIndex;
  exports.default = _default;
});
unwrapExports(zIndex_1);
var createMuiTheme_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _deepmerge = interopRequireDefault(umd);
  var _isPlainObject = interopRequireDefault(isPlainObject);
  var _warning = interopRequireDefault(warning_1);
  var _createBreakpoints = interopRequireDefault(createBreakpoints_1);
  var _createMixins = interopRequireDefault(createMixins_1);
  var _createPalette = interopRequireDefault(createPalette_1);
  var _createTypography = interopRequireDefault(createTypography_1);
  var _shadows = interopRequireDefault(shadows_1);
  var _shape = interopRequireDefault(shape_1);
  var _spacing = interopRequireDefault(spacing_1);
  var _transitions = interopRequireDefault(transitions);
  var _zIndex = interopRequireDefault(zIndex_1);
  function createMuiTheme() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$breakpoints = options.breakpoints,
      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
      _options$mixins = options.mixins,
      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
      _options$palette = options.palette,
      paletteInput = _options$palette === void 0 ? {} : _options$palette,
      shadowsInput = options.shadows,
      _options$spacing = options.spacing,
      spacingInput = _options$spacing === void 0 ? {} : _options$spacing,
      _options$typography = options.typography,
      typographyInput = _options$typography === void 0 ? {} : _options$typography,
      other = (0, _objectWithoutProperties2.default)(options, [
        'breakpoints',
        'mixins',
        'palette',
        'shadows',
        'spacing',
        'typography',
      ]);
    var palette = (0, _createPalette.default)(paletteInput);
    var breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
    var spacing = (0, _extends2.default)({}, _spacing.default, spacingInput);
    var muiTheme = (0, _extends2.default)(
      {
        breakpoints: breakpoints,
        direction: 'ltr',
        mixins: (0, _createMixins.default)(breakpoints, spacing, mixinsInput),
        overrides: {},
        palette: palette,
        props: {},
        shadows: shadowsInput || _shadows.default,
        typography: (0, _createTypography.default)(palette, typographyInput),
      },
      (0, _deepmerge.default)(
        {
          shape: _shape.default,
          spacing: spacing,
          transitions: _transitions.default,
          zIndex: _zIndex.default,
        },
        other,
        {
          isMergeableObject: _isPlainObject.default,
        },
      ),
    );
    {
      var statesWarning = ['disabled', 'focused', 'selected', 'checked'];
      var traverse = function traverse(node, parentKey) {
        var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var key;
        for (key in node) {
          var child = node[key];
          if (depth === 1) {
            if (key.indexOf('Mui') === 0 && child) {
              traverse(child, key, depth + 1);
            }
          } else if (statesWarning.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            (0, _warning.default)(
              false,
              [
                'Material-UI: the `'.concat(parentKey, '` component increases ') +
                  'the CSS specificity of the `'.concat(key, '` internal state.'),
                'You can not override it like this: ',
                JSON.stringify(node, null, 2),
                '',
                'Instead, you need to use the $ruleName syntax:',
                JSON.stringify((0, _defineProperty2.default)({}, '&$'.concat(key), child), null, 2),
                '',
                'https://material-ui.com/customization/overrides#internal-states',
              ].join('\n'),
            );
          }
        }
      };
      traverse(other.overrides);
    }
    (0,
    _warning.default)(muiTheme.shadows.length === 25, 'Material-UI: the shadows array provided to createMuiTheme should support 25 elevations.');
    return muiTheme;
  }
  var _default = createMuiTheme;
  exports.default = _default;
});
unwrapExports(createMuiTheme_1);
var getDynamicStyles_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _typeof =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
            ? 'symbol'
            : typeof obj;
        };
  exports['default'] = getDynamicStyles;
  function getDynamicStyles(styles) {
    var to = null;
    for (var key in styles) {
      var value = styles[key];
      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      if (type === 'function') {
        if (!to) to = {};
        to[key] = value;
      } else if (type === 'object' && value !== null && !Array.isArray(value)) {
        var extracted = getDynamicStyles(value);
        if (extracted) {
          if (!to) to = {};
          to[key] = extracted;
        }
      }
    }
    return to;
  }
});
unwrapExports(getDynamicStyles_1);
var toCssValue_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = toCssValue;
  var join = function join(value, by) {
    var result = '';
    for (var i = 0; i < value.length; i++) {
      if (value[i] === '!important') break;
      if (result) result += by;
      result += value[i];
    }
    return result;
  };
  function toCssValue(value) {
    var ignoreImportant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (!Array.isArray(value)) return value;
    var cssValue = '';
    if (Array.isArray(value[0])) {
      for (var i = 0; i < value.length; i++) {
        if (value[i] === '!important') break;
        if (cssValue) cssValue += ', ';
        cssValue += join(value[i], ' ');
      }
    } else cssValue = join(value, ', ');
    if (!ignoreImportant && value[value.length - 1] === '!important') {
      cssValue += ' !important';
    }
    return cssValue;
  }
});
unwrapExports(toCssValue_1);
var SheetsRegistry_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var SheetsRegistry = (function () {
    function SheetsRegistry() {
      _classCallCheck(this, SheetsRegistry);
      this.registry = [];
    }
    _createClass(SheetsRegistry, [
      {
        key: 'add',
        value: function add(sheet) {
          var registry = this.registry;
          var index = sheet.options.index;
          if (registry.indexOf(sheet) !== -1) return;
          if (registry.length === 0 || index >= this.index) {
            registry.push(sheet);
            return;
          }
          for (var i = 0; i < registry.length; i++) {
            if (registry[i].options.index > index) {
              registry.splice(i, 0, sheet);
              return;
            }
          }
        },
      },
      {
        key: 'reset',
        value: function reset() {
          this.registry = [];
        },
      },
      {
        key: 'remove',
        value: function remove(sheet) {
          var index = this.registry.indexOf(sheet);
          this.registry.splice(index, 1);
        },
      },
      {
        key: 'toString',
        value: function toString(options) {
          return this.registry
            .filter(function (sheet) {
              return sheet.attached;
            })
            .map(function (sheet) {
              return sheet.toString(options);
            })
            .join('\n');
        },
      },
      {
        key: 'index',
        get: function get() {
          return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
        },
      },
    ]);
    return SheetsRegistry;
  })();
  exports['default'] = SheetsRegistry;
});
unwrapExports(SheetsRegistry_1);
var warning$1 = function () {};
{
  warning$1 = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
          'warning. Please, use a more descriptive format than: ' +
          format,
      );
    }
    if (!condition) {
      var argIndex = 0;
      var message =
        'Warning: ' +
        format.replace(/%s/g, function () {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    }
  };
}
var browser = warning$1;
var SheetsManager_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _warning2 = _interopRequireDefault(browser);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var SheetsManager = (function () {
    function SheetsManager() {
      _classCallCheck(this, SheetsManager);
      this.sheets = [];
      this.refs = [];
      this.keys = [];
    }
    _createClass(SheetsManager, [
      {
        key: 'get',
        value: function get(key) {
          var index = this.keys.indexOf(key);
          return this.sheets[index];
        },
      },
      {
        key: 'add',
        value: function add(key, sheet) {
          var sheets = this.sheets,
            refs = this.refs,
            keys = this.keys;
          var index = sheets.indexOf(sheet);
          if (index !== -1) return index;
          sheets.push(sheet);
          refs.push(0);
          keys.push(key);
          return sheets.length - 1;
        },
      },
      {
        key: 'manage',
        value: function manage(key) {
          var index = this.keys.indexOf(key);
          var sheet = this.sheets[index];
          if (this.refs[index] === 0) sheet.attach();
          this.refs[index]++;
          if (!this.keys[index]) this.keys.splice(index, 0, key);
          return sheet;
        },
      },
      {
        key: 'unmanage',
        value: function unmanage(key) {
          var index = this.keys.indexOf(key);
          if (index === -1) {
            (0, _warning2['default'])(false, "SheetsManager: can't find sheet to unmanage");
            return;
          }
          if (this.refs[index] > 0) {
            this.refs[index]--;
            if (this.refs[index] === 0) this.sheets[index].detach();
          }
        },
      },
      {
        key: 'size',
        get: function get() {
          return this.keys.length;
        },
      },
    ]);
    return SheetsManager;
  })();
  exports['default'] = SheetsManager;
});
unwrapExports(SheetsManager_1);
var toCss_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = toCss;
  var _toCssValue2 = _interopRequireDefault(toCssValue_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function indentStr(str, indent) {
    var result = '';
    for (var index = 0; index < indent; index++) {
      result += '  ';
    }
    return result + str;
  }
  function toCss(selector, style) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var result = '';
    if (!style) return result;
    var _options$indent = options.indent,
      indent = _options$indent === undefined ? 0 : _options$indent;
    var fallbacks = style.fallbacks;
    indent++;
    if (fallbacks) {
      if (Array.isArray(fallbacks)) {
        for (var index = 0; index < fallbacks.length; index++) {
          var fallback = fallbacks[index];
          for (var prop in fallback) {
            var value = fallback[prop];
            if (value != null) {
              result += '\n' + indentStr(prop + ': ' + (0, _toCssValue2['default'])(value) + ';', indent);
            }
          }
        }
      } else {
        for (var _prop in fallbacks) {
          var _value = fallbacks[_prop];
          if (_value != null) {
            result += '\n' + indentStr(_prop + ': ' + (0, _toCssValue2['default'])(_value) + ';', indent);
          }
        }
      }
    }
    for (var _prop2 in style) {
      var _value2 = style[_prop2];
      if (_value2 != null && _prop2 !== 'fallbacks') {
        result += '\n' + indentStr(_prop2 + ': ' + (0, _toCssValue2['default'])(_value2) + ';', indent);
      }
    }
    if (!result && !options.allowEmpty) return result;
    indent--;
    result = indentStr(selector + ' {' + result + '\n', indent) + indentStr('}', indent);
    return result;
  }
});
unwrapExports(toCss_1);
var StyleRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _typeof =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
            ? 'symbol'
            : typeof obj;
        };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _warning2 = _interopRequireDefault(browser);
  var _toCss2 = _interopRequireDefault(toCss_1);
  var _toCssValue2 = _interopRequireDefault(toCssValue_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var StyleRule = (function () {
    function StyleRule(key, style, options) {
      _classCallCheck(this, StyleRule);
      this.type = 'style';
      this.isProcessed = false;
      var sheet = options.sheet,
        Renderer = options.Renderer,
        selector = options.selector;
      this.key = key;
      this.options = options;
      this.style = style;
      if (selector) this.selectorText = selector;
      this.renderer = sheet ? sheet.renderer : new Renderer();
    }
    _createClass(StyleRule, [
      {
        key: 'prop',
        value: function prop(name, value) {
          if (value === undefined) return this.style[name];
          if (this.style[name] === value) return this;
          value = this.options.jss.plugins.onChangeValue(value, name, this);
          var isEmpty = value == null || value === false;
          var isDefined = name in this.style;
          if (isEmpty && !isDefined) return this;
          var remove = isEmpty && isDefined;
          if (remove) delete this.style[name];
          else this.style[name] = value;
          if (this.renderable) {
            if (remove) this.renderer.removeProperty(this.renderable, name);
            else this.renderer.setProperty(this.renderable, name, value);
            return this;
          }
          var sheet = this.options.sheet;
          if (sheet && sheet.attached) {
            (0, _warning2['default'])(false, 'Rule is not linked. Missing sheet option "link: true".');
          }
          return this;
        },
      },
      {
        key: 'applyTo',
        value: function applyTo(renderable) {
          var json = this.toJSON();
          for (var prop in json) {
            this.renderer.setProperty(renderable, prop, json[prop]);
          }
          return this;
        },
      },
      {
        key: 'toJSON',
        value: function toJSON() {
          var json = {};
          for (var prop in this.style) {
            var value = this.style[prop];
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') json[prop] = value;
            else if (Array.isArray(value)) json[prop] = (0, _toCssValue2['default'])(value);
          }
          return json;
        },
      },
      {
        key: 'toString',
        value: function toString(options) {
          var sheet = this.options.sheet;
          var link = sheet ? sheet.options.link : false;
          var opts = link
            ? _extends({}, options, {
                allowEmpty: true,
              })
            : options;
          return (0, _toCss2['default'])(this.selector, this.style, opts);
        },
      },
      {
        key: 'selector',
        set: function set(selector) {
          if (selector === this.selectorText) return;
          this.selectorText = selector;
          if (!this.renderable) return;
          var hasChanged = this.renderer.setSelector(this.renderable, selector);
          if (!hasChanged && this.renderable) {
            var renderable = this.renderer.replaceRule(this.renderable, this);
            if (renderable) this.renderable = renderable;
          }
        },
        get: function get() {
          return this.selectorText;
        },
      },
    ]);
    return StyleRule;
  })();
  exports['default'] = StyleRule;
});
unwrapExports(StyleRule_1);
function symbolObservablePonyfill(root) {
  var result;
  var Symbol = root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      result = Symbol.observable;
    } else {
      result = Symbol('observable');
      Symbol.observable = result;
    }
  } else {
    result = '@@observable';
  }
  return result;
}
var root;
if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}
var result = symbolObservablePonyfill(root);
var isObservable = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _symbolObservable2 = _interopRequireDefault(result);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  exports['default'] = function (value) {
    return value && value[_symbolObservable2['default']] && value === value[_symbolObservable2['default']]();
  };
});
unwrapExports(isObservable);
var cloneStyle_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _typeof =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
            ? 'symbol'
            : typeof obj;
        };
  exports['default'] = cloneStyle;
  var _isObservable2 = _interopRequireDefault(isObservable);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var isArray = Array.isArray;
  function cloneStyle(style) {
    if (style == null) return style;
    var typeOfStyle = typeof style === 'undefined' ? 'undefined' : _typeof(style);
    if (typeOfStyle === 'string' || typeOfStyle === 'number' || typeOfStyle === 'function') {
      return style;
    }
    if (isArray(style)) return style.map(cloneStyle);
    if ((0, _isObservable2['default'])(style)) return style;
    var newStyle = {};
    for (var name in style) {
      var value = style[name];
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        newStyle[name] = cloneStyle(value);
        continue;
      }
      newStyle[name] = value;
    }
    return newStyle;
  }
});
unwrapExports(cloneStyle_1);
var createRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = createRule;
  var _warning2 = _interopRequireDefault(browser);
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _cloneStyle2 = _interopRequireDefault(cloneStyle_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function createRule() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unnamed';
    var decl = arguments[1];
    var options = arguments[2];
    var jss = options.jss;
    var declCopy = (0, _cloneStyle2['default'])(decl);
    var rule = jss.plugins.onCreateRule(name, declCopy, options);
    if (rule) return rule;
    if (name[0] === '@') {
      (0, _warning2['default'])(false, '[JSS] Unknown at-rule %s', name);
    }
    return new _StyleRule2['default'](name, declCopy, options);
  }
});
unwrapExports(createRule_1);
var linkRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = linkRule;
  function linkRule(rule, cssRule) {
    rule.renderable = cssRule;
    if (rule.rules && cssRule.cssRules) rule.rules.link(cssRule.cssRules);
  }
});
unwrapExports(linkRule_1);
var _escape = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var CSS = commonjsGlobal.CSS;
  var escapeRegex = /([[\].#*$><+~=|^:(),"'`])/g;
  exports['default'] = function (str) {
    if (!CSS || !CSS.escape) {
      return str.replace(escapeRegex, '\\$1');
    }
    return CSS.escape(str);
  };
});
unwrapExports(_escape);
var RuleList_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _createRule2 = _interopRequireDefault(createRule_1);
  var _linkRule2 = _interopRequireDefault(linkRule_1);
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _escape2 = _interopRequireDefault(_escape);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var RuleList = (function () {
    function RuleList(options) {
      var _this = this;
      _classCallCheck(this, RuleList);
      this.map = {};
      this.raw = {};
      this.index = [];
      this.update = function (name, data) {
        var _options = _this.options,
          plugins = _options.jss.plugins,
          sheet = _options.sheet;
        if (typeof name === 'string') {
          plugins.onUpdate(data, _this.get(name), sheet);
        } else {
          for (var index = 0; index < _this.index.length; index++) {
            plugins.onUpdate(name, _this.index[index], sheet);
          }
        }
      };
      this.options = options;
      this.classes = options.classes;
    }
    _createClass(RuleList, [
      {
        key: 'add',
        value: function add(name, decl, options) {
          var _options2 = this.options,
            parent = _options2.parent,
            sheet = _options2.sheet,
            jss = _options2.jss,
            Renderer = _options2.Renderer,
            generateClassName = _options2.generateClassName;
          options = _extends(
            {
              classes: this.classes,
              parent: parent,
              sheet: sheet,
              jss: jss,
              Renderer: Renderer,
              generateClassName: generateClassName,
            },
            options,
          );
          if (!options.selector && this.classes[name]) {
            options.selector = '.' + (0, _escape2['default'])(this.classes[name]);
          }
          this.raw[name] = decl;
          var rule = (0, _createRule2['default'])(name, decl, options);
          var className = void 0;
          if (!options.selector && rule instanceof _StyleRule2['default']) {
            className = generateClassName(rule, sheet);
            rule.selector = '.' + (0, _escape2['default'])(className);
          }
          this.register(rule, className);
          var index = options.index === undefined ? this.index.length : options.index;
          this.index.splice(index, 0, rule);
          return rule;
        },
      },
      {
        key: 'get',
        value: function get(name) {
          return this.map[name];
        },
      },
      {
        key: 'remove',
        value: function remove(rule) {
          this.unregister(rule);
          this.index.splice(this.indexOf(rule), 1);
        },
      },
      {
        key: 'indexOf',
        value: function indexOf(rule) {
          return this.index.indexOf(rule);
        },
      },
      {
        key: 'process',
        value: function process() {
          var plugins = this.options.jss.plugins;
          this.index.slice(0).forEach(plugins.onProcessRule, plugins);
        },
      },
      {
        key: 'register',
        value: function register(rule, className) {
          this.map[rule.key] = rule;
          if (rule instanceof _StyleRule2['default']) {
            this.map[rule.selector] = rule;
            if (className) this.classes[rule.key] = className;
          }
        },
      },
      {
        key: 'unregister',
        value: function unregister(rule) {
          delete this.map[rule.key];
          if (rule instanceof _StyleRule2['default']) {
            delete this.map[rule.selector];
            delete this.classes[rule.key];
          }
        },
      },
      {
        key: 'link',
        value: function link(cssRules) {
          var map = this.options.sheet.renderer.getUnescapedKeysMap(this.index);
          for (var i = 0; i < cssRules.length; i++) {
            var cssRule = cssRules[i];
            var _key = this.options.sheet.renderer.getKey(cssRule);
            if (map[_key]) _key = map[_key];
            var rule = this.map[_key];
            if (rule) (0, _linkRule2['default'])(rule, cssRule);
          }
        },
      },
      {
        key: 'toString',
        value: function toString(options) {
          var str = '';
          var sheet = this.options.sheet;
          var link = sheet ? sheet.options.link : false;
          for (var index = 0; index < this.index.length; index++) {
            var rule = this.index[index];
            var css = rule.toString(options);
            if (!css && !link) continue;
            if (str) str += '\n';
            str += css;
          }
          return str;
        },
      },
    ]);
    return RuleList;
  })();
  exports['default'] = RuleList;
});
unwrapExports(RuleList_1);
var sheets = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _SheetsRegistry2 = _interopRequireDefault(SheetsRegistry_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  exports['default'] = new _SheetsRegistry2['default']();
});
unwrapExports(sheets);
var StyleSheet_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _linkRule2 = _interopRequireDefault(linkRule_1);
  var _RuleList2 = _interopRequireDefault(RuleList_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var StyleSheet = (function () {
    function StyleSheet(styles, options) {
      var _this = this;
      _classCallCheck(this, StyleSheet);
      this.update = function (name, data) {
        if (typeof name === 'string') {
          _this.rules.update(name, data);
        } else {
          _this.rules.update(name);
        }
        return _this;
      };
      this.attached = false;
      this.deployed = false;
      this.linked = false;
      this.classes = {};
      this.options = _extends({}, options, {
        sheet: this,
        parent: this,
        classes: this.classes,
      });
      this.renderer = new options.Renderer(this);
      this.rules = new _RuleList2['default'](this.options);
      for (var _name in styles) {
        this.rules.add(_name, styles[_name]);
      }
      this.rules.process();
    }
    _createClass(StyleSheet, [
      {
        key: 'attach',
        value: function attach() {
          if (this.attached) return this;
          if (!this.deployed) this.deploy();
          this.renderer.attach();
          if (!this.linked && this.options.link) this.link();
          this.attached = true;
          return this;
        },
      },
      {
        key: 'detach',
        value: function detach() {
          if (!this.attached) return this;
          this.renderer.detach();
          this.attached = false;
          return this;
        },
      },
      {
        key: 'addRule',
        value: function addRule(name, decl, options) {
          var queue = this.queue;
          if (this.attached && !queue) this.queue = [];
          var rule = this.rules.add(name, decl, options);
          this.options.jss.plugins.onProcessRule(rule);
          if (this.attached) {
            if (!this.deployed) return rule;
            if (queue) queue.push(rule);
            else {
              this.insertRule(rule);
              if (this.queue) {
                this.queue.forEach(this.insertRule, this);
                this.queue = undefined;
              }
            }
            return rule;
          }
          this.deployed = false;
          return rule;
        },
      },
      {
        key: 'insertRule',
        value: function insertRule(rule) {
          var renderable = this.renderer.insertRule(rule);
          if (renderable && this.options.link) (0, _linkRule2['default'])(rule, renderable);
        },
      },
      {
        key: 'addRules',
        value: function addRules(styles, options) {
          var added = [];
          for (var _name2 in styles) {
            added.push(this.addRule(_name2, styles[_name2], options));
          }
          return added;
        },
      },
      {
        key: 'getRule',
        value: function getRule(name) {
          return this.rules.get(name);
        },
      },
      {
        key: 'deleteRule',
        value: function deleteRule(name) {
          var rule = this.rules.get(name);
          if (!rule) return false;
          this.rules.remove(rule);
          if (this.attached && rule.renderable) {
            return this.renderer.deleteRule(rule.renderable);
          }
          return true;
        },
      },
      {
        key: 'indexOf',
        value: function indexOf(rule) {
          return this.rules.indexOf(rule);
        },
      },
      {
        key: 'deploy',
        value: function deploy() {
          this.renderer.deploy();
          this.deployed = true;
          return this;
        },
      },
      {
        key: 'link',
        value: function link() {
          var cssRules = this.renderer.getRules();
          if (cssRules) this.rules.link(cssRules);
          this.linked = true;
          return this;
        },
      },
      {
        key: 'toString',
        value: function toString(options) {
          return this.rules.toString(options);
        },
      },
    ]);
    return StyleSheet;
  })();
  exports['default'] = StyleSheet;
});
unwrapExports(StyleSheet_1);
var moduleId = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
  if (commonjsGlobal[ns] == null) commonjsGlobal[ns] = 0;
  exports['default'] = commonjsGlobal[ns]++;
});
unwrapExports(moduleId);
var createGenerateClassName = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _warning2 = _interopRequireDefault(browser);
  var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);
  var _moduleId2 = _interopRequireDefault(moduleId);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var maxRules = 1e10;
  exports['default'] = function () {
    var ruleCounter = 0;
    var defaultPrefix = '';
    return function (rule, sheet) {
      ruleCounter += 1;
      if (ruleCounter > maxRules) {
        (0, _warning2['default'])(false, '[JSS] You might have a memory leak. Rule counter is at %s.', ruleCounter);
      }
      var prefix = defaultPrefix;
      var jssId = '';
      if (sheet) {
        prefix = sheet.options.classNamePrefix || defaultPrefix;
        if (sheet.options.jss.id != null) jssId += sheet.options.jss.id;
      }
      return prefix + rule.key + '-' + _moduleId2['default'] + (jssId && '-' + jssId) + '-' + ruleCounter;
    };
  };
});
unwrapExports(createGenerateClassName);
var _typeof =
  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
    ? function (obj) {
        return typeof obj;
      }
    : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
          ? 'symbol'
          : typeof obj;
      };
var isBrowser =
  (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' &&
  (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object' &&
  document.nodeType === 9;
var PluginsRegistry_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _warning2 = _interopRequireDefault(browser);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var PluginsRegistry = (function () {
    function PluginsRegistry() {
      _classCallCheck(this, PluginsRegistry);
      this.hooks = {
        onCreateRule: [],
        onProcessRule: [],
        onProcessStyle: [],
        onProcessSheet: [],
        onChangeValue: [],
        onUpdate: [],
      };
    }
    _createClass(PluginsRegistry, [
      {
        key: 'onCreateRule',
        value: function onCreateRule(name, decl, options) {
          for (var i = 0; i < this.hooks.onCreateRule.length; i++) {
            var rule = this.hooks.onCreateRule[i](name, decl, options);
            if (rule) return rule;
          }
          return null;
        },
      },
      {
        key: 'onProcessRule',
        value: function onProcessRule(rule) {
          if (rule.isProcessed) return;
          var sheet = rule.options.sheet;
          for (var i = 0; i < this.hooks.onProcessRule.length; i++) {
            this.hooks.onProcessRule[i](rule, sheet);
          }
          if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
          rule.isProcessed = true;
        },
      },
      {
        key: 'onProcessStyle',
        value: function onProcessStyle(style, rule, sheet) {
          var nextStyle = style;
          for (var i = 0; i < this.hooks.onProcessStyle.length; i++) {
            nextStyle = this.hooks.onProcessStyle[i](nextStyle, rule, sheet);
            rule.style = nextStyle;
          }
        },
      },
      {
        key: 'onProcessSheet',
        value: function onProcessSheet(sheet) {
          for (var i = 0; i < this.hooks.onProcessSheet.length; i++) {
            this.hooks.onProcessSheet[i](sheet);
          }
        },
      },
      {
        key: 'onUpdate',
        value: function onUpdate(data, rule, sheet) {
          for (var i = 0; i < this.hooks.onUpdate.length; i++) {
            this.hooks.onUpdate[i](data, rule, sheet);
          }
        },
      },
      {
        key: 'onChangeValue',
        value: function onChangeValue(value, prop, rule) {
          var processedValue = value;
          for (var i = 0; i < this.hooks.onChangeValue.length; i++) {
            processedValue = this.hooks.onChangeValue[i](processedValue, prop, rule);
          }
          return processedValue;
        },
      },
      {
        key: 'use',
        value: function use(plugin) {
          for (var name in plugin) {
            if (this.hooks[name]) this.hooks[name].push(plugin[name]);
            else (0, _warning2['default'])(false, '[JSS] Unknown hook "%s".', name);
          }
        },
      },
    ]);
    return PluginsRegistry;
  })();
  exports['default'] = PluginsRegistry;
});
unwrapExports(PluginsRegistry_1);
var SimpleRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var SimpleRule = (function () {
    function SimpleRule(key, value, options) {
      _classCallCheck(this, SimpleRule);
      this.type = 'simple';
      this.isProcessed = false;
      this.key = key;
      this.value = value;
      this.options = options;
    }
    _createClass(SimpleRule, [
      {
        key: 'toString',
        value: function toString(options) {
          if (Array.isArray(this.value)) {
            var str = '';
            for (var index = 0; index < this.value.length; index++) {
              str += this.key + ' ' + this.value[index] + ';';
              if (this.value[index + 1]) str += '\n';
            }
            return str;
          }
          return this.key + ' ' + this.value + ';';
        },
      },
    ]);
    return SimpleRule;
  })();
  exports['default'] = SimpleRule;
});
unwrapExports(SimpleRule_1);
var KeyframesRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _RuleList2 = _interopRequireDefault(RuleList_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var KeyframesRule = (function () {
    function KeyframesRule(key, frames, options) {
      _classCallCheck(this, KeyframesRule);
      this.type = 'keyframes';
      this.isProcessed = false;
      this.key = key;
      this.options = options;
      this.rules = new _RuleList2['default'](
        _extends({}, options, {
          parent: this,
        }),
      );
      for (var name in frames) {
        this.rules.add(
          name,
          frames[name],
          _extends({}, this.options, {
            parent: this,
            selector: name,
          }),
        );
      }
      this.rules.process();
    }
    _createClass(KeyframesRule, [
      {
        key: 'toString',
        value: function toString() {
          var options =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {
                  indent: 1,
                };
          var inner = this.rules.toString(options);
          if (inner) inner += '\n';
          return this.key + ' {\n' + inner + '}';
        },
      },
    ]);
    return KeyframesRule;
  })();
  exports['default'] = KeyframesRule;
});
unwrapExports(KeyframesRule_1);
var ConditionalRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _RuleList2 = _interopRequireDefault(RuleList_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var ConditionalRule = (function () {
    function ConditionalRule(key, styles, options) {
      _classCallCheck(this, ConditionalRule);
      this.type = 'conditional';
      this.isProcessed = false;
      this.key = key;
      this.options = options;
      this.rules = new _RuleList2['default'](
        _extends({}, options, {
          parent: this,
        }),
      );
      for (var name in styles) {
        this.rules.add(name, styles[name]);
      }
      this.rules.process();
    }
    _createClass(ConditionalRule, [
      {
        key: 'getRule',
        value: function getRule(name) {
          return this.rules.get(name);
        },
      },
      {
        key: 'indexOf',
        value: function indexOf(rule) {
          return this.rules.indexOf(rule);
        },
      },
      {
        key: 'addRule',
        value: function addRule(name, style, options) {
          var rule = this.rules.add(name, style, options);
          this.options.jss.plugins.onProcessRule(rule);
          return rule;
        },
      },
      {
        key: 'toString',
        value: function toString() {
          var options =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {
                  indent: 1,
                };
          var inner = this.rules.toString(options);
          return inner ? this.key + ' {\n' + inner + '\n}' : '';
        },
      },
    ]);
    return ConditionalRule;
  })();
  exports['default'] = ConditionalRule;
});
unwrapExports(ConditionalRule_1);
var FontFaceRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _toCss2 = _interopRequireDefault(toCss_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var FontFaceRule = (function () {
    function FontFaceRule(key, style, options) {
      _classCallCheck(this, FontFaceRule);
      this.type = 'font-face';
      this.isProcessed = false;
      this.key = key;
      this.style = style;
      this.options = options;
    }
    _createClass(FontFaceRule, [
      {
        key: 'toString',
        value: function toString(options) {
          if (Array.isArray(this.style)) {
            var str = '';
            for (var index = 0; index < this.style.length; index++) {
              str += (0, _toCss2['default'])(this.key, this.style[index]);
              if (this.style[index + 1]) str += '\n';
            }
            return str;
          }
          return (0, _toCss2['default'])(this.key, this.style, options);
        },
      },
    ]);
    return FontFaceRule;
  })();
  exports['default'] = FontFaceRule;
});
unwrapExports(FontFaceRule_1);
var ViewportRule_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _toCss2 = _interopRequireDefault(toCss_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var ViewportRule = (function () {
    function ViewportRule(key, style, options) {
      _classCallCheck(this, ViewportRule);
      this.type = 'viewport';
      this.isProcessed = false;
      this.key = key;
      this.style = style;
      this.options = options;
    }
    _createClass(ViewportRule, [
      {
        key: 'toString',
        value: function toString(options) {
          return (0, _toCss2['default'])(this.key, this.style, options);
        },
      },
    ]);
    return ViewportRule;
  })();
  exports['default'] = ViewportRule;
});
unwrapExports(ViewportRule_1);
var rules = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _SimpleRule2 = _interopRequireDefault(SimpleRule_1);
  var _KeyframesRule2 = _interopRequireDefault(KeyframesRule_1);
  var _ConditionalRule2 = _interopRequireDefault(ConditionalRule_1);
  var _FontFaceRule2 = _interopRequireDefault(FontFaceRule_1);
  var _ViewportRule2 = _interopRequireDefault(ViewportRule_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var classes = {
    '@charset': _SimpleRule2['default'],
    '@import': _SimpleRule2['default'],
    '@namespace': _SimpleRule2['default'],
    '@keyframes': _KeyframesRule2['default'],
    '@media': _ConditionalRule2['default'],
    '@supports': _ConditionalRule2['default'],
    '@font-face': _FontFaceRule2['default'],
    '@viewport': _ViewportRule2['default'],
    '@-ms-viewport': _ViewportRule2['default'],
  };
  var plugins = Object.keys(classes).map(function (key) {
    var re = new RegExp('^' + key);
    var RuleClass = classes[key];
    var onCreateRule = function onCreateRule(name, decl, options) {
      return re.test(name) ? new RuleClass(name, decl, options) : null;
    };
    return {
      onCreateRule: onCreateRule,
    };
  });
  exports['default'] = plugins;
});
unwrapExports(rules);
var observables = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _createRule2 = _interopRequireDefault(createRule_1);
  var _isObservable2 = _interopRequireDefault(isObservable);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  exports['default'] = {
    onCreateRule: function onCreateRule(name, decl, options) {
      if (!(0, _isObservable2['default'])(decl)) return null;
      var style$ = decl;
      var rule = (0, _createRule2['default'])(name, {}, options);
      style$.subscribe(function (style) {
        for (var prop in style) {
          rule.prop(prop, style[prop]);
        }
      });
      return rule;
    },
    onProcessRule: function onProcessRule(rule) {
      if (!(rule instanceof _StyleRule2['default'])) return;
      var styleRule = rule;
      var style = styleRule.style;
      var _loop = function _loop(prop) {
        var value = style[prop];
        if (!(0, _isObservable2['default'])(value)) return 'continue';
        delete style[prop];
        value.subscribe({
          next: function next(nextValue) {
            styleRule.prop(prop, nextValue);
          },
        });
      };
      for (var prop in style) {
        var _ret = _loop(prop);
        if (_ret === 'continue') continue;
      }
    },
  };
});
unwrapExports(observables);
var functions = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _RuleList2 = _interopRequireDefault(RuleList_1);
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _createRule2 = _interopRequireDefault(createRule_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var now = Date.now();
  var fnValuesNs = 'fnValues' + now;
  var fnStyleNs = 'fnStyle' + ++now;
  exports['default'] = {
    onCreateRule: function onCreateRule(name, decl, options) {
      if (typeof decl !== 'function') return null;
      var rule = (0, _createRule2['default'])(name, {}, options);
      rule[fnStyleNs] = decl;
      return rule;
    },
    onProcessStyle: function onProcessStyle(style, rule) {
      var fn = {};
      for (var prop in style) {
        var value = style[prop];
        if (typeof value !== 'function') continue;
        delete style[prop];
        fn[prop] = value;
      }
      rule = rule;
      rule[fnValuesNs] = fn;
      return style;
    },
    onUpdate: function onUpdate(data, rule) {
      if (rule.rules instanceof _RuleList2['default']) {
        rule.rules.update(data);
        return;
      }
      if (!(rule instanceof _StyleRule2['default'])) return;
      rule = rule;
      if (rule[fnValuesNs]) {
        for (var prop in rule[fnValuesNs]) {
          rule.prop(prop, rule[fnValuesNs][prop](data));
        }
      }
      rule = rule;
      var fnStyle = rule[fnStyleNs];
      if (fnStyle) {
        var style = fnStyle(data);
        for (var _prop in style) {
          rule.prop(_prop, style[_prop]);
        }
      }
    },
  };
});
unwrapExports(functions);
var DomRenderer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _warning2 = _interopRequireDefault(browser);
  var _sheets2 = _interopRequireDefault(sheets);
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _toCssValue2 = _interopRequireDefault(toCssValue_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var memoize = function memoize(fn) {
    var value = void 0;
    return function () {
      if (!value) value = fn();
      return value;
    };
  };
  function getPropertyValue(cssRule, prop) {
    try {
      return cssRule.style.getPropertyValue(prop);
    } catch (err) {
      return '';
    }
  }
  function setProperty(cssRule, prop, value) {
    try {
      var cssValue = value;
      if (Array.isArray(value)) {
        cssValue = (0, _toCssValue2['default'])(value, true);
        if (value[value.length - 1] === '!important') {
          cssRule.style.setProperty(prop, cssValue, 'important');
          return true;
        }
      }
      cssRule.style.setProperty(prop, cssValue);
    } catch (err) {
      return false;
    }
    return true;
  }
  function removeProperty(cssRule, prop) {
    try {
      cssRule.style.removeProperty(prop);
    } catch (err) {
      (0,
      _warning2[
        'default'
      ])(false, '[JSS] DOMException "%s" was thrown. Tried to remove property "%s".', err.message, prop);
    }
  }
  var CSSRuleTypes = {
    STYLE_RULE: 1,
    KEYFRAMES_RULE: 7,
  };
  var getKey = (function () {
    var extractKey = function extractKey(cssText) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return cssText.substr(from, cssText.indexOf('{') - 1);
    };
    return function (cssRule) {
      if (cssRule.type === CSSRuleTypes.STYLE_RULE) return cssRule.selectorText;
      if (cssRule.type === CSSRuleTypes.KEYFRAMES_RULE) {
        var name = cssRule.name;
        if (name) return '@keyframes ' + name;
        var cssText = cssRule.cssText;
        return '@' + extractKey(cssText, cssText.indexOf('keyframes'));
      }
      return extractKey(cssRule.cssText);
    };
  })();
  function setSelector(cssRule, selectorText) {
    cssRule.selectorText = selectorText;
    return cssRule.selectorText === selectorText;
  }
  var getHead = memoize(function () {
    return document.head || document.getElementsByTagName('head')[0];
  });
  var getUnescapedKeysMap = (function () {
    var style = void 0;
    var isAttached = false;
    return function (rules) {
      var map = {};
      if (!style) style = document.createElement('style');
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (!(rule instanceof _StyleRule2['default'])) continue;
        var selector = rule.selector;
        if (selector && selector.indexOf('\\') !== -1) {
          if (!isAttached) {
            getHead().appendChild(style);
            isAttached = true;
          }
          style.textContent = selector + ' {}';
          var _style = style,
            sheet = _style.sheet;
          if (sheet) {
            var cssRules = sheet.cssRules;
            if (cssRules) map[cssRules[0].selectorText] = rule.key;
          }
        }
      }
      if (isAttached) {
        getHead().removeChild(style);
        isAttached = false;
      }
      return map;
    };
  })();
  function findHigherSheet(registry, options) {
    for (var i = 0; i < registry.length; i++) {
      var sheet = registry[i];
      if (
        sheet.attached &&
        sheet.options.index > options.index &&
        sheet.options.insertionPoint === options.insertionPoint
      ) {
        return sheet;
      }
    }
    return null;
  }
  function findHighestSheet(registry, options) {
    for (var i = registry.length - 1; i >= 0; i--) {
      var sheet = registry[i];
      if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findCommentNode(text) {
    var head = getHead();
    for (var i = 0; i < head.childNodes.length; i++) {
      var node = head.childNodes[i];
      if (node.nodeType === 8 && node.nodeValue.trim() === text) {
        return node;
      }
    }
    return null;
  }
  function findPrevNode(options) {
    var registry = _sheets2['default'].registry;
    if (registry.length > 0) {
      var sheet = findHigherSheet(registry, options);
      if (sheet) return sheet.renderer.element;
      sheet = findHighestSheet(registry, options);
      if (sheet) return sheet.renderer.element.nextElementSibling;
    }
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === 'string') {
      var comment = findCommentNode(insertionPoint);
      if (comment) return comment.nextSibling;
      (0, _warning2['default'])(insertionPoint === 'jss', '[JSS] Insertion point "%s" not found.', insertionPoint);
    }
    return null;
  }
  function insertStyle(style, options) {
    var insertionPoint = options.insertionPoint;
    var prevNode = findPrevNode(options);
    if (prevNode) {
      var parentNode = prevNode.parentNode;
      if (parentNode) parentNode.insertBefore(style, prevNode);
      return;
    }
    if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
      var insertionPointElement = insertionPoint;
      var _parentNode = insertionPointElement.parentNode;
      if (_parentNode) _parentNode.insertBefore(style, insertionPointElement.nextSibling);
      else (0, _warning2['default'])(false, '[JSS] Insertion point is not in the DOM.');
      return;
    }
    getHead().insertBefore(style, prevNode);
  }
  var getNonce = memoize(function () {
    var node = document.querySelector('meta[property="csp-nonce"]');
    return node ? node.getAttribute('content') : null;
  });
  var DomRenderer = (function () {
    function DomRenderer(sheet) {
      _classCallCheck(this, DomRenderer);
      this.getPropertyValue = getPropertyValue;
      this.setProperty = setProperty;
      this.removeProperty = removeProperty;
      this.setSelector = setSelector;
      this.getKey = getKey;
      this.getUnescapedKeysMap = getUnescapedKeysMap;
      this.hasInsertedRules = false;
      if (sheet) _sheets2['default'].add(sheet);
      this.sheet = sheet;
      var _ref = this.sheet ? this.sheet.options : {},
        media = _ref.media,
        meta = _ref.meta,
        element = _ref.element;
      this.element = element || document.createElement('style');
      this.element.setAttribute('data-jss', '');
      if (media) this.element.setAttribute('media', media);
      if (meta) this.element.setAttribute('data-meta', meta);
      var nonce = getNonce();
      if (nonce) this.element.setAttribute('nonce', nonce);
    }
    _createClass(DomRenderer, [
      {
        key: 'attach',
        value: function attach() {
          if (this.element.parentNode || !this.sheet) return;
          if (this.hasInsertedRules) {
            this.deploy();
            this.hasInsertedRules = false;
          }
          insertStyle(this.element, this.sheet.options);
        },
      },
      {
        key: 'detach',
        value: function detach() {
          this.element.parentNode.removeChild(this.element);
        },
      },
      {
        key: 'deploy',
        value: function deploy() {
          if (!this.sheet) return;
          this.element.textContent = '\n' + this.sheet.toString() + '\n';
        },
      },
      {
        key: 'insertRule',
        value: function insertRule(rule, index) {
          var sheet = this.element.sheet;
          var cssRules = sheet.cssRules;
          var str = rule.toString();
          if (!index) index = cssRules.length;
          if (!str) return false;
          try {
            sheet.insertRule(str, index);
          } catch (err) {
            (0, _warning2['default'])(false, '[JSS] Can not insert an unsupported rule \n\r%s', rule);
            return false;
          }
          this.hasInsertedRules = true;
          return cssRules[index];
        },
      },
      {
        key: 'deleteRule',
        value: function deleteRule(cssRule) {
          var sheet = this.element.sheet;
          var index = this.indexOf(cssRule);
          if (index === -1) return false;
          sheet.deleteRule(index);
          return true;
        },
      },
      {
        key: 'indexOf',
        value: function indexOf(cssRule) {
          var cssRules = this.element.sheet.cssRules;
          for (var _index = 0; _index < cssRules.length; _index++) {
            if (cssRule === cssRules[_index]) return _index;
          }
          return -1;
        },
      },
      {
        key: 'replaceRule',
        value: function replaceRule(cssRule, rule) {
          var index = this.indexOf(cssRule);
          var newCssRule = this.insertRule(rule, index);
          this.element.sheet.deleteRule(index);
          return newCssRule;
        },
      },
      {
        key: 'getRules',
        value: function getRules() {
          return this.element.sheet.cssRules;
        },
      },
    ]);
    return DomRenderer;
  })();
  exports['default'] = DomRenderer;
});
unwrapExports(DomRenderer_1);
var VirtualRenderer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var VirtualRenderer = (function () {
    function VirtualRenderer() {
      _classCallCheck(this, VirtualRenderer);
    }
    _createClass(VirtualRenderer, [
      {
        key: 'setProperty',
        value: function setProperty() {
          return true;
        },
      },
      {
        key: 'getPropertyValue',
        value: function getPropertyValue() {
          return '';
        },
      },
      {
        key: 'removeProperty',
        value: function removeProperty() {},
      },
      {
        key: 'setSelector',
        value: function setSelector() {
          return true;
        },
      },
      {
        key: 'getKey',
        value: function getKey() {
          return '';
        },
      },
      {
        key: 'attach',
        value: function attach() {},
      },
      {
        key: 'detach',
        value: function detach() {},
      },
      {
        key: 'deploy',
        value: function deploy() {},
      },
      {
        key: 'insertRule',
        value: function insertRule() {
          return false;
        },
      },
      {
        key: 'deleteRule',
        value: function deleteRule() {
          return true;
        },
      },
      {
        key: 'replaceRule',
        value: function replaceRule() {
          return false;
        },
      },
      {
        key: 'getRules',
        value: function getRules() {},
      },
      {
        key: 'indexOf',
        value: function indexOf() {
          return -1;
        },
      },
    ]);
    return VirtualRenderer;
  })();
  exports['default'] = VirtualRenderer;
});
unwrapExports(VirtualRenderer_1);
var Jss_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _typeof =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
            ? 'symbol'
            : typeof obj;
        };
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  var _isInBrowser2 = _interopRequireDefault(isBrowser);
  var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);
  var _PluginsRegistry2 = _interopRequireDefault(PluginsRegistry_1);
  var _rules2 = _interopRequireDefault(rules);
  var _observables2 = _interopRequireDefault(observables);
  var _functions2 = _interopRequireDefault(functions);
  var _sheets2 = _interopRequireDefault(sheets);
  var _StyleRule2 = _interopRequireDefault(StyleRule_1);
  var _createGenerateClassName2 = _interopRequireDefault(createGenerateClassName);
  var _createRule3 = _interopRequireDefault(createRule_1);
  var _DomRenderer2 = _interopRequireDefault(DomRenderer_1);
  var _VirtualRenderer2 = _interopRequireDefault(VirtualRenderer_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var defaultPlugins = _rules2['default'].concat([_observables2['default'], _functions2['default']]);
  var instanceCounter = 0;
  var Jss = (function () {
    function Jss(options) {
      _classCallCheck(this, Jss);
      this.id = instanceCounter++;
      this.version = '9.8.7';
      this.plugins = new _PluginsRegistry2['default']();
      this.options = {
        createGenerateClassName: _createGenerateClassName2['default'],
        Renderer: _isInBrowser2['default'] ? _DomRenderer2['default'] : _VirtualRenderer2['default'],
        plugins: [],
      };
      this.generateClassName = (0, _createGenerateClassName2['default'])();
      this.use.apply(this, defaultPlugins);
      this.setup(options);
    }
    _createClass(Jss, [
      {
        key: 'setup',
        value: function setup() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          if (options.createGenerateClassName) {
            this.options.createGenerateClassName = options.createGenerateClassName;
            this.generateClassName = options.createGenerateClassName();
          }
          if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
          if (options.virtual || options.Renderer) {
            this.options.Renderer =
              options.Renderer || (options.virtual ? _VirtualRenderer2['default'] : _DomRenderer2['default']);
          }
          if (options.plugins) this.use.apply(this, options.plugins);
          return this;
        },
      },
      {
        key: 'createStyleSheet',
        value: function createStyleSheet(styles) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var index = options.index;
          if (typeof index !== 'number') {
            index = _sheets2['default'].index === 0 ? 0 : _sheets2['default'].index + 1;
          }
          var sheet = new _StyleSheet2['default'](
            styles,
            _extends({}, options, {
              jss: this,
              generateClassName: options.generateClassName || this.generateClassName,
              insertionPoint: this.options.insertionPoint,
              Renderer: this.options.Renderer,
              index: index,
            }),
          );
          this.plugins.onProcessSheet(sheet);
          return sheet;
        },
      },
      {
        key: 'removeStyleSheet',
        value: function removeStyleSheet(sheet) {
          sheet.detach();
          _sheets2['default'].remove(sheet);
          return this;
        },
      },
      {
        key: 'createRule',
        value: function createRule(name) {
          var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
            options = style;
            style = name;
            name = undefined;
          }
          var ruleOptions = options;
          ruleOptions.jss = this;
          ruleOptions.Renderer = this.options.Renderer;
          if (!ruleOptions.generateClassName) ruleOptions.generateClassName = this.generateClassName;
          if (!ruleOptions.classes) ruleOptions.classes = {};
          var rule = (0, _createRule3['default'])(name, style, ruleOptions);
          if (!ruleOptions.selector && rule instanceof _StyleRule2['default']) {
            rule.selector = '.' + ruleOptions.generateClassName(rule);
          }
          this.plugins.onProcessRule(rule);
          return rule;
        },
      },
      {
        key: 'use',
        value: function use() {
          var _this = this;
          for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
            plugins[_key] = arguments[_key];
          }
          plugins.forEach(function (plugin) {
            if (_this.options.plugins.indexOf(plugin) === -1) {
              _this.options.plugins.push(plugin);
              _this.plugins.use(plugin);
            }
          });
          return this;
        },
      },
    ]);
    return Jss;
  })();
  exports['default'] = Jss;
});
unwrapExports(Jss_1);
var lib = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.create =
    exports.createGenerateClassName =
    exports.sheets =
    exports.RuleList =
    exports.SheetsManager =
    exports.SheetsRegistry =
    exports.toCssValue =
    exports.getDynamicStyles =
      undefined;
  Object.defineProperty(exports, 'getDynamicStyles', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(getDynamicStyles_1)['default'];
    },
  });
  Object.defineProperty(exports, 'toCssValue', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(toCssValue_1)['default'];
    },
  });
  Object.defineProperty(exports, 'SheetsRegistry', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(SheetsRegistry_1)['default'];
    },
  });
  Object.defineProperty(exports, 'SheetsManager', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(SheetsManager_1)['default'];
    },
  });
  Object.defineProperty(exports, 'RuleList', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(RuleList_1)['default'];
    },
  });
  Object.defineProperty(exports, 'sheets', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(sheets)['default'];
    },
  });
  Object.defineProperty(exports, 'createGenerateClassName', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(createGenerateClassName)['default'];
    },
  });
  var _Jss2 = _interopRequireDefault(Jss_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var create = (exports.create = function create(options) {
    return new _Jss2['default'](options);
  });
  exports['default'] = create();
});
unwrapExports(lib);
var lib_1 = lib.create;
var lib_2 = lib.createGenerateClassName;
var lib_3 = lib.sheets;
var lib_4 = lib.RuleList;
var lib_5 = lib.SheetsManager;
var lib_6 = lib.SheetsRegistry;
var lib_7 = lib.toCssValue;
var lib_8 = lib.getDynamicStyles;
var lib$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  exports['default'] = jssGlobal;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }
  var propKey = '@global';
  var prefixKey = '@global ';
  var GlobalContainerRule = (function () {
    function GlobalContainerRule(key, styles, options) {
      _classCallCheck(this, GlobalContainerRule);
      this.type = 'global';
      this.key = key;
      this.options = options;
      this.rules = new lib.RuleList(
        _extends({}, options, {
          parent: this,
        }),
      );
      for (var selector in styles) {
        this.rules.add(selector, styles[selector], {
          selector: selector,
        });
      }
      this.rules.process();
    }
    _createClass(GlobalContainerRule, [
      {
        key: 'getRule',
        value: function getRule(name) {
          return this.rules.get(name);
        },
      },
      {
        key: 'addRule',
        value: function addRule(name, style, options) {
          var rule = this.rules.add(name, style, options);
          this.options.jss.plugins.onProcessRule(rule);
          return rule;
        },
      },
      {
        key: 'indexOf',
        value: function indexOf(rule) {
          return this.rules.indexOf(rule);
        },
      },
      {
        key: 'toString',
        value: function toString() {
          return this.rules.toString();
        },
      },
    ]);
    return GlobalContainerRule;
  })();
  var GlobalPrefixedRule = (function () {
    function GlobalPrefixedRule(name, style, options) {
      _classCallCheck(this, GlobalPrefixedRule);
      this.name = name;
      this.options = options;
      var selector = name.substr(prefixKey.length);
      this.rule = options.jss.createRule(
        selector,
        style,
        _extends({}, options, {
          parent: this,
          selector: selector,
        }),
      );
    }
    _createClass(GlobalPrefixedRule, [
      {
        key: 'toString',
        value: function toString(options) {
          return this.rule.toString(options);
        },
      },
    ]);
    return GlobalPrefixedRule;
  })();
  var separatorRegExp = /\s*,\s*/g;
  function addScope(selector, scope) {
    var parts = selector.split(separatorRegExp);
    var scoped = '';
    for (var i = 0; i < parts.length; i++) {
      scoped += scope + ' ' + parts[i].trim();
      if (parts[i + 1]) scoped += ', ';
    }
    return scoped;
  }
  function handleNestedGlobalContainerRule(rule) {
    var options = rule.options,
      style = rule.style;
    var rules = style[propKey];
    if (!rules) return;
    for (var name in rules) {
      options.sheet.addRule(
        name,
        rules[name],
        _extends({}, options, {
          selector: addScope(name, rule.selector),
        }),
      );
    }
    delete style[propKey];
  }
  function handlePrefixedGlobalRule(rule) {
    var options = rule.options,
      style = rule.style;
    for (var prop in style) {
      if (prop.substr(0, propKey.length) !== propKey) continue;
      var selector = addScope(prop.substr(propKey.length), rule.selector);
      options.sheet.addRule(
        selector,
        style[prop],
        _extends({}, options, {
          selector: selector,
        }),
      );
      delete style[prop];
    }
  }
  function jssGlobal() {
    function onCreateRule(name, styles, options) {
      if (name === propKey) {
        return new GlobalContainerRule(name, styles, options);
      }
      if (name[0] === '@' && name.substr(0, prefixKey.length) === prefixKey) {
        return new GlobalPrefixedRule(name, styles, options);
      }
      var parent = options.parent;
      if (parent) {
        if (parent.type === 'global' || parent.options.parent.type === 'global') {
          options.global = true;
        }
      }
      if (options.global) options.selector = name;
      return null;
    }
    function onProcessRule(rule) {
      if (rule.type !== 'style') return;
      handleNestedGlobalContainerRule(rule);
      handlePrefixedGlobalRule(rule);
    }
    return {
      onCreateRule: onCreateRule,
      onProcessRule: onProcessRule,
    };
  }
});
unwrapExports(lib$1);
var warning$2 = function () {};
{
  warning$2 = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
          'warning. Please, use a more descriptive format than: ' +
          format,
      );
    }
    if (!condition) {
      var argIndex = 0;
      var message =
        'Warning: ' +
        format.replace(/%s/g, function () {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    }
  };
}
var browser$1 = warning$2;
var lib$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  exports.default = jssNested;
  var _warning2 = _interopRequireDefault(browser$1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var separatorRegExp = /\s*,\s*/g;
  var parentRegExp = /&/g;
  var refRegExp = /\$([\w-]+)/g;
  function jssNested() {
    function getReplaceRef(container) {
      return function (match, key) {
        var rule = container.getRule(key);
        if (rule) return rule.selector;
        (0,
        _warning2.default)(false, '[JSS] Could not find the referenced rule %s in %s.', key, container.options.meta || container);
        return key;
      };
    }
    var hasAnd = function hasAnd(str) {
      return str.indexOf('&') !== -1;
    };
    function replaceParentRefs(nestedProp, parentProp) {
      var parentSelectors = parentProp.split(separatorRegExp);
      var nestedSelectors = nestedProp.split(separatorRegExp);
      var result = '';
      for (var i = 0; i < parentSelectors.length; i++) {
        var parent = parentSelectors[i];
        for (var j = 0; j < nestedSelectors.length; j++) {
          var nested = nestedSelectors[j];
          if (result) result += ', ';
          result += hasAnd(nested) ? nested.replace(parentRegExp, parent) : parent + ' ' + nested;
        }
      }
      return result;
    }
    function getOptions(rule, container, options) {
      if (options)
        return _extends({}, options, {
          index: options.index + 1,
        });
      var nestingLevel = rule.options.nestingLevel;
      nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;
      return _extends({}, rule.options, {
        nestingLevel: nestingLevel,
        index: container.indexOf(rule) + 1,
      });
    }
    function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      var container = rule.options.parent;
      var options = void 0;
      var replaceRef = void 0;
      for (var prop in style) {
        var isNested = hasAnd(prop);
        var isNestedConditional = prop[0] === '@';
        if (!isNested && !isNestedConditional) continue;
        options = getOptions(rule, container, options);
        if (isNested) {
          var selector = replaceParentRefs(prop, rule.selector);
          if (!replaceRef) replaceRef = getReplaceRef(container);
          selector = selector.replace(refRegExp, replaceRef);
          container.addRule(
            selector,
            style[prop],
            _extends({}, options, {
              selector: selector,
            }),
          );
        } else if (isNestedConditional) {
          container.addRule(prop, null, options).addRule(rule.key, style[prop], {
            selector: rule.selector,
          });
        }
        delete style[prop];
      }
      return style;
    }
    return {
      onProcessStyle: onProcessStyle,
    };
  }
});
unwrapExports(lib$2);
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};
function toHyphenLower(match) {
  return '-' + match.toLowerCase();
}
function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name];
  }
  var hName = name.replace(uppercasePattern, toHyphenLower);
  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName);
}
var lib$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = camelCase;
  var _hyphenateStyleName2 = _interopRequireDefault(hyphenateStyleName);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function convertCase(style) {
    var converted = {};
    for (var prop in style) {
      converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];
    }
    if (style.fallbacks) {
      if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);
      else converted.fallbacks = convertCase(style.fallbacks);
    }
    return converted;
  }
  function camelCase() {
    function onProcessStyle(style) {
      if (Array.isArray(style)) {
        for (var index = 0; index < style.length; index++) {
          style[index] = convertCase(style[index]);
        }
        return style;
      }
      return convertCase(style);
    }
    function onChangeValue(value, prop, rule) {
      var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);
      if (prop === hyphenatedProp) return value;
      rule.prop(hyphenatedProp, value);
      return null;
    }
    return {
      onProcessStyle: onProcessStyle,
      onChangeValue: onChangeValue,
    };
  }
});
unwrapExports(lib$3);
var defaultUnits = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = {
    'animation-delay': 'ms',
    'animation-duration': 'ms',
    'background-position': 'px',
    'background-position-x': 'px',
    'background-position-y': 'px',
    'background-size': 'px',
    border: 'px',
    'border-bottom': 'px',
    'border-bottom-left-radius': 'px',
    'border-bottom-right-radius': 'px',
    'border-bottom-width': 'px',
    'border-left': 'px',
    'border-left-width': 'px',
    'border-radius': 'px',
    'border-right': 'px',
    'border-right-width': 'px',
    'border-spacing': 'px',
    'border-top': 'px',
    'border-top-left-radius': 'px',
    'border-top-right-radius': 'px',
    'border-top-width': 'px',
    'border-width': 'px',
    'border-after-width': 'px',
    'border-before-width': 'px',
    'border-end-width': 'px',
    'border-horizontal-spacing': 'px',
    'border-start-width': 'px',
    'border-vertical-spacing': 'px',
    bottom: 'px',
    'box-shadow': 'px',
    'column-gap': 'px',
    'column-rule': 'px',
    'column-rule-width': 'px',
    'column-width': 'px',
    'flex-basis': 'px',
    'font-size': 'px',
    'font-size-delta': 'px',
    height: 'px',
    left: 'px',
    'letter-spacing': 'px',
    'logical-height': 'px',
    'logical-width': 'px',
    margin: 'px',
    'margin-after': 'px',
    'margin-before': 'px',
    'margin-bottom': 'px',
    'margin-left': 'px',
    'margin-right': 'px',
    'margin-top': 'px',
    'max-height': 'px',
    'max-width': 'px',
    'margin-end': 'px',
    'margin-start': 'px',
    'mask-position-x': 'px',
    'mask-position-y': 'px',
    'mask-size': 'px',
    'max-logical-height': 'px',
    'max-logical-width': 'px',
    'min-height': 'px',
    'min-width': 'px',
    'min-logical-height': 'px',
    'min-logical-width': 'px',
    motion: 'px',
    'motion-offset': 'px',
    outline: 'px',
    'outline-offset': 'px',
    'outline-width': 'px',
    padding: 'px',
    'padding-bottom': 'px',
    'padding-left': 'px',
    'padding-right': 'px',
    'padding-top': 'px',
    'padding-after': 'px',
    'padding-before': 'px',
    'padding-end': 'px',
    'padding-start': 'px',
    'perspective-origin-x': '%',
    'perspective-origin-y': '%',
    perspective: 'px',
    right: 'px',
    'shape-margin': 'px',
    size: 'px',
    'text-indent': 'px',
    'text-stroke': 'px',
    'text-stroke-width': 'px',
    top: 'px',
    'transform-origin': '%',
    'transform-origin-x': '%',
    'transform-origin-y': '%',
    'transform-origin-z': '%',
    'transition-delay': 'ms',
    'transition-duration': 'ms',
    'vertical-align': 'px',
    width: 'px',
    'word-spacing': 'px',
    'box-shadow-x': 'px',
    'box-shadow-y': 'px',
    'box-shadow-blur': 'px',
    'box-shadow-spread': 'px',
    'font-line-height': 'px',
    'text-shadow-x': 'px',
    'text-shadow-y': 'px',
    'text-shadow-blur': 'px',
  };
});
unwrapExports(defaultUnits);
var lib$4 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _typeof =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
            ? 'symbol'
            : typeof obj;
        };
  exports['default'] = defaultUnit;
  var _defaultUnits2 = _interopRequireDefault(defaultUnits);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function addCamelCasedVersion(obj) {
    var regExp = /(-[a-z])/g;
    var replace = function replace(str) {
      return str[1].toUpperCase();
    };
    var newObj = {};
    for (var key in obj) {
      newObj[key] = obj[key];
      newObj[key.replace(regExp, replace)] = obj[key];
    }
    return newObj;
  }
  var units = addCamelCasedVersion(_defaultUnits2['default']);
  function iterate(prop, value, options) {
    if (!value) return value;
    var convertedValue = value;
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
    if (type === 'object' && Array.isArray(value)) type = 'array';
    switch (type) {
      case 'object':
        if (prop === 'fallbacks') {
          for (var innerProp in value) {
            value[innerProp] = iterate(innerProp, value[innerProp], options);
          }
          break;
        }
        for (var _innerProp in value) {
          value[_innerProp] = iterate(prop + '-' + _innerProp, value[_innerProp], options);
        }
        break;
      case 'array':
        for (var i = 0; i < value.length; i++) {
          value[i] = iterate(prop, value[i], options);
        }
        break;
      case 'number':
        if (value !== 0) {
          convertedValue = value + (options[prop] || units[prop] || '');
        }
        break;
    }
    return convertedValue;
  }
  function defaultUnit() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var camelCasedOptions = addCamelCasedVersion(options);
    function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      for (var prop in style) {
        style[prop] = iterate(prop, style[prop], camelCasedOptions);
      }
      return style;
    }
    function onChangeValue(value, prop) {
      return iterate(prop, value, camelCasedOptions);
    }
    return {
      onProcessStyle: onProcessStyle,
      onChangeValue: onChangeValue,
    };
  }
});
unwrapExports(lib$4);
var prefix = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  var _isInBrowser2 = _interopRequireDefault(isBrowser);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var js = '';
  var css = '';
  if (_isInBrowser2['default']) {
    var jsCssMap = {
      Moz: '-moz-',
      ms: '-ms-',
      O: '-o-',
      Webkit: '-webkit-',
    };
    var style = document.createElement('p').style;
    var testProp = 'Transform';
    for (var key in jsCssMap) {
      if (key + testProp in style) {
        js = key;
        css = jsCssMap[key];
        break;
      }
    }
  }
  exports['default'] = {
    js: js,
    css: css,
  };
});
unwrapExports(prefix);
var camelize_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = camelize;
  var regExp = /[-\s]+(.)?/g;
  function camelize(str) {
    return str.replace(regExp, toUpper);
  }
  function toUpper(match, c) {
    return c ? c.toUpperCase() : '';
  }
});
unwrapExports(camelize_1);
var supportedProperty_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = supportedProperty;
  var _isInBrowser2 = _interopRequireDefault(isBrowser);
  var _prefix2 = _interopRequireDefault(prefix);
  var _camelize2 = _interopRequireDefault(camelize_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var el = void 0;
  var cache = {};
  if (_isInBrowser2['default']) {
    el = document.createElement('p');
    var computed = window.getComputedStyle(document.documentElement, '');
    for (var key in computed) {
      if (!isNaN(key)) cache[computed[key]] = computed[key];
    }
  }
  function supportedProperty(prop) {
    if (!el) return prop;
    if (cache[prop] != null) return cache[prop];
    if ((0, _camelize2['default'])(prop) in el.style) {
      cache[prop] = prop;
    } else if (_prefix2['default'].js + (0, _camelize2['default'])('-' + prop) in el.style) {
      cache[prop] = _prefix2['default'].css + prop;
    } else {
      cache[prop] = false;
    }
    return cache[prop];
  }
});
unwrapExports(supportedProperty_1);
var supportedValue_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = supportedValue;
  var _isInBrowser2 = _interopRequireDefault(isBrowser);
  var _prefix2 = _interopRequireDefault(prefix);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var cache = {};
  var el = void 0;
  if (_isInBrowser2['default']) el = document.createElement('p');
  function supportedValue(property, value) {
    if (!el) return value;
    if (typeof value !== 'string' || !isNaN(parseInt(value, 10))) return value;
    var cacheKey = property + value;
    if (cache[cacheKey] != null) return cache[cacheKey];
    try {
      el.style[property] = value;
    } catch (err) {
      cache[cacheKey] = false;
      return false;
    }
    if (el.style[property] !== '') {
      cache[cacheKey] = value;
    } else {
      value = _prefix2['default'].css + value;
      if (value === '-ms-flex') value = '-ms-flexbox';
      el.style[property] = value;
      if (el.style[property] !== '') cache[cacheKey] = value;
    }
    if (!cache[cacheKey]) cache[cacheKey] = false;
    el.style[property] = '';
    return cache[cacheKey];
  }
});
unwrapExports(supportedValue_1);
var lib$5 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.supportedValue = exports.supportedProperty = exports.prefix = undefined;
  var _prefix2 = _interopRequireDefault(prefix);
  var _supportedProperty2 = _interopRequireDefault(supportedProperty_1);
  var _supportedValue2 = _interopRequireDefault(supportedValue_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  exports['default'] = {
    prefix: _prefix2['default'],
    supportedProperty: _supportedProperty2['default'],
    supportedValue: _supportedValue2['default'],
  };
  exports.prefix = _prefix2['default'];
  exports.supportedProperty = _supportedProperty2['default'];
  exports.supportedValue = _supportedValue2['default'];
});
unwrapExports(lib$5);
var lib_1$1 = lib$5.supportedValue;
var lib_2$1 = lib$5.supportedProperty;
var lib_3$1 = lib$5.prefix;
var lib$6 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = jssVendorPrefixer;
  var vendor = _interopRequireWildcard(lib$5);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }
      newObj['default'] = obj;
      return newObj;
    }
  }
  function jssVendorPrefixer() {
    function onProcessRule(rule) {
      if (rule.type === 'keyframes') {
        rule.key = '@' + vendor.prefix.css + rule.key.substr(1);
      }
    }
    function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      for (var prop in style) {
        var value = style[prop];
        var changeProp = false;
        var supportedProp = vendor.supportedProperty(prop);
        if (supportedProp && supportedProp !== prop) changeProp = true;
        var changeValue = false;
        var supportedValue = vendor.supportedValue(supportedProp, value);
        if (supportedValue && supportedValue !== value) changeValue = true;
        if (changeProp || changeValue) {
          if (changeProp) delete style[prop];
          style[supportedProp || prop] = supportedValue || value;
        }
      }
      return style;
    }
    function onChangeValue(value, prop) {
      return vendor.supportedValue(prop, value);
    }
    return {
      onProcessRule: onProcessRule,
      onProcessStyle: onProcessStyle,
      onChangeValue: onChangeValue,
    };
  }
});
unwrapExports(lib$6);
var lib$7 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports['default'] = jssPropsSort;
  function jssPropsSort() {
    function sort(prop0, prop1) {
      return prop0.length - prop1.length;
    }
    function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      var newStyle = {};
      var props = Object.keys(style).sort(sort);
      for (var prop in props) {
        newStyle[props[prop]] = style[props[prop]];
      }
      return newStyle;
    }
    return {
      onProcessStyle: onProcessStyle,
    };
  }
});
unwrapExports(lib$7);
var jssPreset_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _jssGlobal = interopRequireDefault(lib$1);
  var _jssNested = interopRequireDefault(lib$2);
  var _jssCamelCase = interopRequireDefault(lib$3);
  var _jssDefaultUnit = interopRequireDefault(lib$4);
  var _jssVendorPrefixer = interopRequireDefault(lib$6);
  var _jssPropsSort = interopRequireDefault(lib$7);
  function jssPreset() {
    return {
      plugins: [
        (0, _jssGlobal.default)(),
        (0, _jssNested.default)(),
        (0, _jssCamelCase.default)(),
        (0, _jssDefaultUnit.default)(),
        typeof window === 'undefined' ? null : (0, _jssVendorPrefixer.default)(),
        (0, _jssPropsSort.default)(),
      ],
    };
  }
  var _default = jssPreset;
  exports.default = _default;
});
unwrapExports(jssPreset_1);
var interopRequireWildcard = createCommonjsModule(function (module) {
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== 'function') return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    if (obj != null) {
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }
    newObj['default'] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  module.exports = _interopRequireWildcard;
});
unwrapExports(interopRequireWildcard);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}
var classCallCheck = _classCallCheck;
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var createClass = _createClass;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var assertThisInitialized = _assertThisInitialized;
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === 'object' || typeof call === 'function')) {
    return call;
  }
  return assertThisInitialized(self);
}
var possibleConstructorReturn = _possibleConstructorReturn;
var getPrototypeOf = createCommonjsModule(function (module) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
  module.exports = _getPrototypeOf;
});
var setPrototypeOf = createCommonjsModule(function (module) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf =
      Object.setPrototypeOf ||
      function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
    return _setPrototypeOf(o, p);
  }
  module.exports = _setPrototypeOf;
});
function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function');
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true,
    },
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}
var inherits = _inherits;
var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$2 = function () {};
{
  printWarning$2 = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn =
      maybeIterable && ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  var ANONYMOUS = '<<anonymous>>';
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use `PropTypes.checkPropTypes()` to call them. ' +
              'Read more at http://fb.me/use-check-prop-types',
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            printWarning$2(
              'You are manually calling a React.PropTypes validation ' +
                'function for the `' +
                propFullName +
                '` prop on `' +
                componentName +
                '`. This is deprecated ' +
                'and will throw in the standalone `prop-types` package. ' +
                'You may be seeing this warning due to a third-party PropTypes ' +
                'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                'for details.',
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError(
              'The ' +
                location +
                ' `' +
                propFullName +
                '` is marked as required ' +
                ('in `' + componentName + '`, but its value is `null`.'),
            );
          }
          return new PropTypeError(
            'The ' +
              location +
              ' `' +
              propFullName +
              '` is marked as required in ' +
              ('`' + componentName + '`, but its value is `undefined`.'),
          );
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') +
            ('`' + expectedType + '`.'),
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError(
          'Property `' +
            propFullName +
            '` of component `' +
            componentName +
            '` has invalid PropType notation inside arrayOf.',
        );
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'),
        );
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(
          propValue,
          i,
          componentName,
          location,
          propFullName + '[' + i + ']',
          ReactPropTypesSecret_1,
        );
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'),
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'),
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') +
            ('instance of `' + expectedClassName + '`.'),
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      {
        if (arguments.length > 1) {
          printWarning$2(
            'Invalid arguments supplied to oneOf, expected an array, got ' +
              arguments.length +
              ' arguments. ' +
              'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).',
          );
        } else {
          printWarning$2('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError(
        'Invalid ' +
          location +
          ' `' +
          propFullName +
          '` of value `' +
          String(propValue) +
          '` ' +
          ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'),
      );
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError(
          'Property `' +
            propFullName +
            '` of component `' +
            componentName +
            '` has invalid PropType notation inside objectOf.',
        );
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type ' +
            ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'),
        );
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(
            propValue,
            key,
            componentName,
            location,
            propFullName + '.' + key,
            ReactPropTypesSecret_1,
          );
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      printWarning$2('Invalid argument supplied to oneOfType, expected an instance of array.');
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$2(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
            'received ' +
            getPostfixForTypeWarning(checker) +
            ' at index ' +
            i +
            '.',
        );
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }
      return new PropTypeError(
        'Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'),
      );
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` supplied to ' +
            ('`' + componentName + '`, expected a ReactNode.'),
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type `' +
            propType +
            '` ' +
            ('supplied to `' + componentName + '`, expected `object`.'),
        );
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of type `' +
            propType +
            '` ' +
            ('supplied to `' + componentName + '`, expected `object`.'),
        );
      }
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` key `' +
              key +
              '` supplied to `' +
              componentName +
              '`.' +
              '\nBad object: ' +
              JSON.stringify(props[propName], null, '  ') +
              '\nValid keys: ' +
              JSON.stringify(Object.keys(shapeTypes), null, '  '),
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }
    if (!propValue) {
      return false;
    }
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
var propTypes = createCommonjsModule(function (module) {
  {
    var ReactIs = reactIs;
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }
});
function createBroadcast(initialState) {
  var listeners = {};
  var id = 1;
  var _state = initialState;
  function getState() {
    return _state;
  }
  function setState(state) {
    _state = state;
    var keys = Object.keys(listeners);
    var i = 0;
    var len = keys.length;
    for (; i < len; i++) {
      if (listeners[keys[i]]) {
        listeners[keys[i]](state);
      }
    }
  }
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('listener must be a function.');
    }
    var currentId = id;
    listeners[currentId] = listener;
    id += 1;
    return currentId;
  }
  function unsubscribe(id) {
    listeners[id] = undefined;
  }
  return {
    getState: getState,
    setState: setState,
    subscribe: subscribe,
    unsubscribe: unsubscribe,
  };
}
var themeListener_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.CHANNEL = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var CHANNEL = '__THEMING__';
  exports.CHANNEL = CHANNEL;
  var themeListener = {
    contextTypes: (0, _defineProperty2.default)({}, CHANNEL, function () {}),
    initial: function initial(context) {
      if (!context[CHANNEL]) {
        return null;
      }
      return context[CHANNEL].getState();
    },
    subscribe: function subscribe(context, cb) {
      if (!context[CHANNEL]) {
        return null;
      }
      return context[CHANNEL].subscribe(cb);
    },
    unsubscribe: function unsubscribe(context, subscriptionId) {
      if (context[CHANNEL]) {
        context[CHANNEL].unsubscribe(subscriptionId);
      }
    },
  };
  var _default = themeListener;
  exports.default = _default;
});
unwrapExports(themeListener_1);
var themeListener_2 = themeListener_1.CHANNEL;
var MuiThemeProvider = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.MuiThemeProviderOld = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _warning = interopRequireDefault(warning_1);
  var _brcast = interopRequireDefault(createBroadcast);
  var _themeListener = interopRequireWildcard(themeListener_1);
  var MuiThemeProviderOld = (function (_React$Component) {
    (0, _inherits2.default)(MuiThemeProviderOld, _React$Component);
    function MuiThemeProviderOld(props, context) {
      var _this;
      (0, _classCallCheck2.default)(this, MuiThemeProviderOld);
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (0, _getPrototypeOf2.default)(MuiThemeProviderOld).call(this),
      );
      _this.broadcast = (0, _brcast.default)();
      _this.outerTheme = _themeListener.default.initial(context);
      _this.broadcast.setState(_this.mergeOuterLocalTheme(props.theme));
      return _this;
    }
    (0, _createClass2.default)(MuiThemeProviderOld, [
      {
        key: 'getChildContext',
        value: function getChildContext() {
          var _ref;
          var _this$props = this.props,
            disableStylesGeneration = _this$props.disableStylesGeneration,
            sheetsCache = _this$props.sheetsCache,
            sheetsManager = _this$props.sheetsManager;
          var muiThemeProviderOptions = this.context.muiThemeProviderOptions || {};
          if (disableStylesGeneration !== undefined) {
            muiThemeProviderOptions.disableStylesGeneration = disableStylesGeneration;
          }
          if (sheetsCache !== undefined) {
            muiThemeProviderOptions.sheetsCache = sheetsCache;
          }
          if (sheetsManager !== undefined) {
            muiThemeProviderOptions.sheetsManager = sheetsManager;
          }
          return (
            (_ref = {}),
            (0, _defineProperty2.default)(_ref, _themeListener.CHANNEL, this.broadcast),
            (0, _defineProperty2.default)(_ref, 'muiThemeProviderOptions', muiThemeProviderOptions),
            _ref
          );
        },
      },
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var _this2 = this;
          this.unsubscribeId = _themeListener.default.subscribe(this.context, function (outerTheme) {
            _this2.outerTheme = outerTheme;
            _this2.broadcast.setState(_this2.mergeOuterLocalTheme(_this2.props.theme));
          });
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          if (this.props.theme !== prevProps.theme) {
            this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme));
          }
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this.unsubscribeId !== null) {
            _themeListener.default.unsubscribe(this.context, this.unsubscribeId);
          }
        },
      },
      {
        key: 'mergeOuterLocalTheme',
        value: function mergeOuterLocalTheme(localTheme) {
          if (typeof localTheme === 'function') {
            (0, _warning.default)(
              this.outerTheme,
              [
                'Material-UI: you are providing a theme function property ' + 'to the MuiThemeProvider component:',
                '<MuiThemeProvider theme={outerTheme => outerTheme} />',
                'However, no outer theme is present.',
                'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.',
              ].join('\n'),
            );
            return localTheme(this.outerTheme);
          }
          if (!this.outerTheme) {
            return localTheme;
          }
          return (0, _extends2.default)({}, this.outerTheme, localTheme);
        },
      },
      {
        key: 'render',
        value: function render() {
          return this.props.children;
        },
      },
    ]);
    return MuiThemeProviderOld;
  })(_react.default.Component);
  exports.MuiThemeProviderOld = MuiThemeProviderOld;
  MuiThemeProviderOld.propTypes = {
    children: _propTypes.default.node.isRequired,
    disableStylesGeneration: _propTypes.default.bool,
    sheetsCache: _propTypes.default.object,
    sheetsManager: _propTypes.default.object,
    theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired,
  };
  {
    MuiThemeProviderOld.propTypes = (0, index_es.exactProp)(MuiThemeProviderOld.propTypes);
  }
  MuiThemeProviderOld.childContextTypes = (0, _extends2.default)({}, _themeListener.default.contextTypes, {
    muiThemeProviderOptions: _propTypes.default.object,
  });
  MuiThemeProviderOld.contextTypes = (0, _extends2.default)({}, _themeListener.default.contextTypes, {
    muiThemeProviderOptions: _propTypes.default.object,
  });
  if (!index_es.ponyfillGlobal.__MUI_STYLES__) {
    index_es.ponyfillGlobal.__MUI_STYLES__ = {};
  }
  if (!index_es.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider) {
    index_es.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider = MuiThemeProviderOld;
  }
  var _default = index_es.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider;
  exports.default = _default;
});
unwrapExports(MuiThemeProvider);
var MuiThemeProvider_1 = MuiThemeProvider.MuiThemeProviderOld;
var createStyles_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = createStyles;
  function createStyles(styles) {
    return styles;
  }
});
unwrapExports(createStyles_1);
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true,
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true,
};
var FORWARD_REF_STATICS = {
  $$typeof: true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
};
var MEMO_STATICS = {
  $$typeof: true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true,
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
function getStatics(component) {
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  }
  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty$1 = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf$1 = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf$1(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }
    var keys = getOwnPropertyNames(sourceComponent);
    if (getOwnPropertySymbols$1) {
      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
    }
    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (
        !KNOWN_STATICS[key] &&
        !(blacklist && blacklist[key]) &&
        !(sourceStatics && sourceStatics[key]) &&
        !(targetStatics && targetStatics[key])
      ) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
        try {
          defineProperty$1(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
    return targetComponent;
  }
  return targetComponent;
}
var hoistNonReactStatics_cjs = hoistNonReactStatics;
var reactJssContext = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var ns = {
    jss: '64a55d578f856d258dc345b094a2a2b3',
    sheetsRegistry: 'd4bd0baacbc52bbd48bbb9eb24344ecd',
    sheetOptions: '6fc570d6bd61383819d0f9e7407c452d',
  };
  var _default = ns;
  exports.default = _default;
});
unwrapExports(reactJssContext);
var mergeClasses_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _warning = interopRequireDefault(warning_1);
  function mergeClasses() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var baseClasses = options.baseClasses,
      newClasses = options.newClasses,
      Component = options.Component;
    if (!newClasses) {
      return baseClasses;
    }
    var nextClasses = (0, _extends2.default)({}, baseClasses);
    if (typeof newClasses === 'string') {
      (0, _warning.default)(
        false,
        [
          'Material-UI: the value `'.concat(newClasses, '` ') +
            'provided to the classes property of '.concat((0, index_es.getDisplayName)(Component), ' is incorrect.'),
          'You might want to use the className property instead.',
        ].join('\n'),
      );
      return baseClasses;
    }
    Object.keys(newClasses).forEach(function (key) {
      (0,
      _warning.default)(baseClasses[key] || !newClasses[key], ['Material-UI: the key `'.concat(key, '` ') + 'provided to the classes property is not implemented in '.concat((0, index_es.getDisplayName)(Component), '.'), 'You can only override one of the following: '.concat(Object.keys(baseClasses).join(','), '.')].join('\n'));
      (0,
      _warning.default)(!newClasses[key] || typeof newClasses[key] === 'string', ['Material-UI: the key `'.concat(key, '` ') + 'provided to the classes property is not valid for '.concat((0, index_es.getDisplayName)(Component), '.'), 'You need to provide a non empty string instead of: '.concat(newClasses[key], '.')].join('\n'));
      if (newClasses[key]) {
        nextClasses[key] = ''.concat(baseClasses[key], ' ').concat(newClasses[key]);
      }
    });
    return nextClasses;
  }
  var _default = mergeClasses;
  exports.default = _default;
});
unwrapExports(mergeClasses_1);
var multiKeyStore_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var multiKeyStore = {
    set: function set(cache, key1, key2, value) {
      var subCache = cache.get(key1);
      if (!subCache) {
        subCache = new Map();
        cache.set(key1, subCache);
      }
      subCache.set(key2, value);
    },
    get: function get(cache, key1, key2) {
      var subCache = cache.get(key1);
      return subCache ? subCache.get(key2) : undefined;
    },
    delete: function _delete(cache, key1, key2) {
      var subCache = cache.get(key1);
      subCache.delete(key2);
    },
  };
  var _default = multiKeyStore;
  exports.default = _default;
});
unwrapExports(multiKeyStore_1);
var getStylesCreator_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _typeof2 = interopRequireDefault(_typeof_1);
  var _warning = interopRequireDefault(warning_1);
  var _deepmerge = interopRequireDefault(umd);
  function arrayMerge(destination, source) {
    return source;
  }
  function getStylesCreator(stylesOrCreator) {
    var themingEnabled = typeof stylesOrCreator === 'function';
    (0,
    _warning.default)((0, _typeof2.default)(stylesOrCreator) === 'object' || themingEnabled, ['Material-UI: the first argument provided to withStyles() is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
    function create(theme, name) {
      var styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
      if (!name || !theme.overrides || !theme.overrides[name]) {
        return styles;
      }
      var overrides = theme.overrides[name];
      var stylesWithOverrides = (0, _extends2.default)({}, styles);
      Object.keys(overrides).forEach(function (key) {
        (0,
        _warning.default)(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', 'Fix the `'.concat(key, '` key of `theme.overrides.').concat(name, '`.')].join('\n'));
        stylesWithOverrides[key] = (0, _deepmerge.default)(stylesWithOverrides[key], overrides[key], {
          arrayMerge: arrayMerge,
        });
      });
      return stylesWithOverrides;
    }
    return {
      create: create,
      options: {},
      themingEnabled: themingEnabled,
    };
  }
  var _default = getStylesCreator;
  exports.default = _default;
});
unwrapExports(getStylesCreator_1);
var getThemeProps_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  function getThemeProps(params) {
    var theme = params.theme,
      name = params.name,
      props = params.props;
    if (!theme.props || !name || !theme.props[name]) {
      return props;
    }
    var defaultProps = theme.props[name];
    var propName;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
    return props;
  }
  var _default = getThemeProps;
  exports.default = _default;
});
unwrapExports(getThemeProps_1);
var withStyles = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.sheetsManager = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends3 = interopRequireDefault(_extends_1);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _warning = interopRequireDefault(warning_1);
  var _hoistNonReactStatics = interopRequireDefault(hoistNonReactStatics_cjs);
  var _reactJssContext = interopRequireDefault(reactJssContext);
  var _jssPreset = interopRequireDefault(jssPreset_1);
  var _mergeClasses = interopRequireDefault(mergeClasses_1);
  var _multiKeyStore = interopRequireDefault(multiKeyStore_1);
  var _createMuiTheme = interopRequireDefault(createMuiTheme_1);
  var _themeListener = interopRequireDefault(themeListener_1);
  var _createGenerateClassName = interopRequireDefault(createGenerateClassName_1);
  var _getStylesCreator = interopRequireDefault(getStylesCreator_1);
  var _getThemeProps = interopRequireDefault(getThemeProps_1);
  var jss = (0, lib.create)((0, _jssPreset.default)());
  var generateClassName = (0, _createGenerateClassName.default)();
  var indexCounter = -10e10;
  var sheetsManager = new Map();
  exports.sheetsManager = sheetsManager;
  var noopTheme = {};
  var defaultTheme = (0, _createMuiTheme.default)({
    typography: {
      suppressWarning: true,
    },
  });
  var withStylesOld = function withStylesOld(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function (Component) {
      var _extends2;
      var _options$withTheme = options.withTheme,
        withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
        _options$flip = options.flip,
        flip = _options$flip === void 0 ? null : _options$flip,
        name = options.name,
        styleSheetOptions = (0, _objectWithoutProperties2.default)(options, ['withTheme', 'flip', 'name']);
      var stylesCreator = (0, _getStylesCreator.default)(stylesOrCreator);
      var listenToTheme = stylesCreator.themingEnabled || typeof name === 'string' || withTheme;
      indexCounter += 1;
      stylesCreator.options.index = indexCounter;
      (0, _warning.default)(
        indexCounter < 0,
        ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join(
          '\n',
        ),
      );
      var WithStyles = (function (_React$Component) {
        (0, _inherits2.default)(WithStyles, _React$Component);
        function WithStyles(props, context) {
          var _this;
          (0, _classCallCheck2.default)(this, WithStyles);
          _this = (0, _possibleConstructorReturn2.default)(
            this,
            (0, _getPrototypeOf2.default)(WithStyles).call(this, props, context),
          );
          _this.jss = context[_reactJssContext.default.jss] || jss;
          _this.sheetsManager = sheetsManager;
          _this.unsubscribeId = null;
          var muiThemeProviderOptions = context.muiThemeProviderOptions;
          if (muiThemeProviderOptions) {
            if (muiThemeProviderOptions.sheetsManager) {
              _this.sheetsManager = muiThemeProviderOptions.sheetsManager;
            }
            _this.sheetsCache = muiThemeProviderOptions.sheetsCache;
            _this.disableStylesGeneration = muiThemeProviderOptions.disableStylesGeneration;
          }
          _this.stylesCreatorSaved = stylesCreator;
          _this.sheetOptions = (0, _extends3.default)(
            {
              generateClassName: generateClassName,
            },
            context[_reactJssContext.default.sheetOptions],
          );
          _this.theme = listenToTheme ? _themeListener.default.initial(context) || defaultTheme : noopTheme;
          _this.attach(_this.theme);
          _this.cacheClasses = {
            value: null,
            lastProp: null,
            lastJSS: {},
          };
          return _this;
        }
        (0, _createClass2.default)(WithStyles, [
          {
            key: 'componentDidMount',
            value: function componentDidMount() {
              var _this2 = this;
              if (!listenToTheme) {
                return;
              }
              this.unsubscribeId = _themeListener.default.subscribe(this.context, function (theme) {
                var oldTheme = _this2.theme;
                _this2.theme = theme;
                _this2.attach(_this2.theme);
                _this2.setState({}, function () {
                  _this2.detach(oldTheme);
                });
              });
            },
          },
          {
            key: 'componentDidUpdate',
            value: function componentDidUpdate() {
              if (this.stylesCreatorSaved === stylesCreator || undefined === 'production') {
                return;
              }
              this.detach(this.theme);
              this.stylesCreatorSaved = stylesCreator;
              this.attach(this.theme);
              this.forceUpdate();
            },
          },
          {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.detach(this.theme);
              if (this.unsubscribeId !== null) {
                _themeListener.default.unsubscribe(this.context, this.unsubscribeId);
              }
            },
          },
          {
            key: 'getClasses',
            value: function getClasses() {
              if (this.disableStylesGeneration) {
                return this.props.classes || {};
              }
              var generate = false;
              var sheetManager = _multiKeyStore.default.get(this.sheetsManager, this.stylesCreatorSaved, this.theme);
              if (sheetManager.sheet.classes !== this.cacheClasses.lastJSS) {
                this.cacheClasses.lastJSS = sheetManager.sheet.classes;
                generate = true;
              }
              if (this.props.classes !== this.cacheClasses.lastProp) {
                this.cacheClasses.lastProp = this.props.classes;
                generate = true;
              }
              if (generate) {
                this.cacheClasses.value = (0, _mergeClasses.default)({
                  baseClasses: this.cacheClasses.lastJSS,
                  newClasses: this.props.classes,
                  Component: Component,
                });
              }
              return this.cacheClasses.value;
            },
          },
          {
            key: 'attach',
            value: function attach(theme) {
              if (this.disableStylesGeneration) {
                return;
              }
              var stylesCreatorSaved = this.stylesCreatorSaved;
              var sheetManager = _multiKeyStore.default.get(this.sheetsManager, stylesCreatorSaved, theme);
              if (!sheetManager) {
                sheetManager = {
                  refs: 0,
                  sheet: null,
                };
                _multiKeyStore.default.set(this.sheetsManager, stylesCreatorSaved, theme, sheetManager);
              }
              if (sheetManager.refs === 0) {
                var sheet;
                if (this.sheetsCache) {
                  sheet = _multiKeyStore.default.get(this.sheetsCache, stylesCreatorSaved, theme);
                }
                if (!sheet) {
                  sheet = this.createSheet(theme);
                  sheet.attach();
                  if (this.sheetsCache) {
                    _multiKeyStore.default.set(this.sheetsCache, stylesCreatorSaved, theme, sheet);
                  }
                }
                sheetManager.sheet = sheet;
                var sheetsRegistry = this.context[_reactJssContext.default.sheetsRegistry];
                if (sheetsRegistry) {
                  sheetsRegistry.add(sheet);
                }
              }
              sheetManager.refs += 1;
            },
          },
          {
            key: 'createSheet',
            value: function createSheet(theme) {
              var styles = this.stylesCreatorSaved.create(theme, name);
              var meta = name;
              if (!meta) {
                meta = (0, index_es.getDisplayName)(Component);
                (0, _warning.default)(
                  typeof meta === 'string',
                  [
                    'Material-UI: the component displayName is invalid. It needs to be a string.',
                    'Please fix the following component: '.concat(Component, '.'),
                  ].join('\n'),
                );
              }
              var sheet = this.jss.createStyleSheet(
                styles,
                (0, _extends3.default)(
                  {
                    meta: meta,
                    classNamePrefix: meta,
                    flip: typeof flip === 'boolean' ? flip : theme.direction === 'rtl',
                    link: false,
                  },
                  this.sheetOptions,
                  this.stylesCreatorSaved.options,
                  {
                    name: name || Component.displayName,
                  },
                  styleSheetOptions,
                ),
              );
              return sheet;
            },
          },
          {
            key: 'detach',
            value: function detach(theme) {
              if (this.disableStylesGeneration) {
                return;
              }
              var sheetManager = _multiKeyStore.default.get(this.sheetsManager, this.stylesCreatorSaved, theme);
              sheetManager.refs -= 1;
              if (sheetManager.refs === 0) {
                _multiKeyStore.default.delete(this.sheetsManager, this.stylesCreatorSaved, theme);
                this.jss.removeStyleSheet(sheetManager.sheet);
                var sheetsRegistry = this.context[_reactJssContext.default.sheetsRegistry];
                if (sheetsRegistry) {
                  sheetsRegistry.remove(sheetManager.sheet);
                }
              }
            },
          },
          {
            key: 'render',
            value: function render() {
              var _this$props = this.props,
                classes = _this$props.classes,
                innerRef = _this$props.innerRef,
                other = (0, _objectWithoutProperties2.default)(_this$props, ['classes', 'innerRef']);
              var more = (0, _getThemeProps.default)({
                theme: this.theme,
                name: name,
                props: other,
              });
              if (withTheme && !more.theme) {
                more.theme = this.theme;
              }
              return _react.default.createElement(
                Component,
                (0, _extends3.default)({}, more, {
                  classes: this.getClasses(),
                  ref: innerRef,
                }),
              );
            },
          },
        ]);
        return WithStyles;
      })(_react.default.Component);
      WithStyles.propTypes = {
        classes: _propTypes.default.object,
        innerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
      };
      WithStyles.contextTypes = (0, _extends3.default)(
        ((_extends2 = {
          muiThemeProviderOptions: _propTypes.default.object,
        }),
        (0, _defineProperty2.default)(_extends2, _reactJssContext.default.jss, _propTypes.default.object),
        (0, _defineProperty2.default)(_extends2, _reactJssContext.default.sheetOptions, _propTypes.default.object),
        (0, _defineProperty2.default)(_extends2, _reactJssContext.default.sheetsRegistry, _propTypes.default.object),
        _extends2),
        listenToTheme ? _themeListener.default.contextTypes : {},
      );
      {
        WithStyles.displayName = 'WithStyles('.concat((0, index_es.getDisplayName)(Component), ')');
      }
      (0, _hoistNonReactStatics.default)(WithStyles, Component);
      {
        WithStyles.Naked = Component;
        WithStyles.options = options;
      }
      return WithStyles;
    };
  };
  if (!index_es.ponyfillGlobal.__MUI_STYLES__) {
    index_es.ponyfillGlobal.__MUI_STYLES__ = {};
  }
  if (!index_es.ponyfillGlobal.__MUI_STYLES__.withStyles) {
    index_es.ponyfillGlobal.__MUI_STYLES__.withStyles = withStylesOld;
  }
  var _default = function _default(styles, options) {
    return index_es.ponyfillGlobal.__MUI_STYLES__.withStyles(
      styles,
      (0, _extends3.default)(
        {
          defaultTheme: defaultTheme,
        },
        options,
      ),
    );
  };
  exports.default = _default;
});
unwrapExports(withStyles);
var withStyles_1 = withStyles.sheetsManager;
var withTheme = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _hoistNonReactStatics = interopRequireDefault(hoistNonReactStatics_cjs);
  var _createMuiTheme = interopRequireDefault(createMuiTheme_1);
  var _themeListener = interopRequireDefault(themeListener_1);
  var defaultTheme;
  function getDefaultTheme() {
    if (defaultTheme) {
      return defaultTheme;
    }
    defaultTheme = (0, _createMuiTheme.default)({
      typography: {
        suppressWarning: true,
      },
    });
    return defaultTheme;
  }
  var withThemeOld = function withThemeOld() {
    return function (Component) {
      var WithTheme = (function (_React$Component) {
        (0, _inherits2.default)(WithTheme, _React$Component);
        function WithTheme(props, context) {
          var _this;
          (0, _classCallCheck2.default)(this, WithTheme);
          _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(WithTheme).call(this));
          _this.state = {
            theme: _themeListener.default.initial(context) || getDefaultTheme(),
          };
          return _this;
        }
        (0, _createClass2.default)(WithTheme, [
          {
            key: 'componentDidMount',
            value: function componentDidMount() {
              var _this2 = this;
              this.unsubscribeId = _themeListener.default.subscribe(this.context, function (theme) {
                _this2.setState({
                  theme: theme,
                });
              });
            },
          },
          {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              if (this.unsubscribeId !== null) {
                _themeListener.default.unsubscribe(this.context, this.unsubscribeId);
              }
            },
          },
          {
            key: 'render',
            value: function render() {
              var _this$props = this.props,
                innerRef = _this$props.innerRef,
                other = (0, _objectWithoutProperties2.default)(_this$props, ['innerRef']);
              return _react.default.createElement(
                Component,
                (0, _extends2.default)(
                  {
                    theme: this.state.theme,
                    ref: innerRef,
                  },
                  other,
                ),
              );
            },
          },
        ]);
        return WithTheme;
      })(_react.default.Component);
      WithTheme.propTypes = {
        innerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
      };
      WithTheme.contextTypes = _themeListener.default.contextTypes;
      {
        WithTheme.displayName = 'WithTheme('.concat((0, index_es.getDisplayName)(Component), ')');
      }
      (0, _hoistNonReactStatics.default)(WithTheme, Component);
      {
        WithTheme.Naked = Component;
      }
      return WithTheme;
    };
  };
  if (!index_es.ponyfillGlobal.__MUI_STYLES__) {
    index_es.ponyfillGlobal.__MUI_STYLES__ = {};
  }
  if (!index_es.ponyfillGlobal.__MUI_STYLES__.withTheme) {
    index_es.ponyfillGlobal.__MUI_STYLES__.withTheme = withThemeOld;
  }
  var _default = index_es.ponyfillGlobal.__MUI_STYLES__.withTheme;
  exports.default = _default;
});
unwrapExports(withTheme);
var styles = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'createGenerateClassName', {
    enumerable: true,
    get: function get() {
      return _createGenerateClassName.default;
    },
  });
  Object.defineProperty(exports, 'createMuiTheme', {
    enumerable: true,
    get: function get() {
      return _createMuiTheme.default;
    },
  });
  Object.defineProperty(exports, 'jssPreset', {
    enumerable: true,
    get: function get() {
      return _jssPreset.default;
    },
  });
  Object.defineProperty(exports, 'MuiThemeProvider', {
    enumerable: true,
    get: function get() {
      return _MuiThemeProvider.default;
    },
  });
  Object.defineProperty(exports, 'createStyles', {
    enumerable: true,
    get: function get() {
      return _createStyles.default;
    },
  });
  Object.defineProperty(exports, 'withStyles', {
    enumerable: true,
    get: function get() {
      return _withStyles.default;
    },
  });
  Object.defineProperty(exports, 'withTheme', {
    enumerable: true,
    get: function get() {
      return _withTheme.default;
    },
  });
  var _createGenerateClassName = interopRequireDefault(createGenerateClassName_1);
  var _createMuiTheme = interopRequireDefault(createMuiTheme_1);
  var _jssPreset = interopRequireDefault(jssPreset_1);
  var _MuiThemeProvider = interopRequireDefault(MuiThemeProvider);
  var _createStyles = interopRequireDefault(createStyles_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _withTheme = interopRequireDefault(withTheme);
});
unwrapExports(styles);
var styles_1 = styles.createGenerateClassName;
var styles_2 = styles.createMuiTheme;
var styles_3 = styles.jssPreset;
var styles_4 = styles.MuiThemeProvider;
var styles_5 = styles.createStyles;
var styles_6 = styles.withStyles;
var styles_7 = styles.withTheme;
var classnames = createCommonjsModule(function (module) {
  (function () {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
        var argType = typeof arg;
        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg) && arg.length) {
          var inner = classNames.apply(null, arg);
          if (inner) {
            classes.push(inner);
          }
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
      return classes.join(' ');
    }
    if (module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
});
var helpers = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.capitalize = capitalize;
  exports.contains = contains;
  exports.findIndex = findIndex;
  exports.find = find;
  exports.createChainedFunction = createChainedFunction;
  var _typeof2 = interopRequireDefault(_typeof_1);
  var _warning = interopRequireDefault(warning_1);
  function capitalize(string) {
    if (typeof string !== 'string') {
      throw new Error('Material-UI: capitalize(string) expects a string argument.');
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  function contains(obj, pred) {
    return Object.keys(pred).every(function (key) {
      return obj.hasOwnProperty(key) && obj[key] === pred[key];
    });
  }
  function findIndex(arr, pred) {
    var predType = (0, _typeof2.default)(pred);
    for (var i = 0; i < arr.length; i += 1) {
      if (predType === 'function' && !!pred(arr[i], i, arr) === true) {
        return i;
      }
      if (predType === 'object' && contains(arr[i], pred)) {
        return i;
      }
      if (['string', 'number', 'boolean'].indexOf(predType) !== -1) {
        return arr.indexOf(pred);
      }
    }
    return -1;
  }
  function find(arr, pred) {
    var index = findIndex(arr, pred);
    return index > -1 ? arr[index] : undefined;
  }
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    return funcs.reduce(
      function (acc, func) {
        if (func == null) {
          return acc;
        }
        (0, _warning.default)(
          typeof func === 'function',
          'Material-UI: invalid Argument Type, must only provide functions, undefined, or null.',
        );
        return function chainedFunction() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          acc.apply(this, args);
          func.apply(this, args);
        };
      },
      function () {},
    );
  }
});
unwrapExports(helpers);
var helpers_1 = helpers.capitalize;
var helpers_2 = helpers.contains;
var helpers_3 = helpers.findIndex;
var helpers_4 = helpers.find;
var helpers_5 = helpers.createChainedFunction;
var Typography_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    return {
      root: {
        display: 'block',
        margin: 0,
      },
      display4: theme.typography.display4,
      display3: theme.typography.display3,
      display2: theme.typography.display2,
      display1: theme.typography.display1,
      headline: theme.typography.headline,
      title: theme.typography.title,
      subheading: theme.typography.subheading,
      body2: theme.typography.body2,
      body1: theme.typography.body1,
      caption: theme.typography.caption,
      button: theme.typography.button,
      h1: theme.typography.h1,
      h2: theme.typography.h2,
      h3: theme.typography.h3,
      h4: theme.typography.h4,
      h5: theme.typography.h5,
      h6: theme.typography.h6,
      subtitle1: theme.typography.subtitle1,
      subtitle2: theme.typography.subtitle2,
      overline: theme.typography.overline,
      srOnly: {
        position: 'absolute',
        height: 1,
        width: 1,
        overflow: 'hidden',
      },
      alignLeft: {
        textAlign: 'left',
      },
      alignCenter: {
        textAlign: 'center',
      },
      alignRight: {
        textAlign: 'right',
      },
      alignJustify: {
        textAlign: 'justify',
      },
      noWrap: {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
      },
      gutterBottom: {
        marginBottom: '0.35em',
      },
      paragraph: {
        marginBottom: 16,
      },
      colorInherit: {
        color: 'inherit',
      },
      colorPrimary: {
        color: theme.palette.primary.main,
      },
      colorSecondary: {
        color: theme.palette.secondary.main,
      },
      colorTextPrimary: {
        color: theme.palette.text.primary,
      },
      colorTextSecondary: {
        color: theme.palette.text.secondary,
      },
      colorError: {
        color: theme.palette.error.main,
      },
      inline: {
        display: 'inline',
      },
    };
  };
  exports.styles = styles;
  var nextVariants = {
    display4: 'h1',
    display3: 'h2',
    display2: 'h3',
    display1: 'h4',
    headline: 'h5',
    title: 'h6',
    subheading: 'subtitle1',
  };
  function getVariant(theme, variantProp) {
    var typography = theme.typography;
    var variant = variantProp;
    if (!variant) {
      variant = typography.useNextVariants ? 'body2' : 'body1';
    }
    if (typography.useNextVariants) {
      variant = nextVariants[variant] || variant;
    }
    return variant;
  }
  var defaultHeadlineMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    display4: 'h1',
    display3: 'h1',
    display2: 'h1',
    display1: 'h1',
    headline: 'h1',
    title: 'h2',
    subheading: 'h3',
  };
  function Typography(props) {
    var _classNames;
    var align = props.align,
      classes = props.classes,
      classNameProp = props.className,
      color = props.color,
      componentProp = props.component,
      gutterBottom = props.gutterBottom,
      headlineMapping = props.headlineMapping,
      inline = props.inline,
      internalDeprecatedVariant = props.internalDeprecatedVariant,
      noWrap = props.noWrap,
      paragraph = props.paragraph,
      theme = props.theme,
      variantProp = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'align',
        'classes',
        'className',
        'color',
        'component',
        'gutterBottom',
        'headlineMapping',
        'inline',
        'internalDeprecatedVariant',
        'noWrap',
        'paragraph',
        'theme',
        'variant',
      ]);
    var variant = getVariant(theme, variantProp);
    var className = (0, _classnames.default)(
      classes.root,
      ((_classNames = {}),
      (0, _defineProperty2.default)(_classNames, classes[variant], variant !== 'inherit'),
      (0, _defineProperty2.default)(
        _classNames,
        classes['color'.concat((0, helpers.capitalize)(color))],
        color !== 'default',
      ),
      (0, _defineProperty2.default)(_classNames, classes.noWrap, noWrap),
      (0, _defineProperty2.default)(_classNames, classes.gutterBottom, gutterBottom),
      (0, _defineProperty2.default)(_classNames, classes.paragraph, paragraph),
      (0, _defineProperty2.default)(
        _classNames,
        classes['align'.concat((0, helpers.capitalize)(align))],
        align !== 'inherit',
      ),
      (0, _defineProperty2.default)(_classNames, classes.inline, inline),
      _classNames),
      classNameProp,
    );
    var Component =
      componentProp || (paragraph ? 'p' : headlineMapping[variant] || defaultHeadlineMapping[variant]) || 'span';
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: className,
        },
        other,
      ),
    );
  }
  Typography.propTypes = {
    align: _propTypes.default.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    color: _propTypes.default.oneOf([
      'default',
      'error',
      'inherit',
      'primary',
      'secondary',
      'textPrimary',
      'textSecondary',
    ]),
    component: index_es.componentPropType,
    gutterBottom: _propTypes.default.bool,
    headlineMapping: _propTypes.default.object,
    inline: _propTypes.default.bool,
    internalDeprecatedVariant: _propTypes.default.bool,
    noWrap: _propTypes.default.bool,
    paragraph: _propTypes.default.bool,
    theme: _propTypes.default.object.isRequired,
    variant: (0, index_es.chainPropTypes)(
      _propTypes.default.oneOf([
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'subtitle1',
        'subtitle2',
        'body1',
        'body2',
        'caption',
        'button',
        'overline',
        'srOnly',
        'inherit',
        'display4',
        'display3',
        'display2',
        'display1',
        'headline',
        'title',
        'subheading',
      ]),
      function (props) {
        var deprecatedVariants = ['display4', 'display3', 'display2', 'display1', 'headline', 'title', 'subheading'];
        if (
          props.theme.typography.useNextVariants &&
          !props.internalDeprecatedVariant &&
          deprecatedVariants.indexOf(props.variant) !== -1
        ) {
          return new Error(
            'Material-UI: you are using a deprecated typography variant: ' +
              '`'.concat(props.variant, '` that will be removed in the next major release.\n') +
              'Please read the migration guide under https://material-ui.com/style/typography#migration-to-typography-v2.',
          );
        }
        return null;
      },
    ),
  };
  Typography.defaultProps = {
    align: 'inherit',
    color: 'default',
    gutterBottom: false,
    headlineMapping: defaultHeadlineMapping,
    inline: false,
    noWrap: false,
    paragraph: false,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiTypography',
    withTheme: true,
  })(Typography);
  exports.default = _default;
});
unwrapExports(Typography_1);
var Typography_2 = Typography_1.styles;
var Typography = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Typography.default;
    },
  });
  var _Typography = interopRequireDefault(Typography_1);
});
var Typography$1 = unwrapExports(Typography);
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
var ms = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match =
    /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str,
    );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}
function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}
function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}
function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = ms;
  Object.keys(env).forEach((key) => {
    createDebug[key] = env[key];
  });
  createDebug.instances = [];
  createDebug.names = [];
  createDebug.skips = [];
  createDebug.formatters = {};
  function selectColor(namespace) {
    let hash = 0;
    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }
  createDebug.selectColor = selectColor;
  function createDebug(namespace) {
    let prevTime;
    function debug(...args) {
      if (!debug.enabled) {
        return;
      }
      const self = debug;
      const curr = Number(new Date());
      const ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);
      if (typeof args[0] !== 'string') {
        args.unshift('%O');
      }
      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
        if (match === '%%') {
          return match;
        }
        index++;
        const formatter = createDebug.formatters[format];
        if (typeof formatter === 'function') {
          const val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      createDebug.formatArgs.call(self, args);
      const logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }
    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend;
    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }
    createDebug.instances.push(debug);
    return debug;
  }
  function destroy() {
    const index = createDebug.instances.indexOf(this);
    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }
    return false;
  }
  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    const len = split.length;
    for (i = 0; i < len; i++) {
      if (!split[i]) {
        continue;
      }
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
    for (i = 0; i < createDebug.instances.length; i++) {
      const instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  function disable() {
    const namespaces = [
      ...createDebug.names.map(toNamespace),
      ...createDebug.skips.map(toNamespace).map((namespace) => '-' + namespace),
    ].join(',');
    createDebug.enable('');
    return namespaces;
  }
  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }
    let i;
    let len;
    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function toNamespace(regexp) {
    return regexp
      .toString()
      .substring(2, regexp.toString().length - 2)
      .replace(/\.\*\?$/, '*');
  }
  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }
    return val;
  }
  createDebug.enable(createDebug.load());
  return createDebug;
}
var common = setup;
var browser$2 = createCommonjsModule(function (module, exports) {
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33',
  ];
  function useColors() {
    if (
      typeof window !== 'undefined' &&
      window.process &&
      (window.process.type === 'renderer' || window.process.__nwjs)
    ) {
      return true;
    }
    if (
      typeof navigator !== 'undefined' &&
      navigator.userAgent &&
      navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
    ) {
      return false;
    }
    return (
      (typeof document !== 'undefined' &&
        document.documentElement &&
        document.documentElement.style &&
        document.documentElement.style.WebkitAppearance) ||
      (typeof window !== 'undefined' &&
        window.console &&
        (window.console.firebug || (window.console.exception && window.console.table))) ||
      (typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
        parseInt(RegExp.$1, 10) >= 31) ||
      (typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
    );
  }
  function formatArgs(args) {
    args[0] =
      (this.useColors ? '%c' : '') +
      this.namespace +
      (this.useColors ? ' %c' : ' ') +
      args[0] +
      (this.useColors ? '%c ' : ' ') +
      '+' +
      module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === '%%') {
        return;
      }
      index++;
      if (match === '%c') {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  function log(...args) {
    return typeof console === 'object' && console.log && console.log(...args);
  }
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem('debug', namespaces);
      } else {
        exports.storage.removeItem('debug');
      }
    } catch (error) {}
  }
  function load() {
    let r;
    try {
      r = exports.storage.getItem('debug');
    } catch (error) {}
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {}
  }
  module.exports = common(exports);
  const { formatters } = module.exports;
  formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return '[UnexpectedJSONParseError]: ' + error.message;
    }
  };
});
var browser_1 = browser$2.log;
var browser_2 = browser$2.formatArgs;
var browser_3 = browser$2.save;
var browser_4 = browser$2.load;
var browser_5 = browser$2.useColors;
var browser_6 = browser$2.storage;
var browser_7 = browser$2.colors;
const _jsxFileName = '/home/ede/dev/github/pie-framework/pie-elements/packages/text-entry/configure/src/box.jsx';
const Box = styles_6((theme) => ({
  box: {
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit * 2,
  },
}))(({ classes, children }) =>
  react.createElement(
    'div',
    {
      className: classes.box,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 9,
      },
    },
    children,
  ),
);
const { InputCheckbox: InputCheckbox } = _dll_pie_lib__config_ui;
const { TagsInput: TagsInput } = _dll_pie_lib__config_ui;
const _jsxFileName$1 =
  '/home/ede/dev/github/pie-framework/pie-elements/packages/text-entry/configure/src/responses.jsx';
const log = browser$2('@pie-element:text-entry:configure');
const SubHeader = styles_6((theme) => ({
  subHeader: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
    fontSize: '0.7rem',
  },
}))(({ classes, children }) =>
  react.createElement(
    Typography$1,
    {
      className: classes.subHeader,
      __self: undefined,
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 18,
      },
    },
    children,
  ),
);
class RawResponses extends react.Component {
  constructor(...args) {
    super(...args);
    RawResponses.prototype.__init.call(this);
    RawResponses.prototype.__init2.call(this);
    RawResponses.prototype.__init3.call(this);
  }
  static __initStatic() {
    this.propTypes = {
      onChange: propTypes.func.isRequired,
      responses: propTypes.object.isRequired,
      label: propTypes.string,
      subHeader: propTypes.string,
      children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
      classes: propTypes.object.isRequired,
    };
  }
  __init() {
    this.onAnswersChange = (answers) => {
      this.props.responses.values = answers;
      this.props.onChange(this.props.responses);
    };
  }
  __init2() {
    this.onIgnoreCaseChange = (event) => {
      this.props.responses.ignoreCase = event.target.checked;
      this.props.onChange(this.props.responses);
    };
  }
  __init3() {
    this.onIgnoreWhitespaceChange = (event) => {
      this.props.responses.ignoreWhitespace = event.target.checked;
      this.props.onChange(this.props.responses);
    };
  }
  render() {
    const { responses, label, subHeader, children, classes } = this.props;
    log('[responses]: ', responses);
    return react.createElement(
      Box,
      {
        __self: this,
        __source: {
          fileName: _jsxFileName$1,
          lineNumber: 65,
        },
      },
      react.createElement(
        Typography$1,
        {
          type: 'body1',
          __self: this,
          __source: {
            fileName: _jsxFileName$1,
            lineNumber: 66,
          },
        },
        label,
      ),
      react.createElement(
        SubHeader,
        {
          __self: this,
          __source: {
            fileName: _jsxFileName$1,
            lineNumber: 67,
          },
        },
        subHeader,
      ),
      react.createElement(TagsInput, {
        onChange: this.onAnswersChange,
        tags: responses.values,
        __self: this,
        __source: {
          fileName: _jsxFileName$1,
          lineNumber: 68,
        },
      }),
      react.createElement(
        'div',
        {
          className: classes.checkboxHolder,
          __self: this,
          __source: {
            fileName: _jsxFileName$1,
            lineNumber: 69,
          },
        },
        react.createElement(InputCheckbox, {
          label: 'Ignore Case',
          checked: responses.ignoreCase,
          onChange: this.onIgnoreCaseChange,
          __self: this,
          __source: {
            fileName: _jsxFileName$1,
            lineNumber: 70,
          },
        }),
        react.createElement(InputCheckbox, {
          label: 'Ignore Whitespace',
          checked: responses.ignoreWhitespace,
          onChange: this.onIgnoreWhitespaceChange,
          __self: this,
          __source: {
            fileName: _jsxFileName$1,
            lineNumber: 75,
          },
        }),
      ),
      children
        ? children
        : react.createElement('div', {
            __self: this,
            __source: {
              fileName: _jsxFileName$1,
              lineNumber: 81,
            },
          }),
    );
  }
}
RawResponses.__initStatic();
const Responses = styles_6((theme) => ({
  checkboxHolder: {
    display: 'flex',
    paddingTop: theme.spacing.unit,
  },
  responses: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
  },
  subHeader: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
    fontSize: '0.7rem',
  },
}))(RawResponses);
var formControlState_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = formControlState;
  function formControlState(_ref) {
    var props = _ref.props,
      states = _ref.states,
      muiFormControl = _ref.muiFormControl;
    return states.reduce(function (acc, state) {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === 'undefined') {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }
});
unwrapExports(formControlState_1);
var FormControlContext_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _react = interopRequireDefault(react);
  var FormControlContext = _react.default.createContext();
  var _default = FormControlContext;
  exports.default = _default;
});
unwrapExports(FormControlContext_1);
var withFormControlContext_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = withFormControlContext;
  var _extends2 = interopRequireDefault(_extends_1);
  var _react = interopRequireDefault(react);
  var _hoistNonReactStatics = interopRequireDefault(hoistNonReactStatics_cjs);
  var _FormControlContext = interopRequireDefault(FormControlContext_1);
  function withFormControlContext(Component) {
    var EnhancedComponent = function EnhancedComponent(props) {
      return _react.default.createElement(_FormControlContext.default.Consumer, null, function (context) {
        return _react.default.createElement(
          Component,
          (0, _extends2.default)(
            {
              muiFormControl: context,
            },
            props,
          ),
        );
      });
    };
    {
      EnhancedComponent.displayName = 'WithFormControlContext('.concat((0, index_es.getDisplayName)(Component), ')');
    }
    (0, _hoistNonReactStatics.default)(EnhancedComponent, Component);
    return EnhancedComponent;
  }
});
unwrapExports(withFormControlContext_1);
var reactHelpers = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.cloneElementWithClassName = cloneElementWithClassName;
  exports.cloneChildrenWithClassName = cloneChildrenWithClassName;
  exports.isMuiElement = isMuiElement;
  exports.setRef = setRef;
  var _react = interopRequireDefault(react);
  var _classnames = interopRequireDefault(classnames);
  function cloneElementWithClassName(child, className) {
    return _react.default.cloneElement(child, {
      className: (0, _classnames.default)(child.props.className, className),
    });
  }
  function cloneChildrenWithClassName(children, className) {
    return _react.default.Children.map(children, function (child) {
      return _react.default.isValidElement(child) && cloneElementWithClassName(child, className);
    });
  }
  function isMuiElement(element, muiNames) {
    return _react.default.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }
  function setRef(ref, value) {
    if (typeof ref === 'function') {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
});
unwrapExports(reactHelpers);
var reactHelpers_1 = reactHelpers.cloneElementWithClassName;
var reactHelpers_2 = reactHelpers.cloneChildrenWithClassName;
var reactHelpers_3 = reactHelpers.isMuiElement;
var reactHelpers_4 = reactHelpers.setRef;
function debounce(func, wait, immediate) {
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;
  function later() {
    var last = Date.now() - timestamp;
    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        context = args = null;
      }
    }
  }
  var debounced = function () {
    context = this;
    args = arguments;
    timestamp = Date.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }
    return result;
  };
  debounced.clear = function () {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  debounced.flush = function () {
    if (timeout) {
      result = func.apply(context, args);
      context = args = null;
      clearTimeout(timeout);
      timeout = null;
    }
  };
  return debounced;
}
debounce.debounce = debounce;
var debounce_1 = debounce;
var reactEventListener_cjs = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
  }
  var _classCallCheck = _interopDefault(classCallCheck);
  var _createClass = _interopDefault(createClass);
  var _possibleConstructorReturn = _interopDefault(possibleConstructorReturn);
  var _getPrototypeOf = _interopDefault(getPrototypeOf);
  var _inherits = _interopDefault(inherits);
  var _typeof = _interopDefault(_typeof_1);
  var _objectWithoutProperties = _interopDefault(objectWithoutProperties);
  var _extends = _interopDefault(_extends_1);
  var React = _interopDefault(react);
  var PropTypes = _interopDefault(propTypes);
  var warning = _interopDefault(warning_1);
  function defineProperty(object, property, attr) {
    return Object.defineProperty(object, property, attr);
  }
  var passiveOption = (function () {
    var cache = null;
    return (function () {
      if (cache !== null) {
        return cache;
      }
      var supportsPassiveOption = false;
      try {
        window.addEventListener(
          'test',
          null,
          defineProperty({}, 'passive', {
            get: function get() {
              supportsPassiveOption = true;
            },
          }),
        );
      } catch (err) {}
      cache = supportsPassiveOption;
      return supportsPassiveOption;
    })();
  })();
  var defaultEventOptions = {
    capture: false,
    passive: false,
  };
  function mergeDefaultEventOptions(options) {
    return _extends({}, defaultEventOptions, options);
  }
  function getEventListenerArgs(eventName, callback, options) {
    var args = [eventName, callback];
    args.push(passiveOption ? options : options.capture);
    return args;
  }
  function on(target, eventName, callback, options) {
    target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
  }
  function off(target, eventName, callback, options) {
    target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
  }
  function forEachListener(props, iteratee) {
    var children = props.children,
      target = props.target,
      eventProps = _objectWithoutProperties(props, ['children', 'target']);
    Object.keys(eventProps).forEach(function (name) {
      if (name.substring(0, 2) !== 'on') {
        return;
      }
      var prop = eventProps[name];
      var type = _typeof(prop);
      var isObject = type === 'object';
      var isFunction = type === 'function';
      if (!isObject && !isFunction) {
        return;
      }
      var capture = name.substr(-7).toLowerCase() === 'capture';
      var eventName = name.substring(2).toLowerCase();
      eventName = capture ? eventName.substring(0, eventName.length - 7) : eventName;
      if (isObject) {
        iteratee(eventName, prop.handler, prop.options);
      } else {
        iteratee(
          eventName,
          prop,
          mergeDefaultEventOptions({
            capture: capture,
          }),
        );
      }
    });
  }
  function withOptions(handler, options) {
    warning(options, 'react-event-listener: should be specified options in withOptions.');
    return {
      handler: handler,
      options: mergeDefaultEventOptions(options),
    };
  }
  var EventListener = (function (_React$PureComponent) {
    _inherits(EventListener, _React$PureComponent);
    function EventListener() {
      _classCallCheck(this, EventListener);
      return _possibleConstructorReturn(this, _getPrototypeOf(EventListener).apply(this, arguments));
    }
    _createClass(EventListener, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.applyListeners(on);
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          this.applyListeners(off, prevProps);
          this.applyListeners(on);
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.applyListeners(off);
        },
      },
      {
        key: 'applyListeners',
        value: function applyListeners(onOrOff) {
          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
          var target = props.target;
          if (target) {
            var element = target;
            if (typeof target === 'string') {
              element = window[target];
            }
            forEachListener(props, onOrOff.bind(null, element));
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          return this.props.children || null;
        },
      },
    ]);
    return EventListener;
  })(React.PureComponent);
  EventListener.propTypes = {
    children: PropTypes.node,
    target: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,
  };
  exports.withOptions = withOptions;
  exports.default = EventListener;
});
unwrapExports(reactEventListener_cjs);
var reactEventListener_cjs_1 = reactEventListener_cjs.withOptions;
var Textarea_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _debounce = interopRequireDefault(debounce_1);
  var _reactEventListener = interopRequireDefault(reactEventListener_cjs);
  var _withStyles = interopRequireDefault(withStyles);
  var ROWS_HEIGHT = 19;
  var styles = {
    root: {
      position: 'relative',
      width: '100%',
    },
    textarea: {
      width: '100%',
      height: '100%',
      resize: 'none',
      font: 'inherit',
      padding: 0,
      cursor: 'inherit',
      boxSizing: 'border-box',
      lineHeight: 'inherit',
      border: 'none',
      outline: 'none',
      background: 'transparent',
    },
    shadow: {
      overflow: 'hidden',
      visibility: 'hidden',
      position: 'absolute',
      height: 'auto',
      whiteSpace: 'pre-wrap',
    },
  };
  exports.styles = styles;
  var Textarea = (function (_React$Component) {
    (0, _inherits2.default)(Textarea, _React$Component);
    function Textarea(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Textarea);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Textarea).call(this));
      _this.handleRefInput = function (ref) {
        _this.inputRef = ref;
        (0, reactHelpers.setRef)(_this.props.textareaRef, ref);
      };
      _this.handleRefSinglelineShadow = function (ref) {
        _this.singlelineShadowRef = ref;
      };
      _this.handleRefShadow = function (ref) {
        _this.shadowRef = ref;
      };
      _this.handleChange = function (event) {
        _this.value = event.target.value;
        if (!_this.isControlled) {
          _this.shadowRef.value = _this.value;
          _this.syncHeightWithShadow();
        }
        if (_this.props.onChange) {
          _this.props.onChange(event);
        }
      };
      _this.isControlled = props.value != null;
      _this.value = props.value || props.defaultValue || '';
      _this.state = {
        height: Number(props.rows) * ROWS_HEIGHT,
      };
      if (typeof window !== 'undefined') {
        _this.handleResize = (0, _debounce.default)(function () {
          _this.syncHeightWithShadow();
        }, 166);
      }
      return _this;
    }
    (0, _createClass2.default)(Textarea, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.syncHeightWithShadow();
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          this.syncHeightWithShadow();
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.handleResize.clear();
        },
      },
      {
        key: 'syncHeightWithShadow',
        value: function syncHeightWithShadow() {
          var props = this.props;
          if (!this.shadowRef) {
            return;
          }
          if (this.isControlled) {
            this.shadowRef.value = props.value == null ? '' : String(props.value);
          }
          var lineHeight = this.singlelineShadowRef.scrollHeight;
          lineHeight = lineHeight === 0 ? ROWS_HEIGHT : lineHeight;
          var newHeight = this.shadowRef.scrollHeight;
          if (newHeight === undefined) {
            return;
          }
          if (Number(props.rowsMax) >= Number(props.rows)) {
            newHeight = Math.min(Number(props.rowsMax) * lineHeight, newHeight);
          }
          newHeight = Math.max(newHeight, lineHeight);
          if (Math.abs(this.state.height - newHeight) > 1) {
            this.setState({
              height: newHeight,
            });
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            classes = _this$props.classes,
            className = _this$props.className,
            defaultValue = _this$props.defaultValue,
            onChange = _this$props.onChange,
            rows = _this$props.rows,
            rowsMax = _this$props.rowsMax,
            style = _this$props.style,
            textareaRef = _this$props.textareaRef,
            value = _this$props.value,
            other = (0, _objectWithoutProperties2.default)(_this$props, [
              'classes',
              'className',
              'defaultValue',
              'onChange',
              'rows',
              'rowsMax',
              'style',
              'textareaRef',
              'value',
            ]);
          return _react.default.createElement(
            'div',
            {
              className: classes.root,
            },
            _react.default.createElement(_reactEventListener.default, {
              target: 'window',
              onResize: this.handleResize,
            }),
            _react.default.createElement('textarea', {
              'aria-hidden': 'true',
              className: (0, _classnames.default)(classes.textarea, classes.shadow),
              readOnly: true,
              ref: this.handleRefSinglelineShadow,
              rows: '1',
              tabIndex: -1,
              value: '',
            }),
            _react.default.createElement('textarea', {
              'aria-hidden': 'true',
              className: (0, _classnames.default)(classes.textarea, classes.shadow),
              defaultValue: defaultValue,
              readOnly: true,
              ref: this.handleRefShadow,
              rows: rows,
              tabIndex: -1,
              value: value,
            }),
            _react.default.createElement(
              'textarea',
              (0, _extends2.default)(
                {
                  rows: rows,
                  className: (0, _classnames.default)(classes.textarea, className),
                  defaultValue: defaultValue,
                  value: value,
                  onChange: this.handleChange,
                  ref: this.handleRefInput,
                  style: (0, _extends2.default)(
                    {
                      height: this.state.height,
                    },
                    style,
                  ),
                },
                other,
              ),
            ),
          );
        },
      },
    ]);
    return Textarea;
  })(_react.default.Component);
  Textarea.propTypes = {
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    disabled: _propTypes.default.bool,
    onChange: _propTypes.default.func,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    style: _propTypes.default.object,
    textareaRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  };
  Textarea.defaultProps = {
    rows: 1,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiPrivateTextarea',
  })(Textarea);
  exports.default = _default;
});
unwrapExports(Textarea_1);
var Textarea_2 = Textarea_1.styles;
var utils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.hasValue = hasValue;
  exports.isFilled = isFilled;
  exports.isAdornedStart = isAdornedStart;
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj) {
    var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return (
      obj &&
      ((hasValue(obj.value) && obj.value !== '') || (SSR && hasValue(obj.defaultValue) && obj.defaultValue !== ''))
    );
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }
});
unwrapExports(utils);
var utils_1 = utils.hasValue;
var utils_2 = utils.isFilled;
var utils_3 = utils.isAdornedStart;
var InputBase_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _createClass2 = interopRequireDefault(createClass);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _warning = interopRequireDefault(warning_1);
  var _classnames = interopRequireDefault(classnames);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _FormControlContext = interopRequireDefault(FormControlContext_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _Textarea = interopRequireDefault(Textarea_1);
  var styles = function styles(theme) {
    var light = theme.palette.type === 'light';
    var placeholder = {
      color: 'currentColor',
      opacity: light ? 0.42 : 0.5,
      transition: theme.transitions.create('opacity', {
        duration: theme.transitions.duration.shorter,
      }),
    };
    var placeholderHidden = {
      opacity: 0,
    };
    var placeholderVisible = {
      opacity: light ? 0.42 : 0.5,
    };
    return {
      root: {
        fontFamily: theme.typography.fontFamily,
        color: theme.palette.text.primary,
        fontSize: theme.typography.pxToRem(16),
        lineHeight: '1.1875em',
        cursor: 'text',
        display: 'inline-flex',
        alignItems: 'center',
        '&$disabled': {
          color: theme.palette.text.disabled,
          cursor: 'default',
        },
      },
      formControl: {},
      focused: {},
      disabled: {},
      adornedStart: {},
      adornedEnd: {},
      error: {},
      marginDense: {},
      multiline: {
        padding: ''.concat(8 - 2, 'px 0 ').concat(8 - 1, 'px'),
      },
      fullWidth: {
        width: '100%',
      },
      input: {
        font: 'inherit',
        color: 'currentColor',
        padding: ''.concat(8 - 2, 'px 0 ').concat(8 - 1, 'px'),
        border: 0,
        boxSizing: 'content-box',
        background: 'none',
        margin: 0,
        WebkitTapHighlightColor: 'transparent',
        display: 'block',
        minWidth: 0,
        width: '100%',
        '&::-webkit-input-placeholder': placeholder,
        '&::-moz-placeholder': placeholder,
        '&:-ms-input-placeholder': placeholder,
        '&::-ms-input-placeholder': placeholder,
        '&:focus': {
          outline: 0,
        },
        '&:invalid': {
          boxShadow: 'none',
        },
        '&::-webkit-search-decoration': {
          '-webkit-appearance': 'none',
        },
        'label[data-shrink=false] + $formControl &': {
          '&::-webkit-input-placeholder': placeholderHidden,
          '&::-moz-placeholder': placeholderHidden,
          '&:-ms-input-placeholder': placeholderHidden,
          '&::-ms-input-placeholder': placeholderHidden,
          '&:focus::-webkit-input-placeholder': placeholderVisible,
          '&:focus::-moz-placeholder': placeholderVisible,
          '&:focus:-ms-input-placeholder': placeholderVisible,
          '&:focus::-ms-input-placeholder': placeholderVisible,
        },
        '&$disabled': {
          opacity: 1,
        },
      },
      inputMarginDense: {
        paddingTop: 4 - 1,
      },
      inputMultiline: {
        resize: 'none',
        padding: 0,
      },
      inputType: {
        height: '1.1875em',
      },
      inputTypeSearch: {
        '-moz-appearance': 'textfield',
        '-webkit-appearance': 'textfield',
      },
      inputAdornedStart: {},
      inputAdornedEnd: {},
    };
  };
  exports.styles = styles;
  var InputBase = (function (_React$Component) {
    (0, _inherits2.default)(InputBase, _React$Component);
    (0, _createClass2.default)(InputBase, null, [
      {
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
          if (props.disabled && state.focused) {
            return {
              focused: false,
            };
          }
          return null;
        },
      },
    ]);
    function InputBase(props) {
      var _this;
      (0, _classCallCheck2.default)(this, InputBase);
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (0, _getPrototypeOf2.default)(InputBase).call(this, props),
      );
      _this.state = {
        focused: false,
      };
      _this.handleFocus = function (event) {
        var muiFormControl = _this.props.muiFormControl;
        if (
          (0, _formControlState.default)({
            props: _this.props,
            muiFormControl: muiFormControl,
            states: ['disabled'],
          }).disabled
        ) {
          event.stopPropagation();
          return;
        }
        _this.setState({
          focused: true,
        });
        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      _this.handleBlur = function (event) {
        _this.setState({
          focused: false,
        });
        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
        var muiFormControl = _this.props.muiFormControl;
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      _this.handleChange = function () {
        if (!_this.isControlled) {
          _this.checkDirty(_this.inputRef);
        }
        if (_this.props.onChange) {
          var _this$props;
          (_this$props = _this.props).onChange.apply(_this$props, arguments);
        }
      };
      _this.handleRefInput = function (ref) {
        _this.inputRef = ref;
        (0, _warning.default)(
          !ref || ref instanceof HTMLInputElement || ref.focus,
          [
            'Material-UI: you have provided a `inputComponent` to the input component',
            'that does not correctly handle the `inputRef` property.',
            'Make sure the `inputRef` property is called with a HTMLInputElement.',
          ].join('\n'),
        );
        var refProp;
        if (_this.props.inputRef) {
          refProp = _this.props.inputRef;
        } else if (_this.props.inputProps && _this.props.inputProps.ref) {
          refProp = _this.props.inputProps.ref;
        }
        (0, reactHelpers.setRef)(refProp, ref);
      };
      _this.handleClick = function (event) {
        if (_this.inputRef && event.currentTarget === event.target) {
          _this.inputRef.focus();
        }
        if (_this.props.onClick) {
          _this.props.onClick(event);
        }
      };
      _this.isControlled = props.value != null;
      if (_this.isControlled) {
        _this.checkDirty(props);
      }
      return _this;
    }
    (0, _createClass2.default)(InputBase, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (!this.isControlled) {
            this.checkDirty(this.inputRef);
          }
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          if (!prevProps.disabled && this.props.disabled) {
            var muiFormControl = this.props.muiFormControl;
            if (muiFormControl && muiFormControl.onBlur) {
              muiFormControl.onBlur();
            }
          }
          if (this.isControlled) {
            this.checkDirty(this.props);
          }
        },
      },
      {
        key: 'checkDirty',
        value: function checkDirty(obj) {
          var muiFormControl = this.props.muiFormControl;
          if ((0, utils.isFilled)(obj)) {
            if (muiFormControl && muiFormControl.onFilled) {
              muiFormControl.onFilled();
            }
            if (this.props.onFilled) {
              this.props.onFilled();
            }
            return;
          }
          if (muiFormControl && muiFormControl.onEmpty) {
            muiFormControl.onEmpty();
          }
          if (this.props.onEmpty) {
            this.props.onEmpty();
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _classNames, _classNames2;
          var _this$props2 = this.props,
            autoComplete = _this$props2.autoComplete,
            autoFocus = _this$props2.autoFocus,
            classes = _this$props2.classes,
            classNameProp = _this$props2.className,
            defaultValue = _this$props2.defaultValue,
            disabled = _this$props2.disabled,
            endAdornment = _this$props2.endAdornment,
            error = _this$props2.error,
            fullWidth = _this$props2.fullWidth,
            id = _this$props2.id,
            inputComponent = _this$props2.inputComponent,
            _this$props2$inputPro = _this$props2.inputProps;
          _this$props2$inputPro = _this$props2$inputPro === void 0 ? {} : _this$props2$inputPro;
          var inputPropsClassName = _this$props2$inputPro.className,
            inputPropsProp = (0, _objectWithoutProperties2.default)(_this$props2$inputPro, ['className']),
            inputRef = _this$props2.inputRef,
            margin = _this$props2.margin,
            muiFormControl = _this$props2.muiFormControl,
            multiline = _this$props2.multiline,
            name = _this$props2.name,
            onBlur = _this$props2.onBlur,
            onChange = _this$props2.onChange,
            onClick = _this$props2.onClick,
            onEmpty = _this$props2.onEmpty,
            onFilled = _this$props2.onFilled,
            onFocus = _this$props2.onFocus,
            onKeyDown = _this$props2.onKeyDown,
            onKeyUp = _this$props2.onKeyUp,
            placeholder = _this$props2.placeholder,
            readOnly = _this$props2.readOnly,
            renderPrefix = _this$props2.renderPrefix,
            rows = _this$props2.rows,
            rowsMax = _this$props2.rowsMax,
            startAdornment = _this$props2.startAdornment,
            type = _this$props2.type,
            value = _this$props2.value,
            other = (0, _objectWithoutProperties2.default)(_this$props2, [
              'autoComplete',
              'autoFocus',
              'classes',
              'className',
              'defaultValue',
              'disabled',
              'endAdornment',
              'error',
              'fullWidth',
              'id',
              'inputComponent',
              'inputProps',
              'inputRef',
              'margin',
              'muiFormControl',
              'multiline',
              'name',
              'onBlur',
              'onChange',
              'onClick',
              'onEmpty',
              'onFilled',
              'onFocus',
              'onKeyDown',
              'onKeyUp',
              'placeholder',
              'readOnly',
              'renderPrefix',
              'rows',
              'rowsMax',
              'startAdornment',
              'type',
              'value',
            ]);
          var ariaDescribedby = other['aria-describedby'];
          delete other['aria-describedby'];
          var fcs = (0, _formControlState.default)({
            props: this.props,
            muiFormControl: muiFormControl,
            states: ['disabled', 'error', 'margin', 'required', 'filled'],
          });
          var focused = muiFormControl ? muiFormControl.focused : this.state.focused;
          var className = (0, _classnames.default)(
            classes.root,
            ((_classNames = {}),
            (0, _defineProperty2.default)(_classNames, classes.disabled, fcs.disabled),
            (0, _defineProperty2.default)(_classNames, classes.error, fcs.error),
            (0, _defineProperty2.default)(_classNames, classes.fullWidth, fullWidth),
            (0, _defineProperty2.default)(_classNames, classes.focused, focused),
            (0, _defineProperty2.default)(_classNames, classes.formControl, muiFormControl),
            (0, _defineProperty2.default)(_classNames, classes.marginDense, fcs.margin === 'dense'),
            (0, _defineProperty2.default)(_classNames, classes.multiline, multiline),
            (0, _defineProperty2.default)(_classNames, classes.adornedStart, startAdornment),
            (0, _defineProperty2.default)(_classNames, classes.adornedEnd, endAdornment),
            _classNames),
            classNameProp,
          );
          var inputClassName = (0, _classnames.default)(
            classes.input,
            ((_classNames2 = {}),
            (0, _defineProperty2.default)(_classNames2, classes.disabled, fcs.disabled),
            (0, _defineProperty2.default)(_classNames2, classes.inputType, type !== 'text'),
            (0, _defineProperty2.default)(_classNames2, classes.inputTypeSearch, type === 'search'),
            (0, _defineProperty2.default)(_classNames2, classes.inputMultiline, multiline),
            (0, _defineProperty2.default)(_classNames2, classes.inputMarginDense, fcs.margin === 'dense'),
            (0, _defineProperty2.default)(_classNames2, classes.inputAdornedStart, startAdornment),
            (0, _defineProperty2.default)(_classNames2, classes.inputAdornedEnd, endAdornment),
            _classNames2),
            inputPropsClassName,
          );
          var InputComponent = inputComponent;
          var inputProps = (0, _extends2.default)({}, inputPropsProp, {
            ref: this.handleRefInput,
          });
          if (typeof InputComponent !== 'string') {
            inputProps = (0, _extends2.default)(
              {
                inputRef: this.handleRefInput,
                type: type,
              },
              inputProps,
              {
                ref: null,
              },
            );
          } else if (multiline) {
            if (rows && !rowsMax) {
              InputComponent = 'textarea';
            } else {
              inputProps = (0, _extends2.default)(
                {
                  rowsMax: rowsMax,
                  textareaRef: this.handleRefInput,
                },
                inputProps,
                {
                  ref: null,
                },
              );
              InputComponent = _Textarea.default;
            }
          } else {
            inputProps = (0, _extends2.default)(
              {
                type: type,
              },
              inputProps,
            );
          }
          return _react.default.createElement(
            'div',
            (0, _extends2.default)(
              {
                className: className,
                onClick: this.handleClick,
              },
              other,
            ),
            renderPrefix
              ? renderPrefix(
                  (0, _extends2.default)({}, fcs, {
                    startAdornment: startAdornment,
                    focused: focused,
                  }),
                )
              : null,
            startAdornment,
            _react.default.createElement(
              _FormControlContext.default.Provider,
              {
                value: null,
              },
              _react.default.createElement(
                InputComponent,
                (0, _extends2.default)(
                  {
                    'aria-invalid': fcs.error,
                    'aria-describedby': ariaDescribedby,
                    autoComplete: autoComplete,
                    autoFocus: autoFocus,
                    className: inputClassName,
                    defaultValue: defaultValue,
                    disabled: fcs.disabled,
                    id: id,
                    name: name,
                    onBlur: this.handleBlur,
                    onChange: this.handleChange,
                    onFocus: this.handleFocus,
                    onKeyDown: onKeyDown,
                    onKeyUp: onKeyUp,
                    placeholder: placeholder,
                    readOnly: readOnly,
                    required: fcs.required,
                    rows: rows,
                    value: value,
                  },
                  inputProps,
                ),
              ),
            ),
            endAdornment,
          );
        },
      },
    ]);
    return InputBase;
  })(_react.default.Component);
  InputBase.propTypes = {
    autoComplete: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
    disabled: _propTypes.default.bool,
    endAdornment: _propTypes.default.node,
    error: _propTypes.default.bool,
    fullWidth: _propTypes.default.bool,
    id: _propTypes.default.string,
    inputComponent: index_es.componentPropType,
    inputProps: _propTypes.default.object,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    margin: _propTypes.default.oneOf(['dense', 'none']),
    muiFormControl: _propTypes.default.object,
    multiline: _propTypes.default.bool,
    name: _propTypes.default.string,
    onBlur: _propTypes.default.func,
    onChange: _propTypes.default.func,
    onClick: _propTypes.default.func,
    onEmpty: _propTypes.default.func,
    onFilled: _propTypes.default.func,
    onFocus: _propTypes.default.func,
    onKeyDown: _propTypes.default.func,
    onKeyUp: _propTypes.default.func,
    placeholder: _propTypes.default.string,
    readOnly: _propTypes.default.bool,
    renderPrefix: _propTypes.default.func,
    required: _propTypes.default.bool,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    startAdornment: _propTypes.default.node,
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
  };
  InputBase.defaultProps = {
    fullWidth: false,
    inputComponent: 'input',
    multiline: false,
    type: 'text',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiInputBase',
  })((0, _withFormControlContext.default)(InputBase));
  exports.default = _default;
});
unwrapExports(InputBase_1);
var InputBase_2 = InputBase_1.styles;
var InputBase = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _InputBase.default;
    },
  });
  var _InputBase = interopRequireDefault(InputBase_1);
});
unwrapExports(InputBase);
var Input_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _InputBase = interopRequireDefault(InputBase);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    var light = theme.palette.type === 'light';
    var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    return {
      root: {
        position: 'relative',
      },
      formControl: {
        'label + &': {
          marginTop: 16,
        },
      },
      focused: {},
      disabled: {},
      underline: {
        '&:after': {
          borderBottom: '2px solid '.concat(theme.palette.primary[light ? 'dark' : 'light']),
          left: 0,
          bottom: 0,
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut,
          }),
          pointerEvents: 'none',
        },
        '&$focused:after': {
          transform: 'scaleX(1)',
        },
        '&$error:after': {
          borderBottomColor: theme.palette.error.main,
          transform: 'scaleX(1)',
        },
        '&:before': {
          borderBottom: '1px solid '.concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter,
          }),
          pointerEvents: 'none',
        },
        '&:hover:not($disabled):not($focused):not($error):before': {
          borderBottom: '2px solid '.concat(theme.palette.text.primary),
          '@media (hover: none)': {
            borderBottom: '1px solid '.concat(bottomLineColor),
          },
        },
        '&$disabled:before': {
          borderBottomStyle: 'dotted',
        },
      },
      error: {},
      multiline: {},
      fullWidth: {},
      input: {},
      inputMarginDense: {},
      inputMultiline: {},
      inputType: {},
      inputTypeSearch: {},
    };
  };
  exports.styles = styles;
  function Input(props) {
    var disableUnderline = props.disableUnderline,
      classes = props.classes,
      other = (0, _objectWithoutProperties2.default)(props, ['disableUnderline', 'classes']);
    return _react.default.createElement(
      _InputBase.default,
      (0, _extends2.default)(
        {
          classes: (0, _extends2.default)({}, classes, {
            root: (0, _classnames.default)(
              classes.root,
              (0, _defineProperty2.default)({}, classes.underline, !disableUnderline),
            ),
            underline: null,
          }),
        },
        other,
      ),
    );
  }
  Input.propTypes = {
    autoComplete: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
    disabled: _propTypes.default.bool,
    disableUnderline: _propTypes.default.bool,
    endAdornment: _propTypes.default.node,
    error: _propTypes.default.bool,
    fullWidth: _propTypes.default.bool,
    id: _propTypes.default.string,
    inputComponent: index_es.componentPropType,
    inputProps: _propTypes.default.object,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    margin: _propTypes.default.oneOf(['dense', 'none']),
    multiline: _propTypes.default.bool,
    name: _propTypes.default.string,
    onChange: _propTypes.default.func,
    placeholder: _propTypes.default.string,
    readOnly: _propTypes.default.bool,
    required: _propTypes.default.bool,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    startAdornment: _propTypes.default.node,
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
  };
  _InputBase.default.defaultProps = {
    fullWidth: false,
    inputComponent: 'input',
    multiline: false,
    type: 'text',
  };
  Input.muiName = 'Input';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiInput',
  })(Input);
  exports.default = _default;
});
unwrapExports(Input_1);
var Input_2 = Input_1.styles;
var Input = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Input.default;
    },
  });
  var _Input = interopRequireDefault(Input_1);
});
unwrapExports(Input);
var FilledInput_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _InputBase = interopRequireDefault(InputBase);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    var light = theme.palette.type === 'light';
    var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
    return {
      root: {
        position: 'relative',
        backgroundColor: backgroundColor,
        borderTopLeftRadius: theme.shape.borderRadius,
        borderTopRightRadius: theme.shape.borderRadius,
        transition: theme.transitions.create('background-color', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut,
        }),
        '&:hover': {
          backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
          '@media (hover: none)': {
            backgroundColor: backgroundColor,
          },
        },
        '&$focused': {
          backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)',
        },
        '&$disabled': {
          backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)',
        },
      },
      underline: {
        '&:after': {
          borderBottom: '2px solid '.concat(theme.palette.primary[light ? 'dark' : 'light']),
          left: 0,
          bottom: 0,
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut,
          }),
          pointerEvents: 'none',
        },
        '&$focused:after': {
          transform: 'scaleX(1)',
        },
        '&$error:after': {
          borderBottomColor: theme.palette.error.main,
          transform: 'scaleX(1)',
        },
        '&:before': {
          borderBottom: '1px solid '.concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter,
          }),
          pointerEvents: 'none',
        },
        '&:hover:not($disabled):not($focused):not($error):before': {
          borderBottom: '1px solid '.concat(theme.palette.text.primary),
        },
        '&$disabled:before': {
          borderBottom: '1px dotted '.concat(bottomLineColor),
        },
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 12,
      },
      adornedEnd: {
        paddingRight: 12,
      },
      error: {},
      multiline: {
        padding: '27px 12px 10px',
        boxSizing: 'border-box',
      },
      input: {
        padding: '27px 12px 10px',
      },
      inputMarginDense: {
        paddingTop: 24,
        paddingBottom: 6,
      },
      inputMultiline: {
        padding: 0,
      },
      inputAdornedStart: {
        paddingLeft: 0,
      },
      inputAdornedEnd: {
        paddingRight: 0,
      },
    };
  };
  exports.styles = styles;
  function FilledInput(props) {
    var disableUnderline = props.disableUnderline,
      classes = props.classes,
      other = (0, _objectWithoutProperties2.default)(props, ['disableUnderline', 'classes']);
    return _react.default.createElement(
      _InputBase.default,
      (0, _extends2.default)(
        {
          classes: (0, _extends2.default)({}, classes, {
            root: (0, _classnames.default)(
              classes.root,
              (0, _defineProperty2.default)({}, classes.underline, !disableUnderline),
            ),
            underline: null,
          }),
        },
        other,
      ),
    );
  }
  FilledInput.propTypes = {
    autoComplete: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
    disabled: _propTypes.default.bool,
    disableUnderline: _propTypes.default.bool,
    endAdornment: _propTypes.default.node,
    error: _propTypes.default.bool,
    fullWidth: _propTypes.default.bool,
    id: _propTypes.default.string,
    inputComponent: index_es.componentPropType,
    inputProps: _propTypes.default.object,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    margin: _propTypes.default.oneOf(['dense', 'none']),
    multiline: _propTypes.default.bool,
    name: _propTypes.default.string,
    onChange: _propTypes.default.func,
    placeholder: _propTypes.default.string,
    readOnly: _propTypes.default.bool,
    required: _propTypes.default.bool,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    startAdornment: _propTypes.default.node,
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
  };
  _InputBase.default.defaultProps = {
    fullWidth: false,
    inputComponent: 'input',
    multiline: false,
    type: 'text',
  };
  FilledInput.muiName = 'Input';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiFilledInput',
  })(FilledInput);
  exports.default = _default;
});
unwrapExports(FilledInput_1);
var FilledInput_2 = FilledInput_1.styles;
var FilledInput = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _FilledInput.default;
    },
  });
  var _FilledInput = interopRequireDefault(FilledInput_1);
});
unwrapExports(FilledInput);
var NotchedOutline_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _extends3 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var styles$1 = function styles(theme) {
    var align = theme.direction === 'rtl' ? 'right' : 'left';
    return {
      root: {
        position: 'absolute',
        bottom: 0,
        right: 0,
        top: -5,
        left: 0,
        margin: 0,
        padding: 0,
        pointerEvents: 'none',
        borderRadius: theme.shape.borderRadius,
        borderStyle: 'solid',
        borderWidth: 1,
        transition: theme.transitions.create(['padding-'.concat(align), 'border-color', 'border-width'], {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut,
        }),
      },
      legend: {
        textAlign: 'left',
        padding: 0,
        lineHeight: '11px',
        transition: theme.transitions.create('width', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut,
        }),
      },
    };
  };
  exports.styles = styles$1;
  function NotchedOutline(props) {
    var children = props.children,
      classes = props.classes,
      className = props.className,
      labelWidthProp = props.labelWidth,
      notched = props.notched,
      style = props.style,
      theme = props.theme,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'labelWidth',
        'notched',
        'style',
        'theme',
      ]);
    var align = theme.direction === 'rtl' ? 'right' : 'left';
    var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0;
    return _react.default.createElement(
      'fieldset',
      (0, _extends3.default)(
        {
          'aria-hidden': true,
          style: (0, _extends3.default)(
            (0, _defineProperty2.default)(
              {},
              'padding'.concat((0, helpers.capitalize)(align)),
              8 + (notched ? 0 : labelWidth / 2),
            ),
            style,
          ),
          className: (0, _classnames.default)(classes.root, className),
        },
        other,
      ),
      _react.default.createElement(
        'legend',
        {
          className: classes.legend,
          style: {
            width: notched ? labelWidth : 0.01,
          },
        },
        _react.default.createElement('span', {
          dangerouslySetInnerHTML: {
            __html: '&#8203;',
          },
        }),
      ),
    );
  }
  NotchedOutline.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object,
    className: _propTypes.default.string,
    labelWidth: _propTypes.default.number.isRequired,
    notched: _propTypes.default.bool.isRequired,
    style: _propTypes.default.object,
    theme: _propTypes.default.object,
  };
  var _default = (0, styles.withStyles)(styles$1, {
    name: 'MuiPrivateNotchedOutline',
    withTheme: true,
  })(NotchedOutline);
  exports.default = _default;
});
unwrapExports(NotchedOutline_1);
var NotchedOutline_2 = NotchedOutline_1.styles;
var OutlinedInput_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _InputBase = interopRequireDefault(InputBase);
  var _NotchedOutline = interopRequireDefault(NotchedOutline_1);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
    return {
      root: {
        position: 'relative',
        '& $notchedOutline': {
          borderColor: borderColor,
        },
        '&:hover:not($disabled):not($focused):not($error) $notchedOutline': {
          borderColor: theme.palette.text.primary,
          '@media (hover: none)': {
            borderColor: borderColor,
          },
        },
        '&$focused $notchedOutline': {
          borderColor: theme.palette.primary.main,
          borderWidth: 2,
        },
        '&$error $notchedOutline': {
          borderColor: theme.palette.error.main,
        },
        '&$disabled $notchedOutline': {
          borderColor: theme.palette.action.disabled,
        },
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 14,
      },
      adornedEnd: {
        paddingRight: 14,
      },
      error: {},
      multiline: {
        padding: '18.5px 14px',
        boxSizing: 'border-box',
      },
      notchedOutline: {},
      input: {
        padding: '18.5px 14px',
      },
      inputMarginDense: {
        paddingTop: 15,
        paddingBottom: 15,
      },
      inputMultiline: {
        padding: 0,
      },
      inputAdornedStart: {
        paddingLeft: 0,
      },
      inputAdornedEnd: {
        paddingRight: 0,
      },
    };
  };
  exports.styles = styles;
  function OutlinedInput(props) {
    var classes = props.classes,
      labelWidth = props.labelWidth,
      notched = props.notched,
      other = (0, _objectWithoutProperties2.default)(props, ['classes', 'labelWidth', 'notched']);
    return _react.default.createElement(
      _InputBase.default,
      (0, _extends2.default)(
        {
          renderPrefix: function renderPrefix(state) {
            return _react.default.createElement(_NotchedOutline.default, {
              className: classes.notchedOutline,
              labelWidth: labelWidth,
              notched:
                typeof notched !== 'undefined'
                  ? notched
                  : Boolean(state.startAdornment || state.filled || state.focused),
            });
          },
          classes: (0, _extends2.default)({}, classes, {
            root: (0, _classnames.default)(classes.root, classes.underline),
            notchedOutline: null,
          }),
        },
        other,
      ),
    );
  }
  OutlinedInput.propTypes = {
    autoComplete: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
    disabled: _propTypes.default.bool,
    endAdornment: _propTypes.default.node,
    error: _propTypes.default.bool,
    fullWidth: _propTypes.default.bool,
    id: _propTypes.default.string,
    inputComponent: index_es.componentPropType,
    inputProps: _propTypes.default.object,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    labelWidth: _propTypes.default.number.isRequired,
    margin: _propTypes.default.oneOf(['dense', 'none']),
    multiline: _propTypes.default.bool,
    name: _propTypes.default.string,
    notched: _propTypes.default.bool,
    onChange: _propTypes.default.func,
    placeholder: _propTypes.default.string,
    readOnly: _propTypes.default.bool,
    required: _propTypes.default.bool,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    startAdornment: _propTypes.default.node,
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
  };
  _InputBase.default.defaultProps = {
    fullWidth: false,
    inputComponent: 'input',
    multiline: false,
    type: 'text',
  };
  OutlinedInput.muiName = 'Input';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiOutlinedInput',
  })(OutlinedInput);
  exports.default = _default;
});
unwrapExports(OutlinedInput_1);
var OutlinedInput_2 = OutlinedInput_1.styles;
var OutlinedInput = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _OutlinedInput.default;
    },
  });
  var _OutlinedInput = interopRequireDefault(OutlinedInput_1);
});
unwrapExports(OutlinedInput);
var FormLabel_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    return {
      root: {
        fontFamily: theme.typography.fontFamily,
        color: theme.palette.text.secondary,
        fontSize: theme.typography.pxToRem(16),
        lineHeight: 1,
        padding: 0,
        '&$focused': {
          color: theme.palette.primary[theme.palette.type === 'light' ? 'dark' : 'light'],
        },
        '&$disabled': {
          color: theme.palette.text.disabled,
        },
        '&$error': {
          color: theme.palette.error.main,
        },
      },
      focused: {},
      disabled: {},
      error: {},
      filled: {},
      required: {},
      asterisk: {
        '&$error': {
          color: theme.palette.error.main,
        },
      },
    };
  };
  exports.styles = styles;
  function FormLabel(props) {
    var _classNames;
    var children = props.children,
      classes = props.classes,
      classNameProp = props.className,
      Component = props.component,
      disabled = props.disabled,
      error = props.error,
      filled = props.filled,
      focused = props.focused,
      muiFormControl = props.muiFormControl,
      required = props.required,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'component',
        'disabled',
        'error',
        'filled',
        'focused',
        'muiFormControl',
        'required',
      ]);
    var fcs = (0, _formControlState.default)({
      props: props,
      muiFormControl: muiFormControl,
      states: ['required', 'focused', 'disabled', 'error', 'filled'],
    });
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: (0, _classnames.default)(
            classes.root,
            ((_classNames = {}),
            (0, _defineProperty2.default)(_classNames, classes.disabled, fcs.disabled),
            (0, _defineProperty2.default)(_classNames, classes.error, fcs.error),
            (0, _defineProperty2.default)(_classNames, classes.filled, fcs.filled),
            (0, _defineProperty2.default)(_classNames, classes.focused, fcs.focused),
            (0, _defineProperty2.default)(_classNames, classes.required, fcs.required),
            _classNames),
            classNameProp,
          ),
        },
        other,
      ),
      children,
      fcs.required &&
        _react.default.createElement(
          'span',
          {
            className: (0, _classnames.default)(
              classes.asterisk,
              (0, _defineProperty2.default)({}, classes.error, fcs.error),
            ),
          },
          '\u2009*',
        ),
    );
  }
  FormLabel.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    component: index_es.componentPropType,
    disabled: _propTypes.default.bool,
    error: _propTypes.default.bool,
    filled: _propTypes.default.bool,
    focused: _propTypes.default.bool,
    muiFormControl: _propTypes.default.object,
    required: _propTypes.default.bool,
  };
  FormLabel.defaultProps = {
    component: 'label',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiFormLabel',
  })((0, _withFormControlContext.default)(FormLabel));
  exports.default = _default;
});
unwrapExports(FormLabel_1);
var FormLabel_2 = FormLabel_1.styles;
var FormLabel = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _FormLabel.default;
    },
  });
  var _FormLabel = interopRequireDefault(FormLabel_1);
});
unwrapExports(FormLabel);
var InputLabel_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _FormLabel = interopRequireDefault(FormLabel);
  var styles = function styles(theme) {
    return {
      root: {
        transformOrigin: 'top left',
      },
      focused: {},
      disabled: {},
      error: {},
      required: {},
      formControl: {
        position: 'absolute',
        left: 0,
        top: 0,
        transform: 'translate(0, 24px) scale(1)',
      },
      marginDense: {
        transform: 'translate(0, 21px) scale(1)',
      },
      shrink: {
        transform: 'translate(0, 1.5px) scale(0.75)',
        transformOrigin: 'top left',
      },
      animated: {
        transition: theme.transitions.create(['color', 'transform'], {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut,
        }),
      },
      filled: {
        zIndex: 1,
        pointerEvents: 'none',
        transform: 'translate(12px, 20px) scale(1)',
        '&$marginDense': {
          transform: 'translate(12px, 17px) scale(1)',
        },
        '&$shrink': {
          transform: 'translate(12px, 10px) scale(0.75)',
          '&$marginDense': {
            transform: 'translate(12px, 7px) scale(0.75)',
          },
        },
      },
      outlined: {
        zIndex: 1,
        pointerEvents: 'none',
        transform: 'translate(14px, 20px) scale(1)',
        '&$marginDense': {
          transform: 'translate(14px, 17px) scale(1)',
        },
        '&$shrink': {
          transform: 'translate(14px, -6px) scale(0.75)',
        },
      },
    };
  };
  exports.styles = styles;
  function InputLabel(props) {
    var _classNames;
    var children = props.children,
      classes = props.classes,
      classNameProp = props.className,
      disableAnimation = props.disableAnimation,
      FormLabelClasses = props.FormLabelClasses,
      margin = props.margin,
      muiFormControl = props.muiFormControl,
      shrinkProp = props.shrink,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'disableAnimation',
        'FormLabelClasses',
        'margin',
        'muiFormControl',
        'shrink',
        'variant',
      ]);
    var shrink = shrinkProp;
    if (typeof shrink === 'undefined' && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    var fcs = (0, _formControlState.default)({
      props: props,
      muiFormControl: muiFormControl,
      states: ['margin', 'variant'],
    });
    var className = (0, _classnames.default)(
      classes.root,
      ((_classNames = {}),
      (0, _defineProperty2.default)(_classNames, classes.formControl, muiFormControl),
      (0, _defineProperty2.default)(_classNames, classes.animated, !disableAnimation),
      (0, _defineProperty2.default)(_classNames, classes.shrink, shrink),
      (0, _defineProperty2.default)(_classNames, classes.marginDense, fcs.margin === 'dense'),
      (0, _defineProperty2.default)(_classNames, classes.filled, fcs.variant === 'filled'),
      (0, _defineProperty2.default)(_classNames, classes.outlined, fcs.variant === 'outlined'),
      _classNames),
      classNameProp,
    );
    return _react.default.createElement(
      _FormLabel.default,
      (0, _extends2.default)(
        {
          'data-shrink': shrink,
          className: className,
          classes: (0, _extends2.default)(
            {
              focused: classes.focused,
              disabled: classes.disabled,
              error: classes.error,
              required: classes.required,
            },
            FormLabelClasses,
          ),
        },
        other,
      ),
      children,
    );
  }
  InputLabel.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    disableAnimation: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    error: _propTypes.default.bool,
    focused: _propTypes.default.bool,
    FormLabelClasses: _propTypes.default.object,
    margin: _propTypes.default.oneOf(['dense']),
    muiFormControl: _propTypes.default.object,
    required: _propTypes.default.bool,
    shrink: _propTypes.default.bool,
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  InputLabel.defaultProps = {
    disableAnimation: false,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiInputLabel',
  })((0, _withFormControlContext.default)(InputLabel));
  exports.default = _default;
});
unwrapExports(InputLabel_1);
var InputLabel_2 = InputLabel_1.styles;
var InputLabel = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _InputLabel.default;
    },
  });
  var _InputLabel = interopRequireDefault(InputLabel_1);
});
unwrapExports(InputLabel);
var FormControl_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _createClass2 = interopRequireDefault(createClass);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _withStyles = interopRequireDefault(withStyles);
  var _FormControlContext = interopRequireDefault(FormControlContext_1);
  var styles = {
    root: {
      display: 'inline-flex',
      flexDirection: 'column',
      position: 'relative',
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: 'top',
    },
    marginNormal: {
      marginTop: 16,
      marginBottom: 8,
    },
    marginDense: {
      marginTop: 8,
      marginBottom: 4,
    },
    fullWidth: {
      width: '100%',
    },
  };
  exports.styles = styles;
  var FormControl = (function (_React$Component) {
    (0, _inherits2.default)(FormControl, _React$Component);
    (0, _createClass2.default)(FormControl, null, [
      {
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
          if (props.disabled && state.focused) {
            return {
              focused: false,
            };
          }
          return null;
        },
      },
    ]);
    function FormControl(props) {
      var _this;
      (0, _classCallCheck2.default)(this, FormControl);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FormControl).call(this));
      _this.handleFocus = function () {
        _this.setState(function (state) {
          return !state.focused
            ? {
                focused: true,
              }
            : null;
        });
      };
      _this.handleBlur = function () {
        _this.setState(function (state) {
          return state.focused
            ? {
                focused: false,
              }
            : null;
        });
      };
      _this.handleDirty = function () {
        if (!_this.state.filled) {
          _this.setState({
            filled: true,
          });
        }
      };
      _this.handleClean = function () {
        if (_this.state.filled) {
          _this.setState({
            filled: false,
          });
        }
      };
      _this.state = {
        adornedStart: false,
        filled: false,
        focused: false,
      };
      var children = props.children;
      if (children) {
        _react.default.Children.forEach(children, function (child) {
          if (!(0, reactHelpers.isMuiElement)(child, ['Input', 'Select'])) {
            return;
          }
          if ((0, utils.isFilled)(child.props, true)) {
            _this.state.filled = true;
          }
          var input = (0, reactHelpers.isMuiElement)(child, ['Select']) ? child.props.input : child;
          if (input && (0, utils.isAdornedStart)(input.props)) {
            _this.state.adornedStart = true;
          }
        });
      }
      return _this;
    }
    (0, _createClass2.default)(FormControl, [
      {
        key: 'render',
        value: function render() {
          var _classNames;
          var _this$props = this.props,
            classes = _this$props.classes,
            className = _this$props.className,
            Component = _this$props.component,
            disabled = _this$props.disabled,
            error = _this$props.error,
            fullWidth = _this$props.fullWidth,
            margin = _this$props.margin,
            required = _this$props.required,
            variant = _this$props.variant,
            other = (0, _objectWithoutProperties2.default)(_this$props, [
              'classes',
              'className',
              'component',
              'disabled',
              'error',
              'fullWidth',
              'margin',
              'required',
              'variant',
            ]);
          var _this$state = this.state,
            adornedStart = _this$state.adornedStart,
            filled = _this$state.filled,
            focused = _this$state.focused;
          var childContext = {
            adornedStart: adornedStart,
            disabled: disabled,
            error: error,
            filled: filled,
            focused: focused,
            margin: margin,
            onBlur: this.handleBlur,
            onEmpty: this.handleClean,
            onFilled: this.handleDirty,
            onFocus: this.handleFocus,
            required: required,
            variant: variant,
          };
          return _react.default.createElement(
            _FormControlContext.default.Provider,
            {
              value: childContext,
            },
            _react.default.createElement(
              Component,
              (0, _extends2.default)(
                {
                  className: (0, _classnames.default)(
                    classes.root,
                    ((_classNames = {}),
                    (0, _defineProperty2.default)(
                      _classNames,
                      classes['margin'.concat((0, helpers.capitalize)(margin))],
                      margin !== 'none',
                    ),
                    (0, _defineProperty2.default)(_classNames, classes.fullWidth, fullWidth),
                    _classNames),
                    className,
                  ),
                },
                other,
              ),
            ),
          );
        },
      },
    ]);
    return FormControl;
  })(_react.default.Component);
  FormControl.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    component: index_es.componentPropType,
    disabled: _propTypes.default.bool,
    error: _propTypes.default.bool,
    fullWidth: _propTypes.default.bool,
    margin: _propTypes.default.oneOf(['none', 'dense', 'normal']),
    required: _propTypes.default.bool,
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  FormControl.defaultProps = {
    component: 'div',
    disabled: false,
    error: false,
    fullWidth: false,
    margin: 'none',
    required: false,
    variant: 'standard',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiFormControl',
  })(FormControl);
  exports.default = _default;
});
unwrapExports(FormControl_1);
var FormControl_2 = FormControl_1.styles;
var FormControl = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _FormControl.default;
    },
  });
  var _FormControl = interopRequireDefault(FormControl_1);
});
unwrapExports(FormControl);
var FormHelperText_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    return {
      root: {
        color: theme.palette.text.secondary,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(12),
        textAlign: 'left',
        marginTop: 8,
        lineHeight: '1em',
        minHeight: '1em',
        margin: 0,
        '&$disabled': {
          color: theme.palette.text.disabled,
        },
        '&$error': {
          color: theme.palette.error.main,
        },
      },
      error: {},
      disabled: {},
      marginDense: {
        marginTop: 4,
      },
      contained: {
        margin: '8px 12px 0',
      },
      focused: {},
      filled: {},
      required: {},
    };
  };
  exports.styles = styles;
  function FormHelperText(props) {
    var _classNames;
    var classes = props.classes,
      classNameProp = props.className,
      Component = props.component,
      disabled = props.disabled,
      error = props.error,
      filled = props.filled,
      focused = props.focused,
      margin = props.margin,
      muiFormControl = props.muiFormControl,
      required = props.required,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'classes',
        'className',
        'component',
        'disabled',
        'error',
        'filled',
        'focused',
        'margin',
        'muiFormControl',
        'required',
        'variant',
      ]);
    var fcs = (0, _formControlState.default)({
      props: props,
      muiFormControl: muiFormControl,
      states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required'],
    });
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: (0, _classnames.default)(
            classes.root,
            ((_classNames = {}),
            (0, _defineProperty2.default)(
              _classNames,
              classes.contained,
              fcs.variant === 'filled' || fcs.variant === 'outlined',
            ),
            (0, _defineProperty2.default)(_classNames, classes.marginDense, fcs.margin === 'dense'),
            (0, _defineProperty2.default)(_classNames, classes.disabled, fcs.disabled),
            (0, _defineProperty2.default)(_classNames, classes.error, fcs.error),
            (0, _defineProperty2.default)(_classNames, classes.filled, fcs.filled),
            (0, _defineProperty2.default)(_classNames, classes.focused, fcs.focused),
            (0, _defineProperty2.default)(_classNames, classes.required, fcs.required),
            _classNames),
            classNameProp,
          ),
        },
        other,
      ),
    );
  }
  FormHelperText.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    component: index_es.componentPropType,
    disabled: _propTypes.default.bool,
    error: _propTypes.default.bool,
    filled: _propTypes.default.bool,
    focused: _propTypes.default.bool,
    margin: _propTypes.default.oneOf(['dense']),
    muiFormControl: _propTypes.default.object,
    required: _propTypes.default.bool,
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  FormHelperText.defaultProps = {
    component: 'p',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiFormHelperText',
  })((0, _withFormControlContext.default)(FormHelperText));
  exports.default = _default;
});
unwrapExports(FormHelperText_1);
var FormHelperText_2 = FormHelperText_1.styles;
var FormHelperText = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _FormHelperText.default;
    },
  });
  var _FormHelperText = interopRequireDefault(FormHelperText_1);
});
unwrapExports(FormHelperText);
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}
var arrayWithoutHoles = _arrayWithoutHoles;
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]')
    return Array.from(iter);
}
var iterableToArray = _iterableToArray;
function _nonIterableSpread() {
  throw new TypeError('Invalid attempt to spread non-iterable instance');
}
var nonIterableSpread = _nonIterableSpread;
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}
var toConsumableArray = _toConsumableArray;
var inDOM = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  exports.default = _default;
  module.exports = exports['default'];
});
unwrapExports(inDOM);
var scrollbarSize_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = scrollbarSize;
  var _inDOM = interopRequireDefault(inDOM);
  var size;
  function scrollbarSize(recalc) {
    if ((!size && size !== 0) || recalc) {
      if (_inDOM.default) {
        var scrollDiv = document.createElement('div');
        scrollDiv.style.position = 'absolute';
        scrollDiv.style.top = '-9999px';
        scrollDiv.style.width = '50px';
        scrollDiv.style.height = '50px';
        scrollDiv.style.overflow = 'scroll';
        document.body.appendChild(scrollDiv);
        size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }
    }
    return size;
  }
  module.exports = exports['default'];
});
unwrapExports(scrollbarSize_1);
var ownerDocument_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  function ownerDocument(node) {
    return (node && node.ownerDocument) || document;
  }
  var _default = ownerDocument;
  exports.default = _default;
});
unwrapExports(ownerDocument_1);
var ownerWindow_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  function ownerWindow(node) {
    var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
    var doc = (0, _ownerDocument.default)(node);
    return doc.defaultView || doc.parentView || fallback;
  }
  var _default = ownerWindow;
  exports.default = _default;
});
unwrapExports(ownerWindow_1);
var RootRef_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _reactDom = interopRequireDefault(reactDom);
  var _propTypes = interopRequireDefault(propTypes);
  var RootRef = (function (_React$Component) {
    (0, _inherits2.default)(RootRef, _React$Component);
    function RootRef() {
      (0, _classCallCheck2.default)(this, RootRef);
      return (0, _possibleConstructorReturn2.default)(
        this,
        (0, _getPrototypeOf2.default)(RootRef).apply(this, arguments),
      );
    }
    (0, _createClass2.default)(RootRef, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.ref = _reactDom.default.findDOMNode(this);
          (0, reactHelpers.setRef)(this.props.rootRef, this.ref);
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          var ref = _reactDom.default.findDOMNode(this);
          if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
            if (prevProps.rootRef !== this.props.rootRef) {
              (0, reactHelpers.setRef)(prevProps.rootRef, null);
            }
            this.ref = ref;
            (0, reactHelpers.setRef)(this.props.rootRef, this.ref);
          }
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.ref = null;
          (0, reactHelpers.setRef)(this.props.rootRef, null);
        },
      },
      {
        key: 'render',
        value: function render() {
          return this.props.children;
        },
      },
    ]);
    return RootRef;
  })(_react.default.Component);
  RootRef.propTypes = {
    children: _propTypes.default.element.isRequired,
    rootRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired,
  };
  {
    RootRef.propTypes = (0, index_es.exactProp)(RootRef.propTypes);
  }
  var _default = RootRef;
  exports.default = _default;
});
unwrapExports(RootRef_1);
var RootRef = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _RootRef.default;
    },
  });
  var _RootRef = interopRequireDefault(RootRef_1);
});
unwrapExports(RootRef);
var Portal_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf3 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _reactDom = interopRequireDefault(reactDom);
  var _propTypes = interopRequireDefault(propTypes);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  function getContainer(container, defaultContainer) {
    container = typeof container === 'function' ? container() : container;
    return _reactDom.default.findDOMNode(container) || defaultContainer;
  }
  function getOwnerDocument(element) {
    return (0, _ownerDocument.default)(_reactDom.default.findDOMNode(element));
  }
  var Portal = (function (_React$Component) {
    (0, _inherits2.default)(Portal, _React$Component);
    function Portal() {
      var _getPrototypeOf2;
      var _this;
      (0, _classCallCheck2.default)(this, Portal);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)),
      );
      _this.getMountNode = function () {
        return _this.mountNode;
      };
      return _this;
    }
    (0, _createClass2.default)(Portal, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.setMountNode(this.props.container);
          if (!this.props.disablePortal) {
            this.forceUpdate(this.props.onRendered);
          }
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          if (prevProps.container !== this.props.container || prevProps.disablePortal !== this.props.disablePortal) {
            this.setMountNode(this.props.container);
            if (!this.props.disablePortal) {
              this.forceUpdate(function () {
                if (_this2.props.onRendered) {
                  clearTimeout(_this2.renderedTimer);
                  _this2.renderedTimer = setTimeout(_this2.props.onRendered);
                }
              });
            }
          }
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.mountNode = null;
          clearTimeout(this.renderedTimer);
        },
      },
      {
        key: 'setMountNode',
        value: function setMountNode(container) {
          if (this.props.disablePortal) {
            this.mountNode = _reactDom.default.findDOMNode(this).parentElement;
            return;
          }
          this.mountNode = getContainer(container, getOwnerDocument(this).body);
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            children = _this$props.children,
            disablePortal = _this$props.disablePortal;
          if (disablePortal) {
            return children;
          }
          return this.mountNode ? _reactDom.default.createPortal(children, this.mountNode) : null;
        },
      },
    ]);
    return Portal;
  })(_react.default.Component);
  Portal.propTypes = {
    children: _propTypes.default.node.isRequired,
    container: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    disablePortal: _propTypes.default.bool,
    onRendered: _propTypes.default.func,
  };
  Portal.defaultProps = {
    disablePortal: false,
  };
  {
    Portal.propTypes = (0, index_es.exactProp)(Portal.propTypes);
  }
  var _default = Portal;
  exports.default = _default;
});
unwrapExports(Portal_1);
var Portal = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Portal.default;
    },
  });
  var _Portal = interopRequireDefault(Portal_1);
});
unwrapExports(Portal);
var camelize_1$1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = camelize;
  var rHyphen = /-(.)/g;
  function camelize(string) {
    return string.replace(rHyphen, function (_, chr) {
      return chr.toUpperCase();
    });
  }
  module.exports = exports['default'];
});
unwrapExports(camelize_1$1);
var camelizeStyle = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = camelizeStyleName;
  var _camelize = interopRequireDefault(camelize_1$1);
  var msPattern = /^-ms-/;
  function camelizeStyleName(string) {
    return (0, _camelize.default)(string.replace(msPattern, 'ms-'));
  }
  module.exports = exports['default'];
});
unwrapExports(camelizeStyle);
var hyphenate_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = hyphenate;
  var rUpper = /([A-Z])/g;
  function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase();
  }
  module.exports = exports['default'];
});
unwrapExports(hyphenate_1);
var hyphenateStyle = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = hyphenateStyleName;
  var _hyphenate = interopRequireDefault(hyphenate_1);
  var msPattern = /^ms-/;
  function hyphenateStyleName(string) {
    return (0, _hyphenate.default)(string).replace(msPattern, '-ms-');
  }
  module.exports = exports['default'];
});
unwrapExports(hyphenateStyle);
var getComputedStyle = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = _getComputedStyle;
  var _camelizeStyle = interopRequireDefault(camelizeStyle);
  var rposition = /^(top|right|bottom|left)$/;
  var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;
  function _getComputedStyle(node) {
    if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
    var doc = node.ownerDocument;
    return 'defaultView' in doc
      ? doc.defaultView.opener
        ? node.ownerDocument.defaultView.getComputedStyle(node, null)
        : window.getComputedStyle(node, null)
      : {
          getPropertyValue: function getPropertyValue(prop) {
            var style = node.style;
            prop = (0, _camelizeStyle.default)(prop);
            if (prop == 'float') prop = 'styleFloat';
            var current = node.currentStyle[prop] || null;
            if (current == null && style && style[prop]) current = style[prop];
            if (rnumnonpx.test(current) && !rposition.test(prop)) {
              var left = style.left;
              var runStyle = node.runtimeStyle;
              var rsLeft = runStyle && runStyle.left;
              if (rsLeft) runStyle.left = node.currentStyle.left;
              style.left = prop === 'fontSize' ? '1em' : current;
              current = style.pixelLeft + 'px';
              style.left = left;
              if (rsLeft) runStyle.left = rsLeft;
            }
            return current;
          },
        };
  }
  module.exports = exports['default'];
});
unwrapExports(getComputedStyle);
var removeStyle_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = removeStyle;
  function removeStyle(node, key) {
    return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
  }
  module.exports = exports['default'];
});
unwrapExports(removeStyle_1);
var properties = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default =
    exports.animationEnd =
    exports.animationDelay =
    exports.animationTiming =
    exports.animationDuration =
    exports.animationName =
    exports.transitionEnd =
    exports.transitionDuration =
    exports.transitionDelay =
    exports.transitionTiming =
    exports.transitionProperty =
    exports.transform =
      void 0;
  var _inDOM = interopRequireDefault(inDOM);
  var transform = 'transform';
  exports.transform = transform;
  var prefix, transitionEnd, animationEnd;
  exports.animationEnd = animationEnd;
  exports.transitionEnd = transitionEnd;
  var transitionProperty, transitionDuration, transitionTiming, transitionDelay;
  exports.transitionDelay = transitionDelay;
  exports.transitionTiming = transitionTiming;
  exports.transitionDuration = transitionDuration;
  exports.transitionProperty = transitionProperty;
  var animationName, animationDuration, animationTiming, animationDelay;
  exports.animationDelay = animationDelay;
  exports.animationTiming = animationTiming;
  exports.animationDuration = animationDuration;
  exports.animationName = animationName;
  if (_inDOM.default) {
    var _getTransitionPropert = getTransitionProperties();
    prefix = _getTransitionPropert.prefix;
    exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
    exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
    exports.transform = transform = prefix + '-' + transform;
    exports.transitionProperty = transitionProperty = prefix + '-transition-property';
    exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
    exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
    exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';
    exports.animationName = animationName = prefix + '-animation-name';
    exports.animationDuration = animationDuration = prefix + '-animation-duration';
    exports.animationTiming = animationTiming = prefix + '-animation-delay';
    exports.animationDelay = animationDelay = prefix + '-animation-timing-function';
  }
  var _default = {
    transform: transform,
    end: transitionEnd,
    property: transitionProperty,
    timing: transitionTiming,
    delay: transitionDelay,
    duration: transitionDuration,
  };
  exports.default = _default;
  function getTransitionProperties() {
    var style = document.createElement('div').style;
    var vendorMap = {
      O: function O(e) {
        return 'o' + e.toLowerCase();
      },
      Moz: function Moz(e) {
        return e.toLowerCase();
      },
      Webkit: function Webkit(e) {
        return 'webkit' + e;
      },
      ms: function ms(e) {
        return 'MS' + e;
      },
    };
    var vendors = Object.keys(vendorMap);
    var transitionEnd, animationEnd;
    var prefix = '';
    for (var i = 0; i < vendors.length; i++) {
      var vendor = vendors[i];
      if (vendor + 'TransitionProperty' in style) {
        prefix = '-' + vendor.toLowerCase();
        transitionEnd = vendorMap[vendor]('TransitionEnd');
        animationEnd = vendorMap[vendor]('AnimationEnd');
        break;
      }
    }
    if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';
    if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';
    style = null;
    return {
      animationEnd: animationEnd,
      transitionEnd: transitionEnd,
      prefix: prefix,
    };
  }
});
unwrapExports(properties);
var properties_1 = properties.animationEnd;
var properties_2 = properties.animationDelay;
var properties_3 = properties.animationTiming;
var properties_4 = properties.animationDuration;
var properties_5 = properties.animationName;
var properties_6 = properties.transitionEnd;
var properties_7 = properties.transitionDuration;
var properties_8 = properties.transitionDelay;
var properties_9 = properties.transitionTiming;
var properties_10 = properties.transitionProperty;
var properties_11 = properties.transform;
var isTransform_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = isTransform;
  var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
  function isTransform(property) {
    return !!(property && supportedTransforms.test(property));
  }
  module.exports = exports['default'];
});
unwrapExports(isTransform_1);
var style_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = style;
  var _camelizeStyle = interopRequireDefault(camelizeStyle);
  var _hyphenateStyle = interopRequireDefault(hyphenateStyle);
  var _getComputedStyle2 = interopRequireDefault(getComputedStyle);
  var _removeStyle = interopRequireDefault(removeStyle_1);
  var _isTransform = interopRequireDefault(isTransform_1);
  function style(node, property, value) {
    var css = '';
    var transforms = '';
    var props = property;
    if (typeof property === 'string') {
      if (value === undefined) {
        return (
          node.style[(0, _camelizeStyle.default)(property)] ||
          (0, _getComputedStyle2.default)(node).getPropertyValue((0, _hyphenateStyle.default)(property))
        );
      } else {
        (props = {})[property] = value;
      }
    }
    Object.keys(props).forEach(function (key) {
      var value = props[key];
      if (!value && value !== 0) {
        (0, _removeStyle.default)(node, (0, _hyphenateStyle.default)(key));
      } else if ((0, _isTransform.default)(key)) {
        transforms += key + '(' + value + ') ';
      } else {
        css += (0, _hyphenateStyle.default)(key) + ': ' + value + ';';
      }
    });
    if (transforms) {
      css += properties.transform + ': ' + transforms + ';';
    }
    node.style.cssText += ';' + css;
  }
  module.exports = exports['default'];
});
unwrapExports(style_1);
var isWindow = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = getWindow;
  function getWindow(node) {
    return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
  }
  module.exports = exports['default'];
});
unwrapExports(isWindow);
var isOverflowing_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.isBody = isBody;
  exports.default = isOverflowing;
  var _isWindow = interopRequireDefault(isWindow);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  var _ownerWindow = interopRequireDefault(ownerWindow_1);
  function isBody(node) {
    return node && node.tagName.toLowerCase() === 'body';
  }
  function isOverflowing(container) {
    var doc = (0, _ownerDocument.default)(container);
    var win = (0, _ownerWindow.default)(doc);
    if (!(0, _isWindow.default)(doc) && !isBody(container)) {
      return container.scrollHeight > container.clientHeight;
    }
    var style = win.getComputedStyle(doc.body);
    var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);
    var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);
    return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;
  }
});
unwrapExports(isOverflowing_1);
var isOverflowing_2 = isOverflowing_1.isBody;
var manageAriaHidden = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.ariaHidden = ariaHidden;
  exports.ariaHiddenSiblings = ariaHiddenSiblings;
  var BLACKLIST = ['template', 'script', 'style'];
  function isHideable(node) {
    return node.nodeType === 1 && BLACKLIST.indexOf(node.tagName.toLowerCase()) === -1;
  }
  function siblings(container, mount, currentNode, callback) {
    var blacklist = [mount, currentNode];
    [].forEach.call(container.children, function (node) {
      if (blacklist.indexOf(node) === -1 && isHideable(node)) {
        callback(node);
      }
    });
  }
  function ariaHidden(node, show) {
    if (show) {
      node.setAttribute('aria-hidden', 'true');
    } else {
      node.removeAttribute('aria-hidden');
    }
  }
  function ariaHiddenSiblings(container, mountNode, currentNode, show) {
    siblings(container, mountNode, currentNode, function (node) {
      return ariaHidden(node, show);
    });
  }
});
unwrapExports(manageAriaHidden);
var manageAriaHidden_1 = manageAriaHidden.ariaHidden;
var manageAriaHidden_2 = manageAriaHidden.ariaHiddenSiblings;
var ModalManager_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _style = interopRequireDefault(style_1);
  var _scrollbarSize = interopRequireDefault(scrollbarSize_1);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  var _isOverflowing = interopRequireDefault(isOverflowing_1);
  function findIndexOf(data, callback) {
    var idx = -1;
    data.some(function (item, index) {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function getPaddingRight(node) {
    return parseInt((0, _style.default)(node, 'paddingRight') || 0, 10);
  }
  function setContainerStyle(data) {
    data.style = {
      overflow: data.container.style.overflow,
      paddingRight: data.container.style.paddingRight,
    };
    var style = {
      overflow: 'hidden',
    };
    if (data.overflowing) {
      var scrollbarSize = (0, _scrollbarSize.default)();
      style.paddingRight = ''.concat(getPaddingRight(data.container) + scrollbarSize, 'px');
      var fixedNodes = (0, _ownerDocument.default)(data.container).querySelectorAll('.mui-fixed');
      for (var i = 0; i < fixedNodes.length; i += 1) {
        var paddingRight = getPaddingRight(fixedNodes[i]);
        data.prevPaddings.push(paddingRight);
        fixedNodes[i].style.paddingRight = ''.concat(paddingRight + scrollbarSize, 'px');
      }
    }
    Object.keys(style).forEach(function (key) {
      data.container.style[key] = style[key];
    });
  }
  function removeContainerStyle(data) {
    if (data.style) {
      Object.keys(data.style).forEach(function (key) {
        data.container.style[key] = data.style[key];
      });
    }
    var fixedNodes = (0, _ownerDocument.default)(data.container).querySelectorAll('.mui-fixed');
    for (var i = 0; i < fixedNodes.length; i += 1) {
      fixedNodes[i].style.paddingRight = ''.concat(data.prevPaddings[i], 'px');
    }
  }
  var ModalManager = (function () {
    function ModalManager() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, _classCallCheck2.default)(this, ModalManager);
      var _options$hideSiblingN = options.hideSiblingNodes,
        hideSiblingNodes = _options$hideSiblingN === void 0 ? true : _options$hideSiblingN,
        _options$handleContai = options.handleContainerOverflow,
        handleContainerOverflow = _options$handleContai === void 0 ? true : _options$handleContai;
      this.hideSiblingNodes = hideSiblingNodes;
      this.handleContainerOverflow = handleContainerOverflow;
      this.modals = [];
      this.data = [];
    }
    (0, _createClass2.default)(ModalManager, [
      {
        key: 'add',
        value: function add(modal, container) {
          var modalIdx = this.modals.indexOf(modal);
          if (modalIdx !== -1) {
            return modalIdx;
          }
          modalIdx = this.modals.length;
          this.modals.push(modal);
          if (modal.modalRef) {
            (0, manageAriaHidden.ariaHidden)(modal.modalRef, false);
          }
          if (this.hideSiblingNodes) {
            (0, manageAriaHidden.ariaHiddenSiblings)(container, modal.mountNode, modal.modalRef, true);
          }
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.container === container;
          });
          if (containerIdx !== -1) {
            this.data[containerIdx].modals.push(modal);
            return modalIdx;
          }
          var data = {
            modals: [modal],
            container: container,
            overflowing: (0, _isOverflowing.default)(container),
            prevPaddings: [],
          };
          this.data.push(data);
          return modalIdx;
        },
      },
      {
        key: 'mount',
        value: function mount(modal) {
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var data = this.data[containerIdx];
          if (!data.style && this.handleContainerOverflow) {
            setContainerStyle(data);
          }
        },
      },
      {
        key: 'remove',
        value: function remove(modal) {
          var modalIdx = this.modals.indexOf(modal);
          if (modalIdx === -1) {
            return modalIdx;
          }
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var data = this.data[containerIdx];
          data.modals.splice(data.modals.indexOf(modal), 1);
          this.modals.splice(modalIdx, 1);
          if (data.modals.length === 0) {
            if (this.handleContainerOverflow) {
              removeContainerStyle(data);
            }
            if (modal.modalRef) {
              (0, manageAriaHidden.ariaHidden)(modal.modalRef, true);
            }
            if (this.hideSiblingNodes) {
              (0, manageAriaHidden.ariaHiddenSiblings)(data.container, modal.mountNode, modal.modalRef, false);
            }
            this.data.splice(containerIdx, 1);
          } else if (this.hideSiblingNodes) {
            var nextTop = data.modals[data.modals.length - 1];
            if (nextTop.modalRef) {
              (0, manageAriaHidden.ariaHidden)(nextTop.modalRef, false);
            }
          }
          return modalIdx;
        },
      },
      {
        key: 'isTopModal',
        value: function isTopModal(modal) {
          return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
        },
      },
    ]);
    return ModalManager;
  })();
  var _default = ModalManager;
  exports.default = _default;
});
unwrapExports(ModalManager_1);
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
  var prototype = Component.prototype;
  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }
  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';
    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks',
    );
  }
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype',
      );
    }
    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;
    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }
  return Component;
}
var reactLifecyclesCompat_es = Object.freeze({
  __proto__: null,
  polyfill: polyfill,
});
var PropTypes = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.classNamesShape = exports.timeoutsShape = void 0;
  var _propTypes = _interopRequireDefault(propTypes);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  var timeoutsShape = _propTypes.default.oneOfType([
    _propTypes.default.number,
    _propTypes.default.shape({
      enter: _propTypes.default.number,
      exit: _propTypes.default.number,
      appear: _propTypes.default.number,
    }).isRequired,
  ]);
  exports.timeoutsShape = timeoutsShape;
  var classNamesShape = _propTypes.default.oneOfType([
    _propTypes.default.string,
    _propTypes.default.shape({
      enter: _propTypes.default.string,
      exit: _propTypes.default.string,
      active: _propTypes.default.string,
    }),
    _propTypes.default.shape({
      enter: _propTypes.default.string,
      enterDone: _propTypes.default.string,
      enterActive: _propTypes.default.string,
      exit: _propTypes.default.string,
      exitDone: _propTypes.default.string,
      exitActive: _propTypes.default.string,
    }),
  ]);
  exports.classNamesShape = classNamesShape;
});
unwrapExports(PropTypes);
var PropTypes_1 = PropTypes.classNamesShape;
var PropTypes_2 = PropTypes.timeoutsShape;
var Transition_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
  var PropTypes$1 = _interopRequireWildcard(propTypes);
  var _react = _interopRequireDefault(react);
  var _reactDom = _interopRequireDefault(reactDom);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj,
        };
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc =
              Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  var UNMOUNTED = 'unmounted';
  exports.UNMOUNTED = UNMOUNTED;
  var EXITED = 'exited';
  exports.EXITED = EXITED;
  var ENTERING = 'entering';
  exports.ENTERING = ENTERING;
  var ENTERED = 'entered';
  exports.ENTERED = ENTERED;
  var EXITING = 'exiting';
  exports.EXITING = EXITING;
  var Transition = (function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);
    function Transition(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context.transitionGroup;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus,
      };
      _this.nextCallback = null;
      return _this;
    }
    var _proto = Transition.prototype;
    _proto.getChildContext = function getChildContext() {
      return {
        transitionGroup: null,
      };
    };
    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED,
        };
      }
      return null;
    };
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }
      return {
        exit: exit,
        enter: enter,
        appear: appear,
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        var node = _reactDom.default.findDOMNode(this);
        if (nextStatus === ENTERING) {
          this.performEnter(node, mounting);
        } else {
          this.performExit(node);
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED,
        });
      }
    };
    _proto.performEnter = function performEnter(node, mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter) {
        this.safeSetState(
          {
            status: ENTERED,
          },
          function () {
            _this2.props.onEntered(node);
          },
        );
        return;
      }
      this.props.onEnter(node, appearing);
      this.safeSetState(
        {
          status: ENTERING,
        },
        function () {
          _this2.props.onEntering(node, appearing);
          _this2.onTransitionEnd(node, enterTimeout, function () {
            _this2.safeSetState(
              {
                status: ENTERED,
              },
              function () {
                _this2.props.onEntered(node, appearing);
              },
            );
          });
        },
      );
    };
    _proto.performExit = function performExit(node) {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      if (!exit) {
        this.safeSetState(
          {
            status: EXITED,
          },
          function () {
            _this3.props.onExited(node);
          },
        );
        return;
      }
      this.props.onExit(node);
      this.safeSetState(
        {
          status: EXITING,
        },
        function () {
          _this3.props.onExiting(node);
          _this3.onTransitionEnd(node, timeouts.exit, function () {
            _this3.safeSetState(
              {
                status: EXITED,
              },
              function () {
                _this3.props.onExited(node);
              },
            );
          });
        },
      );
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function () {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
      this.setNextCallback(handler);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        this.props.addEndListener(node, this.nextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ['children']);
      delete childProps.in;
      delete childProps.mountOnEnter;
      delete childProps.unmountOnExit;
      delete childProps.appear;
      delete childProps.enter;
      delete childProps.exit;
      delete childProps.timeout;
      delete childProps.addEndListener;
      delete childProps.onEnter;
      delete childProps.onEntering;
      delete childProps.onEntered;
      delete childProps.onExit;
      delete childProps.onExiting;
      delete childProps.onExited;
      if (typeof children === 'function') {
        return children(status, childProps);
      }
      var child = _react.default.Children.only(children);
      return _react.default.cloneElement(child, childProps);
    };
    return Transition;
  })(_react.default.Component);
  Transition.contextTypes = {
    transitionGroup: PropTypes$1.object,
  };
  Transition.childContextTypes = {
    transitionGroup: function transitionGroup() {},
  };
  Transition.propTypes = {
    children: PropTypes$1.oneOfType([PropTypes$1.func.isRequired, PropTypes$1.element.isRequired]).isRequired,
    in: PropTypes$1.bool,
    mountOnEnter: PropTypes$1.bool,
    unmountOnExit: PropTypes$1.bool,
    appear: PropTypes$1.bool,
    enter: PropTypes$1.bool,
    exit: PropTypes$1.bool,
    timeout: function timeout(props) {
      var pt = PropTypes.timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: PropTypes$1.func,
    onEnter: PropTypes$1.func,
    onEntering: PropTypes$1.func,
    onEntered: PropTypes$1.func,
    onExit: PropTypes$1.func,
    onExiting: PropTypes$1.func,
    onExited: PropTypes$1.func,
  };
  function noop() {}
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop,
  };
  Transition.UNMOUNTED = 0;
  Transition.EXITED = 1;
  Transition.ENTERING = 2;
  Transition.ENTERED = 3;
  Transition.EXITING = 4;
  var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);
  exports.default = _default;
});
unwrapExports(Transition_1);
var Transition_2 = Transition_1.EXITING;
var Transition_3 = Transition_1.ENTERED;
var Transition_4 = Transition_1.ENTERING;
var Transition_5 = Transition_1.EXITED;
var Transition_6 = Transition_1.UNMOUNTED;
var utils$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.getTransitionProps = getTransitionProps;
  exports.reflow = void 0;
  var reflow = function reflow(node) {
    return node.scrollTop;
  };
  exports.reflow = reflow;
  function getTransitionProps(props, options) {
    var timeout = props.timeout,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style;
    return {
      duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode],
      delay: style.transitionDelay,
    };
  }
});
unwrapExports(utils$1);
var utils_1$1 = utils$1.getTransitionProps;
var utils_2$1 = utils$1.reflow;
var Fade_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf3 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _Transition = interopRequireDefault(Transition_1);
  var _withTheme = interopRequireDefault(withTheme);
  var styles = {
    entering: {
      opacity: 1,
    },
    entered: {
      opacity: 1,
    },
  };
  var Fade = (function (_React$Component) {
    (0, _inherits2.default)(Fade, _React$Component);
    function Fade() {
      var _getPrototypeOf2;
      var _this;
      (0, _classCallCheck2.default)(this, Fade);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Fade)).call.apply(_getPrototypeOf2, [this].concat(args)),
      );
      _this.handleEnter = function (node) {
        var theme = _this.props.theme;
        (0, utils$1.reflow)(node);
        var transitionProps = (0, utils$1.getTransitionProps)(_this.props, {
          mode: 'enter',
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (_this.props.onEnter) {
          _this.props.onEnter(node);
        }
      };
      _this.handleExit = function (node) {
        var theme = _this.props.theme;
        var transitionProps = (0, utils$1.getTransitionProps)(_this.props, {
          mode: 'exit',
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (_this.props.onExit) {
          _this.props.onExit(node);
        }
      };
      return _this;
    }
    (0, _createClass2.default)(Fade, [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            children = _this$props.children,
            onEnter = _this$props.onEnter,
            onExit = _this$props.onExit,
            styleProp = _this$props.style,
            theme = _this$props.theme,
            other = (0, _objectWithoutProperties2.default)(_this$props, [
              'children',
              'onEnter',
              'onExit',
              'style',
              'theme',
            ]);
          var style = (0, _extends2.default)(
            {},
            styleProp,
            _react.default.isValidElement(children) ? children.props.style : {},
          );
          return _react.default.createElement(
            _Transition.default,
            (0, _extends2.default)(
              {
                appear: true,
                onEnter: this.handleEnter,
                onExit: this.handleExit,
              },
              other,
            ),
            function (state, childProps) {
              return _react.default.cloneElement(
                children,
                (0, _extends2.default)(
                  {
                    style: (0, _extends2.default)(
                      {
                        opacity: 0,
                      },
                      styles[state],
                      style,
                    ),
                  },
                  childProps,
                ),
              );
            },
          );
        },
      },
    ]);
    return Fade;
  })(_react.default.Component);
  Fade.propTypes = {
    children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
    in: _propTypes.default.bool,
    onEnter: _propTypes.default.func,
    onExit: _propTypes.default.func,
    style: _propTypes.default.object,
    theme: _propTypes.default.object.isRequired,
    timeout: _propTypes.default.oneOfType([
      _propTypes.default.number,
      _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
      }),
    ]),
  };
  Fade.defaultProps = {
    timeout: {
      enter: transitions.duration.enteringScreen,
      exit: transitions.duration.leavingScreen,
    },
  };
  var _default = (0, _withTheme.default)()(Fade);
  exports.default = _default;
});
unwrapExports(Fade_1);
var Fade = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Fade.default;
    },
  });
  var _Fade = interopRequireDefault(Fade_1);
});
unwrapExports(Fade);
var Backdrop_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _withStyles = interopRequireDefault(withStyles);
  var _Fade = interopRequireDefault(Fade);
  var styles = {
    root: {
      zIndex: -1,
      position: 'fixed',
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      WebkitTapHighlightColor: 'transparent',
      touchAction: 'none',
    },
    invisible: {
      backgroundColor: 'transparent',
    },
  };
  exports.styles = styles;
  function Backdrop(props) {
    var classes = props.classes,
      className = props.className,
      invisible = props.invisible,
      open = props.open,
      transitionDuration = props.transitionDuration,
      other = (0, _objectWithoutProperties2.default)(props, [
        'classes',
        'className',
        'invisible',
        'open',
        'transitionDuration',
      ]);
    return _react.default.createElement(
      _Fade.default,
      (0, _extends2.default)(
        {
          in: open,
          timeout: transitionDuration,
        },
        other,
      ),
      _react.default.createElement('div', {
        className: (0, _classnames.default)(
          classes.root,
          (0, _defineProperty2.default)({}, classes.invisible, invisible),
          className,
        ),
        'aria-hidden': 'true',
      }),
    );
  }
  Backdrop.propTypes = {
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    invisible: _propTypes.default.bool,
    open: _propTypes.default.bool.isRequired,
    transitionDuration: _propTypes.default.oneOfType([
      _propTypes.default.number,
      _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
      }),
    ]),
  };
  Backdrop.defaultProps = {
    invisible: false,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiBackdrop',
  })(Backdrop);
  exports.default = _default;
});
unwrapExports(Backdrop_1);
var Backdrop_2 = Backdrop_1.styles;
var Backdrop = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Backdrop.default;
    },
  });
  var _Backdrop = interopRequireDefault(Backdrop_1);
});
unwrapExports(Backdrop);
var Modal_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);
  var _react = interopRequireDefault(react);
  var _reactDom = interopRequireDefault(reactDom);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _warning = interopRequireDefault(warning_1);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  var _RootRef = interopRequireDefault(RootRef);
  var _Portal = interopRequireDefault(Portal);
  var _withStyles = interopRequireDefault(withStyles);
  var _ModalManager = interopRequireDefault(ModalManager_1);
  var _Backdrop = interopRequireDefault(Backdrop);
  function getContainer(container, defaultContainer) {
    container = typeof container === 'function' ? container() : container;
    return _reactDom.default.findDOMNode(container) || defaultContainer;
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty('in') : false;
  }
  var styles = function styles(theme) {
    return {
      root: {
        position: 'fixed',
        zIndex: theme.zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
      },
      hidden: {
        visibility: 'hidden',
      },
    };
  };
  exports.styles = styles;
  if (!_react.default.createContext) {
    throw new Error('Material-UI: react@16.3.0 or greater is required.');
  }
  var Modal = (function (_React$Component) {
    (0, _inherits2.default)(Modal, _React$Component);
    function Modal(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Modal);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Modal).call(this));
      _this.mounted = false;
      _this.handleOpen = function () {
        var doc = (0, _ownerDocument.default)(_this.mountNode);
        var container = getContainer(_this.props.container, doc.body);
        _this.props.manager.add(
          (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)),
          container,
        );
        doc.addEventListener('focus', _this.enforceFocus, true);
        if (_this.dialogRef) {
          _this.handleOpened();
        }
      };
      _this.handleRendered = function () {
        if (_this.props.onRendered) {
          _this.props.onRendered();
        }
        if (_this.props.open) {
          _this.handleOpened();
        } else {
          (0, manageAriaHidden.ariaHidden)(_this.modalRef, true);
        }
      };
      _this.handleOpened = function () {
        _this.autoFocus();
        _this.props.manager.mount((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
        _this.modalRef.scrollTop = 0;
      };
      _this.handleClose = function (reason) {
        var hasTransition = getHasTransition(_this.props);
        if (!(hasTransition && _this.props.closeAfterTransition) || reason === 'unmount') {
          _this.props.manager.remove((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
        }
        var doc = (0, _ownerDocument.default)(_this.mountNode);
        doc.removeEventListener('focus', _this.enforceFocus, true);
        _this.restoreLastFocus();
      };
      _this.handleExited = function () {
        if (_this.props.closeAfterTransition) {
          _this.props.manager.remove((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
        }
        _this.setState({
          exited: true,
        });
      };
      _this.handleBackdropClick = function (event) {
        if (event.target !== event.currentTarget) {
          return;
        }
        if (_this.props.onBackdropClick) {
          _this.props.onBackdropClick(event);
        }
        if (!_this.props.disableBackdropClick && _this.props.onClose) {
          _this.props.onClose(event, 'backdropClick');
        }
      };
      _this.handleKeyDown = function (event) {
        if (event.key !== 'Escape' || !_this.isTopModal() || event.defaultPrevented) {
          return;
        }
        event.stopPropagation();
        if (_this.props.onEscapeKeyDown) {
          _this.props.onEscapeKeyDown(event);
        }
        if (!_this.props.disableEscapeKeyDown && _this.props.onClose) {
          _this.props.onClose(event, 'escapeKeyDown');
        }
      };
      _this.enforceFocus = function () {
        if (!_this.isTopModal() || _this.props.disableEnforceFocus || !_this.mounted || !_this.dialogRef) {
          return;
        }
        var currentActiveElement = (0, _ownerDocument.default)(_this.mountNode).activeElement;
        if (!_this.dialogRef.contains(currentActiveElement)) {
          _this.dialogRef.focus();
        }
      };
      _this.handlePortalRef = function (ref) {
        _this.mountNode = ref ? ref.getMountNode() : ref;
      };
      _this.handleModalRef = function (ref) {
        _this.modalRef = ref;
      };
      _this.onRootRef = function (ref) {
        _this.dialogRef = ref;
      };
      _this.state = {
        exited: !props.open,
      };
      return _this;
    }
    (0, _createClass2.default)(
      Modal,
      [
        {
          key: 'componentDidMount',
          value: function componentDidMount() {
            this.mounted = true;
            if (this.props.open) {
              this.handleOpen();
            }
          },
        },
        {
          key: 'componentDidUpdate',
          value: function componentDidUpdate(prevProps) {
            if (prevProps.open && !this.props.open) {
              this.handleClose();
            } else if (!prevProps.open && this.props.open) {
              this.lastFocus = (0, _ownerDocument.default)(this.mountNode).activeElement;
              this.handleOpen();
            }
          },
        },
        {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            this.mounted = false;
            if (this.props.open || (getHasTransition(this.props) && !this.state.exited)) {
              this.handleClose('unmount');
            }
          },
        },
        {
          key: 'autoFocus',
          value: function autoFocus() {
            if (this.props.disableAutoFocus || !this.dialogRef) {
              return;
            }
            var currentActiveElement = (0, _ownerDocument.default)(this.mountNode).activeElement;
            if (!this.dialogRef.contains(currentActiveElement)) {
              if (!this.dialogRef.hasAttribute('tabIndex')) {
                (0, _warning.default)(
                  false,
                  [
                    'Material-UI: the modal content node does not accept focus.',
                    'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".',
                  ].join('\n'),
                );
                this.dialogRef.setAttribute('tabIndex', -1);
              }
              this.lastFocus = currentActiveElement;
              this.dialogRef.focus();
            }
          },
        },
        {
          key: 'restoreLastFocus',
          value: function restoreLastFocus() {
            if (this.props.disableRestoreFocus || !this.lastFocus) {
              return;
            }
            if (this.lastFocus.focus) {
              this.lastFocus.focus();
            }
            this.lastFocus = null;
          },
        },
        {
          key: 'isTopModal',
          value: function isTopModal() {
            return this.props.manager.isTopModal(this);
          },
        },
        {
          key: 'render',
          value: function render() {
            var _this$props = this.props,
              BackdropComponent = _this$props.BackdropComponent,
              BackdropProps = _this$props.BackdropProps,
              children = _this$props.children,
              classes = _this$props.classes,
              className = _this$props.className,
              closeAfterTransition = _this$props.closeAfterTransition,
              container = _this$props.container,
              disableAutoFocus = _this$props.disableAutoFocus,
              disableBackdropClick = _this$props.disableBackdropClick,
              disableEnforceFocus = _this$props.disableEnforceFocus,
              disableEscapeKeyDown = _this$props.disableEscapeKeyDown,
              disablePortal = _this$props.disablePortal,
              disableRestoreFocus = _this$props.disableRestoreFocus,
              hideBackdrop = _this$props.hideBackdrop,
              keepMounted = _this$props.keepMounted,
              manager = _this$props.manager,
              onBackdropClick = _this$props.onBackdropClick,
              onClose = _this$props.onClose,
              onEscapeKeyDown = _this$props.onEscapeKeyDown,
              onRendered = _this$props.onRendered,
              open = _this$props.open,
              other = (0, _objectWithoutProperties2.default)(_this$props, [
                'BackdropComponent',
                'BackdropProps',
                'children',
                'classes',
                'className',
                'closeAfterTransition',
                'container',
                'disableAutoFocus',
                'disableBackdropClick',
                'disableEnforceFocus',
                'disableEscapeKeyDown',
                'disablePortal',
                'disableRestoreFocus',
                'hideBackdrop',
                'keepMounted',
                'manager',
                'onBackdropClick',
                'onClose',
                'onEscapeKeyDown',
                'onRendered',
                'open',
              ]);
            var exited = this.state.exited;
            var hasTransition = getHasTransition(this.props);
            if (!keepMounted && !open && (!hasTransition || exited)) {
              return null;
            }
            var childProps = {};
            if (hasTransition) {
              childProps.onExited = (0, helpers.createChainedFunction)(this.handleExited, children.props.onExited);
            }
            if (children.props.role === undefined) {
              childProps.role = children.props.role || 'document';
            }
            if (children.props.tabIndex === undefined) {
              childProps.tabIndex = children.props.tabIndex || '-1';
            }
            return _react.default.createElement(
              _Portal.default,
              {
                ref: this.handlePortalRef,
                container: container,
                disablePortal: disablePortal,
                onRendered: this.handleRendered,
              },
              _react.default.createElement(
                'div',
                (0, _extends2.default)(
                  {
                    ref: this.handleModalRef,
                    onKeyDown: this.handleKeyDown,
                    role: 'presentation',
                    className: (0, _classnames.default)(
                      classes.root,
                      className,
                      (0, _defineProperty2.default)({}, classes.hidden, exited),
                    ),
                  },
                  other,
                ),
                hideBackdrop
                  ? null
                  : _react.default.createElement(
                      BackdropComponent,
                      (0, _extends2.default)(
                        {
                          open: open,
                          onClick: this.handleBackdropClick,
                        },
                        BackdropProps,
                      ),
                    ),
                _react.default.createElement(
                  _RootRef.default,
                  {
                    rootRef: this.onRootRef,
                  },
                  _react.default.cloneElement(children, childProps),
                ),
              ),
            );
          },
        },
      ],
      [
        {
          key: 'getDerivedStateFromProps',
          value: function getDerivedStateFromProps(nextProps) {
            if (nextProps.open) {
              return {
                exited: false,
              };
            }
            if (!getHasTransition(nextProps)) {
              return {
                exited: true,
              };
            }
            return null;
          },
        },
      ],
    );
    return Modal;
  })(_react.default.Component);
  Modal.propTypes = {
    BackdropComponent: index_es.componentPropType,
    BackdropProps: _propTypes.default.object,
    children: _propTypes.default.element,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    closeAfterTransition: _propTypes.default.bool,
    container: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    disableAutoFocus: _propTypes.default.bool,
    disableBackdropClick: _propTypes.default.bool,
    disableEnforceFocus: _propTypes.default.bool,
    disableEscapeKeyDown: _propTypes.default.bool,
    disablePortal: _propTypes.default.bool,
    disableRestoreFocus: _propTypes.default.bool,
    hideBackdrop: _propTypes.default.bool,
    keepMounted: _propTypes.default.bool,
    manager: _propTypes.default.object,
    onBackdropClick: _propTypes.default.func,
    onClose: _propTypes.default.func,
    onEscapeKeyDown: _propTypes.default.func,
    onRendered: _propTypes.default.func,
    open: _propTypes.default.bool.isRequired,
  };
  Modal.defaultProps = {
    BackdropComponent: _Backdrop.default,
    closeAfterTransition: false,
    disableAutoFocus: false,
    disableBackdropClick: false,
    disableEnforceFocus: false,
    disableEscapeKeyDown: false,
    disablePortal: false,
    disableRestoreFocus: false,
    hideBackdrop: false,
    keepMounted: false,
    manager: new _ModalManager.default(),
  };
  var _default = (0, _withStyles.default)(styles, {
    flip: false,
    name: 'MuiModal',
  })(Modal);
  exports.default = _default;
});
unwrapExports(Modal_1);
var Modal_2 = Modal_1.styles;
var Modal = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Modal.default;
    },
  });
  Object.defineProperty(exports, 'ModalManager', {
    enumerable: true,
    get: function get() {
      return _ModalManager.default;
    },
  });
  var _Modal = interopRequireDefault(Modal_1);
  var _ModalManager = interopRequireDefault(ModalManager_1);
});
unwrapExports(Modal);
var Modal_1$1 = Modal.ModalManager;
var Grow_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf3 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _Transition = interopRequireDefault(Transition_1);
  var _withTheme = interopRequireDefault(withTheme);
  function getScale(value) {
    return 'scale('.concat(value, ', ').concat(Math.pow(value, 2), ')');
  }
  var styles = {
    entering: {
      opacity: 1,
      transform: getScale(1),
    },
    entered: {
      opacity: 1,
      transform: ''.concat(getScale(1), ' translateZ(0)'),
    },
  };
  var Grow = (function (_React$Component) {
    (0, _inherits2.default)(Grow, _React$Component);
    function Grow() {
      var _getPrototypeOf2;
      var _this;
      (0, _classCallCheck2.default)(this, Grow);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Grow)).call.apply(_getPrototypeOf2, [this].concat(args)),
      );
      _this.handleEnter = function (node) {
        var _this$props = _this.props,
          theme = _this$props.theme,
          timeout = _this$props.timeout;
        (0, utils$1.reflow)(node);
        var _getTransitionProps = (0, utils$1.getTransitionProps)(_this.props, {
            mode: 'enter',
          }),
          transitionDuration = _getTransitionProps.duration,
          delay = _getTransitionProps.delay;
        var duration = 0;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          _this.autoTimeout = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [
          theme.transitions.create('opacity', {
            duration: duration,
            delay: delay,
          }),
          theme.transitions.create('transform', {
            duration: duration * 0.666,
            delay: delay,
          }),
        ].join(',');
        if (_this.props.onEnter) {
          _this.props.onEnter(node);
        }
      };
      _this.handleExit = function (node) {
        var _this$props2 = _this.props,
          theme = _this$props2.theme,
          timeout = _this$props2.timeout;
        var duration = 0;
        var _getTransitionProps2 = (0, utils$1.getTransitionProps)(_this.props, {
            mode: 'exit',
          }),
          transitionDuration = _getTransitionProps2.duration,
          delay = _getTransitionProps2.delay;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          _this.autoTimeout = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [
          theme.transitions.create('opacity', {
            duration: duration,
            delay: delay,
          }),
          theme.transitions.create('transform', {
            duration: duration * 0.666,
            delay: delay || duration * 0.333,
          }),
        ].join(',');
        node.style.opacity = '0';
        node.style.transform = getScale(0.75);
        if (_this.props.onExit) {
          _this.props.onExit(node);
        }
      };
      _this.addEndListener = function (_, next) {
        if (_this.props.timeout === 'auto') {
          _this.timer = setTimeout(next, _this.autoTimeout || 0);
        }
      };
      return _this;
    }
    (0, _createClass2.default)(Grow, [
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          clearTimeout(this.timer);
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props3 = this.props,
            children = _this$props3.children,
            onEnter = _this$props3.onEnter,
            onExit = _this$props3.onExit,
            styleProp = _this$props3.style,
            theme = _this$props3.theme,
            timeout = _this$props3.timeout,
            other = (0, _objectWithoutProperties2.default)(_this$props3, [
              'children',
              'onEnter',
              'onExit',
              'style',
              'theme',
              'timeout',
            ]);
          var style = (0, _extends2.default)(
            {},
            styleProp,
            _react.default.isValidElement(children) ? children.props.style : {},
          );
          return _react.default.createElement(
            _Transition.default,
            (0, _extends2.default)(
              {
                appear: true,
                onEnter: this.handleEnter,
                onExit: this.handleExit,
                addEndListener: this.addEndListener,
                timeout: timeout === 'auto' ? null : timeout,
              },
              other,
            ),
            function (state, childProps) {
              return _react.default.cloneElement(
                children,
                (0, _extends2.default)(
                  {
                    style: (0, _extends2.default)(
                      {
                        opacity: 0,
                        transform: getScale(0.75),
                      },
                      styles[state],
                      style,
                    ),
                  },
                  childProps,
                ),
              );
            },
          );
        },
      },
    ]);
    return Grow;
  })(_react.default.Component);
  Grow.propTypes = {
    children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
    in: _propTypes.default.bool,
    onEnter: _propTypes.default.func,
    onExit: _propTypes.default.func,
    style: _propTypes.default.object,
    theme: _propTypes.default.object.isRequired,
    timeout: _propTypes.default.oneOfType([
      _propTypes.default.number,
      _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
      }),
      _propTypes.default.oneOf(['auto']),
    ]),
  };
  Grow.defaultProps = {
    timeout: 'auto',
  };
  Grow.muiSupportAuto = true;
  var _default = (0, _withTheme.default)()(Grow);
  exports.default = _default;
});
unwrapExports(Grow_1);
var Grow = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Grow.default;
    },
  });
  var _Grow = interopRequireDefault(Grow_1);
});
unwrapExports(Grow);
var Paper_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _extends2 = interopRequireDefault(_extends_1);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _warning = interopRequireDefault(warning_1);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    var elevations = {};
    theme.shadows.forEach(function (shadow, index) {
      elevations['elevation'.concat(index)] = {
        boxShadow: shadow,
      };
    });
    return (0, _extends2.default)(
      {
        root: {
          backgroundColor: theme.palette.background.paper,
        },
        rounded: {
          borderRadius: theme.shape.borderRadius,
        },
      },
      elevations,
    );
  };
  exports.styles = styles;
  function Paper(props) {
    var classes = props.classes,
      classNameProp = props.className,
      Component = props.component,
      square = props.square,
      elevation = props.elevation,
      other = (0, _objectWithoutProperties2.default)(props, [
        'classes',
        'className',
        'component',
        'square',
        'elevation',
      ]);
    (0,
    _warning.default)(elevation >= 0 && elevation < 25, 'Material-UI: this elevation `'.concat(elevation, '` is not implemented.'));
    var className = (0, _classnames.default)(
      classes.root,
      classes['elevation'.concat(elevation)],
      (0, _defineProperty2.default)({}, classes.rounded, !square),
      classNameProp,
    );
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: className,
        },
        other,
      ),
    );
  }
  Paper.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    component: index_es.componentPropType,
    elevation: _propTypes.default.number,
    square: _propTypes.default.bool,
  };
  Paper.defaultProps = {
    component: 'div',
    elevation: 2,
    square: false,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiPaper',
  })(Paper);
  exports.default = _default;
});
unwrapExports(Paper_1);
var Paper_2 = Paper_1.styles;
var Paper = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Paper.default;
    },
  });
  var _Paper = interopRequireDefault(Paper_1);
});
unwrapExports(Paper);
var Popover_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _reactDom = interopRequireDefault(reactDom);
  var _warning = interopRequireDefault(warning_1);
  var _debounce = interopRequireDefault(debounce_1);
  var _reactEventListener = interopRequireDefault(reactEventListener_cjs);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  var _ownerWindow = interopRequireDefault(ownerWindow_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _Modal = interopRequireDefault(Modal);
  var _Grow = interopRequireDefault(Grow);
  var _Paper = interopRequireDefault(Paper);
  function getOffsetTop(rect, vertical) {
    var offset = 0;
    if (typeof vertical === 'number') {
      offset = vertical;
    } else if (vertical === 'center') {
      offset = rect.height / 2;
    } else if (vertical === 'bottom') {
      offset = rect.height;
    }
    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    var offset = 0;
    if (typeof horizontal === 'number') {
      offset = horizontal;
    } else if (horizontal === 'center') {
      offset = rect.width / 2;
    } else if (horizontal === 'right') {
      offset = rect.width;
    }
    return offset;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical]
      .map(function (n) {
        return typeof n === 'number' ? ''.concat(n, 'px') : n;
      })
      .join(' ');
  }
  function getScrollParent(parent, child) {
    var element = child;
    var scrollTop = 0;
    while (element && element !== parent) {
      element = element.parentNode;
      scrollTop += element.scrollTop;
    }
    return scrollTop;
  }
  function getAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
  }
  var styles = {
    paper: {
      position: 'absolute',
      overflowY: 'auto',
      overflowX: 'hidden',
      minWidth: 16,
      minHeight: 16,
      maxWidth: 'calc(100% - 32px)',
      maxHeight: 'calc(100% - 32px)',
      outline: 'none',
    },
  };
  exports.styles = styles;
  var Popover = (function (_React$Component) {
    (0, _inherits2.default)(Popover, _React$Component);
    function Popover() {
      var _this;
      (0, _classCallCheck2.default)(this, Popover);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Popover).call(this));
      _this.handleGetOffsetTop = getOffsetTop;
      _this.handleGetOffsetLeft = getOffsetLeft;
      _this.componentWillUnmount = function () {
        _this.handleResize.clear();
      };
      _this.setPositioningStyles = function (element) {
        var positioning = _this.getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
      };
      _this.getPositioningStyle = function (element) {
        var _this$props = _this.props,
          anchorEl = _this$props.anchorEl,
          anchorReference = _this$props.anchorReference,
          marginThreshold = _this$props.marginThreshold;
        var contentAnchorOffset = _this.getContentAnchorOffset(element);
        var elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight,
        };
        var transformOrigin = _this.getTransformOrigin(elemRect, contentAnchorOffset);
        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(transformOrigin),
          };
        }
        var anchorOffset = _this.getAnchorOffset(contentAnchorOffset);
        var top = anchorOffset.top - transformOrigin.vertical;
        var left = anchorOffset.left - transformOrigin.horizontal;
        var bottom = top + elemRect.height;
        var right = left + elemRect.width;
        var containerWindow = (0, _ownerWindow.default)(getAnchorEl(anchorEl));
        var heightThreshold = containerWindow.innerHeight - marginThreshold;
        var widthThreshold = containerWindow.innerWidth - marginThreshold;
        if (top < marginThreshold) {
          var diff = top - marginThreshold;
          top -= diff;
          transformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
          var _diff = bottom - heightThreshold;
          top -= _diff;
          transformOrigin.vertical += _diff;
        }
        (0, _warning.default)(
          elemRect.height < heightThreshold || !elemRect.height || !heightThreshold,
          [
            'Material-UI: the popover component is too tall.',
            'Some part of it can not be seen on the screen ('.concat(elemRect.height - heightThreshold, 'px).'),
            'Please consider adding a `max-height` to improve the user-experience.',
          ].join('\n'),
        );
        if (left < marginThreshold) {
          var _diff2 = left - marginThreshold;
          left -= _diff2;
          transformOrigin.horizontal += _diff2;
        } else if (right > widthThreshold) {
          var _diff3 = right - widthThreshold;
          left -= _diff3;
          transformOrigin.horizontal += _diff3;
        }
        return {
          top: ''.concat(top, 'px'),
          left: ''.concat(left, 'px'),
          transformOrigin: getTransformOriginValue(transformOrigin),
        };
      };
      _this.handleEntering = function (element) {
        if (_this.props.onEntering) {
          _this.props.onEntering(element);
        }
        _this.setPositioningStyles(element);
      };
      if (typeof window !== 'undefined') {
        _this.handleResize = (0, _debounce.default)(function () {
          if (!_this.props.open) {
            return;
          }
          _this.setPositioningStyles(_this.paperRef);
        }, 166);
      }
      return _this;
    }
    (0, _createClass2.default)(Popover, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (this.props.action) {
            this.props.action({
              updatePosition: this.handleResize,
            });
          }
        },
      },
      {
        key: 'getAnchorOffset',
        value: function getAnchorOffset(contentAnchorOffset) {
          var _this$props2 = this.props,
            anchorEl = _this$props2.anchorEl,
            anchorOrigin = _this$props2.anchorOrigin,
            anchorReference = _this$props2.anchorReference,
            anchorPosition = _this$props2.anchorPosition;
          if (anchorReference === 'anchorPosition') {
            (0, _warning.default)(
              anchorPosition,
              'Material-UI: you need to provide a `anchorPosition` property when using ' +
                '<Popover anchorReference="anchorPosition" />.',
            );
            return anchorPosition;
          }
          var anchorElement = getAnchorEl(anchorEl) || (0, _ownerDocument.default)(this.paperRef).body;
          var anchorRect = anchorElement.getBoundingClientRect();
          var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
          return {
            top: anchorRect.top + this.handleGetOffsetTop(anchorRect, anchorVertical),
            left: anchorRect.left + this.handleGetOffsetLeft(anchorRect, anchorOrigin.horizontal),
          };
        },
      },
      {
        key: 'getContentAnchorOffset',
        value: function getContentAnchorOffset(element) {
          var _this$props3 = this.props,
            getContentAnchorEl = _this$props3.getContentAnchorEl,
            anchorReference = _this$props3.anchorReference;
          var contentAnchorOffset = 0;
          if (getContentAnchorEl && anchorReference === 'anchorEl') {
            var contentAnchorEl = getContentAnchorEl(element);
            if (contentAnchorEl && element.contains(contentAnchorEl)) {
              var scrollTop = getScrollParent(element, contentAnchorEl);
              contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
            }
            (0, _warning.default)(
              this.props.anchorOrigin.vertical === 'top',
              [
                'Material-UI: you can not change the default `anchorOrigin.vertical` value ',
                'when also providing the `getContentAnchorEl` property to the popover component.',
                'Only use one of the two properties.',
                'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.',
              ].join('\n'),
            );
          }
          return contentAnchorOffset;
        },
      },
      {
        key: 'getTransformOrigin',
        value: function getTransformOrigin(elemRect) {
          var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var transformOrigin = this.props.transformOrigin;
          return {
            vertical: this.handleGetOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
            horizontal: this.handleGetOffsetLeft(elemRect, transformOrigin.horizontal),
          };
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this2 = this;
          var _this$props4 = this.props,
            action = _this$props4.action,
            anchorEl = _this$props4.anchorEl,
            anchorOrigin = _this$props4.anchorOrigin,
            anchorPosition = _this$props4.anchorPosition,
            anchorReference = _this$props4.anchorReference,
            children = _this$props4.children,
            classes = _this$props4.classes,
            containerProp = _this$props4.container,
            elevation = _this$props4.elevation,
            getContentAnchorEl = _this$props4.getContentAnchorEl,
            marginThreshold = _this$props4.marginThreshold,
            ModalClasses = _this$props4.ModalClasses,
            onEnter = _this$props4.onEnter,
            onEntered = _this$props4.onEntered,
            onEntering = _this$props4.onEntering,
            onExit = _this$props4.onExit,
            onExited = _this$props4.onExited,
            onExiting = _this$props4.onExiting,
            open = _this$props4.open,
            PaperProps = _this$props4.PaperProps,
            role = _this$props4.role,
            transformOrigin = _this$props4.transformOrigin,
            TransitionComponent = _this$props4.TransitionComponent,
            transitionDurationProp = _this$props4.transitionDuration,
            _this$props4$Transiti = _this$props4.TransitionProps,
            TransitionProps = _this$props4$Transiti === void 0 ? {} : _this$props4$Transiti,
            other = (0, _objectWithoutProperties2.default)(_this$props4, [
              'action',
              'anchorEl',
              'anchorOrigin',
              'anchorPosition',
              'anchorReference',
              'children',
              'classes',
              'container',
              'elevation',
              'getContentAnchorEl',
              'marginThreshold',
              'ModalClasses',
              'onEnter',
              'onEntered',
              'onEntering',
              'onExit',
              'onExited',
              'onExiting',
              'open',
              'PaperProps',
              'role',
              'transformOrigin',
              'TransitionComponent',
              'transitionDuration',
              'TransitionProps',
            ]);
          var transitionDuration = transitionDurationProp;
          if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
            transitionDuration = undefined;
          }
          var container =
            containerProp || (anchorEl ? (0, _ownerDocument.default)(getAnchorEl(anchorEl)).body : undefined);
          return _react.default.createElement(
            _Modal.default,
            (0, _extends2.default)(
              {
                classes: ModalClasses,
                container: container,
                open: open,
                BackdropProps: {
                  invisible: true,
                },
              },
              other,
            ),
            _react.default.createElement(
              TransitionComponent,
              (0, _extends2.default)(
                {
                  appear: true,
                  in: open,
                  onEnter: onEnter,
                  onEntered: onEntered,
                  onExit: onExit,
                  onExited: onExited,
                  onExiting: onExiting,
                  role: role,
                  timeout: transitionDuration,
                },
                TransitionProps,
                {
                  onEntering: (0, helpers.createChainedFunction)(this.handleEntering, TransitionProps.onEntering),
                },
              ),
              _react.default.createElement(
                _Paper.default,
                (0, _extends2.default)(
                  {
                    className: classes.paper,
                    elevation: elevation,
                    ref: function ref(_ref) {
                      _this2.paperRef = _reactDom.default.findDOMNode(_ref);
                    },
                  },
                  PaperProps,
                ),
                _react.default.createElement(_reactEventListener.default, {
                  target: 'window',
                  onResize: this.handleResize,
                }),
                children,
              ),
            ),
          );
        },
      },
    ]);
    return Popover;
  })(_react.default.Component);
  Popover.propTypes = {
    action: _propTypes.default.func,
    anchorEl: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    anchorOrigin: _propTypes.default.shape({
      horizontal: _propTypes.default.oneOfType([
        _propTypes.default.number,
        _propTypes.default.oneOf(['left', 'center', 'right']),
      ]).isRequired,
      vertical: _propTypes.default.oneOfType([
        _propTypes.default.number,
        _propTypes.default.oneOf(['top', 'center', 'bottom']),
      ]).isRequired,
    }),
    anchorPosition: _propTypes.default.shape({
      left: _propTypes.default.number.isRequired,
      top: _propTypes.default.number.isRequired,
    }),
    anchorReference: _propTypes.default.oneOf(['anchorEl', 'anchorPosition', 'none']),
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    container: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    elevation: _propTypes.default.number,
    getContentAnchorEl: _propTypes.default.func,
    marginThreshold: _propTypes.default.number,
    ModalClasses: _propTypes.default.object,
    onClose: _propTypes.default.func,
    onEnter: _propTypes.default.func,
    onEntered: _propTypes.default.func,
    onEntering: _propTypes.default.func,
    onExit: _propTypes.default.func,
    onExited: _propTypes.default.func,
    onExiting: _propTypes.default.func,
    open: _propTypes.default.bool.isRequired,
    PaperProps: _propTypes.default.object,
    role: _propTypes.default.string,
    transformOrigin: _propTypes.default.shape({
      horizontal: _propTypes.default.oneOfType([
        _propTypes.default.number,
        _propTypes.default.oneOf(['left', 'center', 'right']),
      ]).isRequired,
      vertical: _propTypes.default.oneOfType([
        _propTypes.default.number,
        _propTypes.default.oneOf(['top', 'center', 'bottom']),
      ]).isRequired,
    }),
    TransitionComponent: index_es.componentPropType,
    transitionDuration: _propTypes.default.oneOfType([
      _propTypes.default.number,
      _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
      }),
      _propTypes.default.oneOf(['auto']),
    ]),
    TransitionProps: _propTypes.default.object,
  };
  Popover.defaultProps = {
    anchorReference: 'anchorEl',
    anchorOrigin: {
      vertical: 'top',
      horizontal: 'left',
    },
    elevation: 8,
    marginThreshold: 16,
    transformOrigin: {
      vertical: 'top',
      horizontal: 'left',
    },
    TransitionComponent: _Grow.default,
    transitionDuration: 'auto',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiPopover',
  })(Popover);
  exports.default = _default;
});
unwrapExports(Popover_1);
var Popover_2 = Popover_1.styles;
var Popover = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Popover.default;
    },
  });
  var _Popover = interopRequireDefault(Popover_1);
});
unwrapExports(Popover);
var ListContext_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _react = interopRequireDefault(react);
  var ListContext = _react.default.createContext({});
  var _default = ListContext;
  exports.default = _default;
});
unwrapExports(ListContext_1);
var List_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _withStyles = interopRequireDefault(withStyles);
  var _ListContext = interopRequireDefault(ListContext_1);
  var styles = {
    root: {
      listStyle: 'none',
      margin: 0,
      padding: 0,
      position: 'relative',
    },
    padding: {
      paddingTop: 8,
      paddingBottom: 8,
    },
    dense: {
      paddingTop: 4,
      paddingBottom: 4,
    },
    subheader: {
      paddingTop: 0,
    },
  };
  exports.styles = styles;
  function List(props) {
    var _classNames;
    var children = props.children,
      classes = props.classes,
      className = props.className,
      Component = props.component,
      dense = props.dense,
      disablePadding = props.disablePadding,
      subheader = props.subheader,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'component',
        'dense',
        'disablePadding',
        'subheader',
      ]);
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: (0, _classnames.default)(
            classes.root,
            ((_classNames = {}),
            (0, _defineProperty2.default)(_classNames, classes.dense, dense && !disablePadding),
            (0, _defineProperty2.default)(_classNames, classes.padding, !disablePadding),
            (0, _defineProperty2.default)(_classNames, classes.subheader, subheader),
            _classNames),
            className,
          ),
        },
        other,
      ),
      _react.default.createElement(
        _ListContext.default.Provider,
        {
          value: {
            dense: dense,
          },
        },
        subheader,
        children,
      ),
    );
  }
  List.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    component: index_es.componentPropType,
    dense: _propTypes.default.bool,
    disablePadding: _propTypes.default.bool,
    subheader: _propTypes.default.node,
  };
  List.defaultProps = {
    component: 'ul',
    dense: false,
    disablePadding: false,
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiList',
  })(List);
  exports.default = _default;
});
unwrapExports(List_1);
var List_2 = List_1.styles;
var List = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _List.default;
    },
  });
  var _List = interopRequireDefault(List_1);
});
unwrapExports(List);
var MenuList_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf3 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _reactDom = interopRequireDefault(reactDom);
  var _warning = interopRequireDefault(warning_1);
  var _ownerDocument = interopRequireDefault(ownerDocument_1);
  var _List = interopRequireDefault(List);
  var MenuList = (function (_React$Component) {
    (0, _inherits2.default)(MenuList, _React$Component);
    function MenuList() {
      var _getPrototypeOf2;
      var _this;
      (0, _classCallCheck2.default)(this, MenuList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MenuList)).call.apply(_getPrototypeOf2, [this].concat(args)),
      );
      _this.state = {
        currentTabIndex: null,
      };
      _this.handleBlur = function (event) {
        _this.blurTimer = setTimeout(function () {
          if (_this.listRef) {
            var list = _this.listRef;
            var currentFocus = (0, _ownerDocument.default)(list).activeElement;
            if (!list.contains(currentFocus)) {
              _this.resetTabIndex();
            }
          }
        }, 30);
        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
      };
      _this.handleKeyDown = function (event) {
        var list = _this.listRef;
        var key = event.key;
        var currentFocus = (0, _ownerDocument.default)(list).activeElement;
        if (
          (key === 'ArrowUp' || key === 'ArrowDown') &&
          (!currentFocus || (currentFocus && !list.contains(currentFocus)))
        ) {
          if (_this.selectedItemRef) {
            _this.selectedItemRef.focus();
          } else {
            list.firstChild.focus();
          }
        } else if (key === 'ArrowDown') {
          event.preventDefault();
          if (currentFocus.nextElementSibling) {
            currentFocus.nextElementSibling.focus();
          } else if (!_this.props.disableListWrap) {
            list.firstChild.focus();
          }
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          if (currentFocus.previousElementSibling) {
            currentFocus.previousElementSibling.focus();
          } else if (!_this.props.disableListWrap) {
            list.lastChild.focus();
          }
        } else if (key === 'Home') {
          event.preventDefault();
          list.firstChild.focus();
        } else if (key === 'End') {
          event.preventDefault();
          list.lastChild.focus();
        }
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(event);
        }
      };
      _this.handleItemFocus = function (event) {
        var list = _this.listRef;
        if (list) {
          for (var i = 0; i < list.children.length; i += 1) {
            if (list.children[i] === event.currentTarget) {
              _this.setTabIndex(i);
              break;
            }
          }
        }
      };
      return _this;
    }
    (0, _createClass2.default)(MenuList, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.resetTabIndex();
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          clearTimeout(this.blurTimer);
        },
      },
      {
        key: 'setTabIndex',
        value: function setTabIndex(index) {
          this.setState({
            currentTabIndex: index,
          });
        },
      },
      {
        key: 'focus',
        value: function focus() {
          var currentTabIndex = this.state.currentTabIndex;
          var list = this.listRef;
          if (!list || !list.children || !list.firstChild) {
            return;
          }
          if (currentTabIndex && currentTabIndex >= 0) {
            list.children[currentTabIndex].focus();
          } else {
            list.firstChild.focus();
          }
        },
      },
      {
        key: 'resetTabIndex',
        value: function resetTabIndex() {
          var list = this.listRef;
          var currentFocus = (0, _ownerDocument.default)(list).activeElement;
          var items = [];
          for (var i = 0; i < list.children.length; i += 1) {
            items.push(list.children[i]);
          }
          var currentFocusIndex = items.indexOf(currentFocus);
          if (currentFocusIndex !== -1) {
            return this.setTabIndex(currentFocusIndex);
          }
          if (this.selectedItemRef) {
            return this.setTabIndex(items.indexOf(this.selectedItemRef));
          }
          return this.setTabIndex(0);
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this2 = this;
          var _this$props = this.props,
            children = _this$props.children,
            className = _this$props.className,
            onBlur = _this$props.onBlur,
            onKeyDown = _this$props.onKeyDown,
            disableListWrap = _this$props.disableListWrap,
            other = (0, _objectWithoutProperties2.default)(_this$props, [
              'children',
              'className',
              'onBlur',
              'onKeyDown',
              'disableListWrap',
            ]);
          return _react.default.createElement(
            _List.default,
            (0, _extends2.default)(
              {
                role: 'menu',
                ref: function ref(_ref) {
                  _this2.listRef = _reactDom.default.findDOMNode(_ref);
                },
                className: className,
                onKeyDown: this.handleKeyDown,
                onBlur: this.handleBlur,
              },
              other,
            ),
            _react.default.Children.map(children, function (child, index) {
              if (!_react.default.isValidElement(child)) {
                return null;
              }
              (0,
              _warning.default)(child.type !== _react.default.Fragment, ["Material-UI: the MenuList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
              return _react.default.cloneElement(child, {
                tabIndex: index === _this2.state.currentTabIndex ? 0 : -1,
                ref: child.props.selected
                  ? function (ref) {
                      _this2.selectedItemRef = _reactDom.default.findDOMNode(ref);
                    }
                  : undefined,
                onFocus: _this2.handleItemFocus,
              });
            }),
          );
        },
      },
    ]);
    return MenuList;
  })(_react.default.Component);
  MenuList.propTypes = {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    disableListWrap: _propTypes.default.bool,
    onBlur: _propTypes.default.func,
    onKeyDown: _propTypes.default.func,
  };
  MenuList.defaultProps = {
    disableListWrap: false,
  };
  var _default = MenuList;
  exports.default = _default;
});
unwrapExports(MenuList_1);
var MenuList = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _MenuList.default;
    },
  });
  var _MenuList = interopRequireDefault(MenuList_1);
});
unwrapExports(MenuList);
var Menu_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf3 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _reactDom = interopRequireDefault(reactDom);
  var _scrollbarSize = interopRequireDefault(scrollbarSize_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _Popover = interopRequireDefault(Popover);
  var _MenuList = interopRequireDefault(MenuList);
  var RTL_ORIGIN = {
    vertical: 'top',
    horizontal: 'right',
  };
  var LTR_ORIGIN = {
    vertical: 'top',
    horizontal: 'left',
  };
  var styles = {
    paper: {
      maxHeight: 'calc(100% - 96px)',
      WebkitOverflowScrolling: 'touch',
    },
  };
  exports.styles = styles;
  var Menu = (function (_React$Component) {
    (0, _inherits2.default)(Menu, _React$Component);
    function Menu() {
      var _getPrototypeOf2;
      var _this;
      (0, _classCallCheck2.default)(this, Menu);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)),
      );
      _this.getContentAnchorEl = function () {
        if (_this.menuListRef.selectedItemRef) {
          return _reactDom.default.findDOMNode(_this.menuListRef.selectedItemRef);
        }
        return _reactDom.default.findDOMNode(_this.menuListRef).firstChild;
      };
      _this.focus = function () {
        if (_this.menuListRef && _this.menuListRef.selectedItemRef) {
          _reactDom.default.findDOMNode(_this.menuListRef.selectedItemRef).focus();
          return;
        }
        var menuList = _reactDom.default.findDOMNode(_this.menuListRef);
        if (menuList && menuList.firstChild) {
          menuList.firstChild.focus();
        }
      };
      _this.handleMenuListRef = function (ref) {
        _this.menuListRef = ref;
      };
      _this.handleEntering = function (element) {
        var _this$props = _this.props,
          disableAutoFocusItem = _this$props.disableAutoFocusItem,
          theme = _this$props.theme;
        var menuList = _reactDom.default.findDOMNode(_this.menuListRef);
        if (disableAutoFocusItem !== true) {
          _this.focus();
        }
        if (menuList && element.clientHeight < menuList.clientHeight && !menuList.style.width) {
          var size = ''.concat((0, _scrollbarSize.default)(), 'px');
          menuList.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = size;
          menuList.style.width = 'calc(100% + '.concat(size, ')');
        }
        if (_this.props.onEntering) {
          _this.props.onEntering(element);
        }
      };
      _this.handleListKeyDown = function (event) {
        if (event.key === 'Tab') {
          event.preventDefault();
          if (_this.props.onClose) {
            _this.props.onClose(event, 'tabKeyDown');
          }
        }
      };
      return _this;
    }
    (0, _createClass2.default)(Menu, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (this.props.open && this.props.disableAutoFocusItem !== true) {
            this.focus();
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props2 = this.props,
            children = _this$props2.children,
            classes = _this$props2.classes,
            disableAutoFocusItem = _this$props2.disableAutoFocusItem,
            MenuListProps = _this$props2.MenuListProps,
            onEntering = _this$props2.onEntering,
            _this$props2$PaperPro = _this$props2.PaperProps,
            PaperProps = _this$props2$PaperPro === void 0 ? {} : _this$props2$PaperPro,
            PopoverClasses = _this$props2.PopoverClasses,
            theme = _this$props2.theme,
            other = (0, _objectWithoutProperties2.default)(_this$props2, [
              'children',
              'classes',
              'disableAutoFocusItem',
              'MenuListProps',
              'onEntering',
              'PaperProps',
              'PopoverClasses',
              'theme',
            ]);
          return _react.default.createElement(
            _Popover.default,
            (0, _extends2.default)(
              {
                getContentAnchorEl: this.getContentAnchorEl,
                classes: PopoverClasses,
                onEntering: this.handleEntering,
                anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
                transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
                PaperProps: (0, _extends2.default)({}, PaperProps, {
                  classes: (0, _extends2.default)({}, PaperProps.classes, {
                    root: classes.paper,
                  }),
                }),
              },
              other,
            ),
            _react.default.createElement(
              _MenuList.default,
              (0, _extends2.default)(
                {
                  onKeyDown: this.handleListKeyDown,
                },
                MenuListProps,
                {
                  ref: this.handleMenuListRef,
                },
              ),
              children,
            ),
          );
        },
      },
    ]);
    return Menu;
  })(_react.default.Component);
  Menu.propTypes = {
    anchorEl: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    disableAutoFocusItem: _propTypes.default.bool,
    MenuListProps: _propTypes.default.object,
    onClose: _propTypes.default.func,
    onEnter: _propTypes.default.func,
    onEntered: _propTypes.default.func,
    onEntering: _propTypes.default.func,
    onExit: _propTypes.default.func,
    onExited: _propTypes.default.func,
    onExiting: _propTypes.default.func,
    open: _propTypes.default.bool.isRequired,
    PaperProps: _propTypes.default.object,
    PopoverClasses: _propTypes.default.object,
    theme: _propTypes.default.object.isRequired,
    transitionDuration: _propTypes.default.oneOfType([
      _propTypes.default.number,
      _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
      }),
      _propTypes.default.oneOf(['auto']),
    ]),
  };
  Menu.defaultProps = {
    disableAutoFocusItem: false,
    transitionDuration: 'auto',
  };
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiMenu',
    withTheme: true,
  })(Menu);
  exports.default = _default;
});
unwrapExports(Menu_1);
var Menu_2 = Menu_1.styles;
var SelectInput_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _toConsumableArray2 = interopRequireDefault(toConsumableArray);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _typeof2 = interopRequireDefault(_typeof_1);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _warning = interopRequireDefault(warning_1);
  var _Menu = interopRequireDefault(Menu_1);
  function areEqualValues(a, b) {
    if ((0, _typeof2.default)(b) === 'object' && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  var SelectInput = (function (_React$Component) {
    (0, _inherits2.default)(SelectInput, _React$Component);
    function SelectInput(props) {
      var _this;
      (0, _classCallCheck2.default)(this, SelectInput);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SelectInput).call(this));
      _this.ignoreNextBlur = false;
      _this.update = function (_ref) {
        var event = _ref.event,
          open = _ref.open;
        if (_this.isOpenControlled) {
          if (open) {
            _this.props.onOpen(event);
          } else {
            _this.props.onClose(event);
          }
          return;
        }
        _this.setState({
          menuMinWidth: _this.props.autoWidth ? null : _this.displayRef.clientWidth,
          open: open,
        });
      };
      _this.handleClick = function (event) {
        _this.ignoreNextBlur = true;
        _this.update({
          open: true,
          event: event,
        });
      };
      _this.handleClose = function (event) {
        _this.update({
          open: false,
          event: event,
        });
      };
      _this.handleItemClick = function (child) {
        return function (event) {
          if (!_this.props.multiple) {
            _this.update({
              open: false,
              event: event,
            });
          }
          var _this$props = _this.props,
            onChange = _this$props.onChange,
            name = _this$props.name;
          if (onChange) {
            var value;
            if (_this.props.multiple) {
              value = Array.isArray(_this.props.value) ? (0, _toConsumableArray2.default)(_this.props.value) : [];
              var itemIndex = value.indexOf(child.props.value);
              if (itemIndex === -1) {
                value.push(child.props.value);
              } else {
                value.splice(itemIndex, 1);
              }
            } else {
              value = child.props.value;
            }
            event.persist();
            event.target = {
              value: value,
              name: name,
            };
            onChange(event, child);
          }
        };
      };
      _this.handleBlur = function (event) {
        if (_this.ignoreNextBlur === true) {
          event.stopPropagation();
          _this.ignoreNextBlur = false;
          return;
        }
        if (_this.props.onBlur) {
          var _this$props2 = _this.props,
            value = _this$props2.value,
            name = _this$props2.name;
          event.persist();
          event.target = {
            value: value,
            name: name,
          };
          _this.props.onBlur(event);
        }
      };
      _this.handleKeyDown = function (event) {
        if (_this.props.readOnly) {
          return;
        }
        if ([' ', 'ArrowUp', 'ArrowDown', 'Enter'].indexOf(event.key) !== -1) {
          event.preventDefault();
          _this.ignoreNextBlur = true;
          _this.update({
            open: true,
            event: event,
          });
        }
      };
      _this.handleDisplayRef = function (ref) {
        _this.displayRef = ref;
      };
      _this.handleInputRef = function (ref) {
        var inputRef = _this.props.inputRef;
        if (!inputRef) {
          return;
        }
        var nodeProxy = {
          node: ref,
          value: _this.props.value,
          focus: function focus() {
            _this.displayRef.focus();
          },
        };
        (0, reactHelpers.setRef)(inputRef, nodeProxy);
      };
      _this.isOpenControlled = props.open !== undefined;
      _this.state = {
        menuMinWidth: null,
        open: false,
      };
      return _this;
    }
    (0, _createClass2.default)(SelectInput, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (this.isOpenControlled && this.props.open) {
            this.displayRef.focus();
            this.forceUpdate();
          }
          if (this.props.autoFocus) {
            this.displayRef.focus();
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this2 = this,
            _classNames;
          var _this$props3 = this.props,
            autoWidth = _this$props3.autoWidth,
            children = _this$props3.children,
            classes = _this$props3.classes,
            className = _this$props3.className,
            disabled = _this$props3.disabled,
            displayEmpty = _this$props3.displayEmpty,
            IconComponent = _this$props3.IconComponent,
            inputRef = _this$props3.inputRef,
            _this$props3$MenuProp = _this$props3.MenuProps,
            MenuProps = _this$props3$MenuProp === void 0 ? {} : _this$props3$MenuProp,
            multiple = _this$props3.multiple,
            name = _this$props3.name,
            onBlur = _this$props3.onBlur,
            onChange = _this$props3.onChange,
            onClose = _this$props3.onClose,
            onFocus = _this$props3.onFocus,
            onOpen = _this$props3.onOpen,
            openProp = _this$props3.open,
            readOnly = _this$props3.readOnly,
            renderValue = _this$props3.renderValue,
            required = _this$props3.required,
            SelectDisplayProps = _this$props3.SelectDisplayProps,
            tabIndexProp = _this$props3.tabIndex,
            _this$props3$type = _this$props3.type,
            type = _this$props3$type === void 0 ? 'hidden' : _this$props3$type,
            value = _this$props3.value,
            variant = _this$props3.variant,
            other = (0, _objectWithoutProperties2.default)(_this$props3, [
              'autoWidth',
              'children',
              'classes',
              'className',
              'disabled',
              'displayEmpty',
              'IconComponent',
              'inputRef',
              'MenuProps',
              'multiple',
              'name',
              'onBlur',
              'onChange',
              'onClose',
              'onFocus',
              'onOpen',
              'open',
              'readOnly',
              'renderValue',
              'required',
              'SelectDisplayProps',
              'tabIndex',
              'type',
              'value',
              'variant',
            ]);
          var open = this.isOpenControlled && this.displayRef ? openProp : this.state.open;
          delete other['aria-invalid'];
          var display;
          var displaySingle = '';
          var displayMultiple = [];
          var computeDisplay = false;
          if ((0, utils.isFilled)(this.props) || displayEmpty) {
            if (renderValue) {
              display = renderValue(value);
            } else {
              computeDisplay = true;
            }
          }
          var items = _react.default.Children.map(children, function (child) {
            if (!_react.default.isValidElement(child)) {
              return null;
            }
            (0,
            _warning.default)(child.type !== _react.default.Fragment, ["Material-UI: the Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
            var selected;
            if (multiple) {
              if (!Array.isArray(value)) {
                throw new Error(
                  'Material-UI: the `value` property must be an array ' +
                    'when using the `Select` component with `multiple`.',
                );
              }
              selected = value.some(function (v) {
                return areEqualValues(v, child.props.value);
              });
              if (selected && computeDisplay) {
                displayMultiple.push(child.props.children);
              }
            } else {
              selected = areEqualValues(value, child.props.value);
              if (selected && computeDisplay) {
                displaySingle = child.props.children;
              }
            }
            return _react.default.cloneElement(child, {
              onClick: _this2.handleItemClick(child),
              role: 'option',
              selected: selected,
              value: undefined,
              'data-value': child.props.value,
            });
          });
          if (computeDisplay) {
            display = multiple ? displayMultiple.join(', ') : displaySingle;
          }
          var menuMinWidth = this.state.menuMinWidth;
          if (!autoWidth && this.isOpenControlled && this.displayRef) {
            menuMinWidth = this.displayRef.clientWidth;
          }
          var tabIndex;
          if (typeof tabIndexProp !== 'undefined') {
            tabIndex = tabIndexProp;
          } else {
            tabIndex = disabled ? null : 0;
          }
          return _react.default.createElement(
            'div',
            {
              className: classes.root,
            },
            _react.default.createElement(
              'div',
              (0, _extends2.default)(
                {
                  className: (0, _classnames.default)(
                    classes.select,
                    classes.selectMenu,
                    ((_classNames = {}),
                    (0, _defineProperty2.default)(_classNames, classes.disabled, disabled),
                    (0, _defineProperty2.default)(_classNames, classes.filled, variant === 'filled'),
                    (0, _defineProperty2.default)(_classNames, classes.outlined, variant === 'outlined'),
                    _classNames),
                    className,
                  ),
                  ref: this.handleDisplayRef,
                  'aria-pressed': open ? 'true' : 'false',
                  tabIndex: tabIndex,
                  role: 'button',
                  'aria-owns': open ? 'menu-'.concat(name || '') : undefined,
                  'aria-haspopup': 'true',
                  onKeyDown: this.handleKeyDown,
                  onBlur: this.handleBlur,
                  onClick: disabled || readOnly ? null : this.handleClick,
                  onFocus: onFocus,
                  id: name ? 'select-'.concat(name) : undefined,
                },
                SelectDisplayProps,
              ),
              display ||
                _react.default.createElement('span', {
                  dangerouslySetInnerHTML: {
                    __html: '&#8203;',
                  },
                }),
            ),
            _react.default.createElement(
              'input',
              (0, _extends2.default)(
                {
                  value: Array.isArray(value) ? value.join(',') : value,
                  name: name,
                  ref: this.handleInputRef,
                  type: type,
                },
                other,
              ),
            ),
            _react.default.createElement(IconComponent, {
              className: classes.icon,
            }),
            _react.default.createElement(
              _Menu.default,
              (0, _extends2.default)(
                {
                  id: 'menu-'.concat(name || ''),
                  anchorEl: this.displayRef,
                  open: open,
                  onClose: this.handleClose,
                },
                MenuProps,
                {
                  MenuListProps: (0, _extends2.default)(
                    {
                      role: 'listbox',
                      disableListWrap: true,
                    },
                    MenuProps.MenuListProps,
                  ),
                  PaperProps: (0, _extends2.default)({}, MenuProps.PaperProps, {
                    style: (0, _extends2.default)(
                      {
                        minWidth: menuMinWidth,
                      },
                      MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null,
                    ),
                  }),
                },
              ),
              items,
            ),
          );
        },
      },
    ]);
    return SelectInput;
  })(_react.default.Component);
  SelectInput.propTypes = {
    autoFocus: _propTypes.default.bool,
    autoWidth: _propTypes.default.bool,
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    displayEmpty: _propTypes.default.bool,
    IconComponent: index_es.componentPropType,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    MenuProps: _propTypes.default.object,
    multiple: _propTypes.default.bool,
    name: _propTypes.default.string,
    onBlur: _propTypes.default.func,
    onChange: _propTypes.default.func,
    onClose: _propTypes.default.func,
    onFocus: _propTypes.default.func,
    onOpen: _propTypes.default.func,
    open: _propTypes.default.bool,
    readOnly: _propTypes.default.bool,
    renderValue: _propTypes.default.func,
    required: _propTypes.default.bool,
    SelectDisplayProps: _propTypes.default.object,
    tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]).isRequired,
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  var _default = SelectInput;
  exports.default = _default;
});
unwrapExports(SelectInput_1);
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var inheritsLoose = _inheritsLoose;
var setStatic_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var setStatic = function setStatic(key, value) {
    return function (BaseComponent) {
      BaseComponent[key] = value;
      return BaseComponent;
    };
  };
  var _default = setStatic;
  exports.default = _default;
});
unwrapExports(setStatic_1);
var setDisplayName_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _setStatic = interopRequireDefault(setStatic_1);
  var setDisplayName = function setDisplayName(displayName) {
    return (0, _setStatic.default)('displayName', displayName);
  };
  var _default = setDisplayName;
  exports.default = _default;
});
unwrapExports(setDisplayName_1);
var getDisplayName_1$1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var getDisplayName = function getDisplayName(Component) {
    if (typeof Component === 'string') {
      return Component;
    }
    if (!Component) {
      return undefined;
    }
    return Component.displayName || Component.name || 'Component';
  };
  var _default = getDisplayName;
  exports.default = _default;
});
unwrapExports(getDisplayName_1$1);
var wrapDisplayName_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _getDisplayName = interopRequireDefault(getDisplayName_1$1);
  var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
    return hocName + '(' + (0, _getDisplayName.default)(BaseComponent) + ')';
  };
  var _default = wrapDisplayName;
  exports.default = _default;
});
unwrapExports(wrapDisplayName_1);
var shouldUpdate_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _inheritsLoose2 = interopRequireDefault(inheritsLoose);
  var _setDisplayName = interopRequireDefault(setDisplayName_1);
  var _wrapDisplayName = interopRequireDefault(wrapDisplayName_1);
  var shouldUpdate = function shouldUpdate(test) {
    return function (BaseComponent) {
      var factory = (0, react.createFactory)(BaseComponent);
      var ShouldUpdate = (function (_Component) {
        (0, _inheritsLoose2.default)(ShouldUpdate, _Component);
        function ShouldUpdate() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ShouldUpdate.prototype;
        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
          return test(this.props, nextProps);
        };
        _proto.render = function render() {
          return factory(this.props);
        };
        return ShouldUpdate;
      })(react.Component);
      {
        return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, 'shouldUpdate'))(ShouldUpdate);
      }
    };
  };
  var _default = shouldUpdate;
  exports.default = _default;
});
unwrapExports(shouldUpdate_1);
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }
  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }
  return true;
}
var shallowEqual_1 = shallowEqual;
var shallowEqual$1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _shallowEqual = interopRequireDefault(shallowEqual_1);
  var _default = _shallowEqual.default;
  exports.default = _default;
});
unwrapExports(shallowEqual$1);
var pure_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  exports.default = void 0;
  var _shouldUpdate = interopRequireDefault(shouldUpdate_1);
  var _shallowEqual = interopRequireDefault(shallowEqual$1);
  var _setDisplayName = interopRequireDefault(setDisplayName_1);
  var _wrapDisplayName = interopRequireDefault(wrapDisplayName_1);
  var pure = function pure(BaseComponent) {
    var hoc = (0, _shouldUpdate.default)(function (props, nextProps) {
      return !(0, _shallowEqual.default)(props, nextProps);
    });
    {
      return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, 'pure'))(hoc(BaseComponent));
    }
  };
  var _default = pure;
  exports.default = _default;
});
unwrapExports(pure_1);
var SvgIcon_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  var _withStyles = interopRequireDefault(withStyles);
  var styles = function styles(theme) {
    return {
      root: {
        userSelect: 'none',
        width: '1em',
        height: '1em',
        display: 'inline-block',
        fill: 'currentColor',
        flexShrink: 0,
        fontSize: 24,
        transition: theme.transitions.create('fill', {
          duration: theme.transitions.duration.shorter,
        }),
      },
      colorPrimary: {
        color: theme.palette.primary.main,
      },
      colorSecondary: {
        color: theme.palette.secondary.main,
      },
      colorAction: {
        color: theme.palette.action.active,
      },
      colorError: {
        color: theme.palette.error.main,
      },
      colorDisabled: {
        color: theme.palette.action.disabled,
      },
      fontSizeInherit: {
        fontSize: 'inherit',
      },
      fontSizeSmall: {
        fontSize: 20,
      },
      fontSizeLarge: {
        fontSize: 35,
      },
    };
  };
  exports.styles = styles;
  function SvgIcon(props) {
    var _classNames;
    var children = props.children,
      classes = props.classes,
      className = props.className,
      color = props.color,
      Component = props.component,
      fontSize = props.fontSize,
      nativeColor = props.nativeColor,
      titleAccess = props.titleAccess,
      viewBox = props.viewBox,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'color',
        'component',
        'fontSize',
        'nativeColor',
        'titleAccess',
        'viewBox',
      ]);
    return _react.default.createElement(
      Component,
      (0, _extends2.default)(
        {
          className: (0, _classnames.default)(
            classes.root,
            ((_classNames = {}),
            (0, _defineProperty2.default)(
              _classNames,
              classes['color'.concat((0, helpers.capitalize)(color))],
              color !== 'inherit',
            ),
            (0, _defineProperty2.default)(
              _classNames,
              classes['fontSize'.concat((0, helpers.capitalize)(fontSize))],
              fontSize !== 'default',
            ),
            _classNames),
            className,
          ),
          focusable: 'false',
          viewBox: viewBox,
          color: nativeColor,
          'aria-hidden': titleAccess ? 'false' : 'true',
          role: titleAccess ? 'img' : 'presentation',
        },
        other,
      ),
      children,
      titleAccess ? _react.default.createElement('title', null, titleAccess) : null,
    );
  }
  SvgIcon.propTypes = {
    children: _propTypes.default.node.isRequired,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    color: _propTypes.default.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
    component: index_es.componentPropType,
    fontSize: _propTypes.default.oneOf(['inherit', 'default', 'small', 'large']),
    nativeColor: _propTypes.default.string,
    shapeRendering: _propTypes.default.string,
    titleAccess: _propTypes.default.string,
    viewBox: _propTypes.default.string,
  };
  SvgIcon.defaultProps = {
    color: 'inherit',
    component: 'svg',
    fontSize: 'default',
    viewBox: '0 0 24 24',
  };
  SvgIcon.muiName = 'SvgIcon';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiSvgIcon',
  })(SvgIcon);
  exports.default = _default;
});
unwrapExports(SvgIcon_1);
var SvgIcon_2 = SvgIcon_1.styles;
var SvgIcon = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _SvgIcon.default;
    },
  });
  var _SvgIcon = interopRequireDefault(SvgIcon_1);
});
unwrapExports(SvgIcon);
var ArrowDropDown_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _react = interopRequireDefault(react);
  var _pure = interopRequireDefault(pure_1);
  var _SvgIcon = interopRequireDefault(SvgIcon);
  var _ref = _react.default.createElement('path', {
    d: 'M7 10l5 5 5-5z',
  });
  var ArrowDropDown = function ArrowDropDown(props) {
    return _react.default.createElement(_SvgIcon.default, props, _ref);
  };
  ArrowDropDown = (0, _pure.default)(ArrowDropDown);
  ArrowDropDown.muiName = 'SvgIcon';
  var _default = ArrowDropDown;
  exports.default = _default;
});
unwrapExports(ArrowDropDown_1);
var NativeSelectInput_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _defineProperty2 = interopRequireDefault(defineProperty);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _classnames = interopRequireDefault(classnames);
  function NativeSelectInput(props) {
    var _classNames;
    var children = props.children,
      classes = props.classes,
      className = props.className,
      disabled = props.disabled,
      IconComponent = props.IconComponent,
      inputRef = props.inputRef,
      name = props.name,
      onChange = props.onChange,
      value = props.value,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'className',
        'disabled',
        'IconComponent',
        'inputRef',
        'name',
        'onChange',
        'value',
        'variant',
      ]);
    return _react.default.createElement(
      'div',
      {
        className: classes.root,
      },
      _react.default.createElement(
        'select',
        (0, _extends2.default)(
          {
            className: (0, _classnames.default)(
              classes.select,
              ((_classNames = {}),
              (0, _defineProperty2.default)(_classNames, classes.filled, variant === 'filled'),
              (0, _defineProperty2.default)(_classNames, classes.outlined, variant === 'outlined'),
              (0, _defineProperty2.default)(_classNames, classes.disabled, disabled),
              _classNames),
              className,
            ),
            name: name,
            disabled: disabled,
            onChange: onChange,
            value: value,
            ref: inputRef,
          },
          other,
        ),
        children,
      ),
      _react.default.createElement(IconComponent, {
        className: classes.icon,
      }),
    );
  }
  NativeSelectInput.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    className: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    IconComponent: index_es.componentPropType,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    name: _propTypes.default.string,
    onChange: _propTypes.default.func,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      ),
    ]),
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  var _default = NativeSelectInput;
  exports.default = _default;
});
unwrapExports(NativeSelectInput_1);
var NativeSelect_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _NativeSelectInput = interopRequireDefault(NativeSelectInput_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _ArrowDropDown = interopRequireDefault(ArrowDropDown_1);
  var _Input = interopRequireDefault(Input);
  var styles = function styles(theme) {
    return {
      root: {
        position: 'relative',
        width: '100%',
      },
      select: {
        '-moz-appearance': 'none',
        '-webkit-appearance': 'none',
        userSelect: 'none',
        paddingRight: 32,
        borderRadius: 0,
        height: '1.1875em',
        width: 'calc(100% - 32px)',
        minWidth: 16,
        cursor: 'pointer',
        '&:focus': {
          backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
          borderRadius: 0,
        },
        '&::-ms-expand': {
          display: 'none',
        },
        '&$disabled': {
          cursor: 'default',
        },
        '&[multiple]': {
          height: 'auto',
        },
        '&:not([multiple]) option, &:not([multiple]) optgroup': {
          backgroundColor: theme.palette.background.paper,
        },
      },
      filled: {
        width: 'calc(100% - 44px)',
      },
      outlined: {
        width: 'calc(100% - 46px)',
        borderRadius: theme.shape.borderRadius,
      },
      selectMenu: {
        width: 'auto',
        height: 'auto',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        minHeight: '1.1875em',
      },
      disabled: {},
      icon: {
        position: 'absolute',
        right: 0,
        top: 'calc(50% - 12px)',
        color: theme.palette.action.active,
        'pointer-events': 'none',
      },
    };
  };
  exports.styles = styles;
  function NativeSelect(props) {
    var children = props.children,
      classes = props.classes,
      IconComponent = props.IconComponent,
      input = props.input,
      inputProps = props.inputProps,
      muiFormControl = props.muiFormControl,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'children',
        'classes',
        'IconComponent',
        'input',
        'inputProps',
        'muiFormControl',
        'variant',
      ]);
    var fcs = (0, _formControlState.default)({
      props: props,
      muiFormControl: muiFormControl,
      states: ['variant'],
    });
    return _react.default.cloneElement(
      input,
      (0, _extends2.default)(
        {
          inputComponent: _NativeSelectInput.default,
          inputProps: (0, _extends2.default)(
            {
              children: children,
              classes: classes,
              IconComponent: IconComponent,
              variant: fcs.variant,
              type: undefined,
            },
            inputProps,
            input ? input.props.inputProps : {},
          ),
        },
        other,
      ),
    );
  }
  NativeSelect.propTypes = {
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    IconComponent: index_es.componentPropType,
    input: _propTypes.default.element,
    inputProps: _propTypes.default.object,
    muiFormControl: _propTypes.default.object,
    onChange: _propTypes.default.func,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      ),
    ]),
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  NativeSelect.defaultProps = {
    IconComponent: _ArrowDropDown.default,
    input: _react.default.createElement(_Input.default, null),
  };
  NativeSelect.muiName = 'Select';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiNativeSelect',
  })((0, _withFormControlContext.default)(NativeSelect));
  exports.default = _default;
});
unwrapExports(NativeSelect_1);
var NativeSelect_2 = NativeSelect_1.styles;
var Select_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = exports.styles = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _react = interopRequireDefault(react);
  var _propTypes = interopRequireDefault(propTypes);
  var _SelectInput = interopRequireDefault(SelectInput_1);
  var _formControlState = interopRequireDefault(formControlState_1);
  var _withFormControlContext = interopRequireDefault(withFormControlContext_1);
  var _withStyles = interopRequireDefault(withStyles);
  var _mergeClasses = interopRequireDefault(mergeClasses_1);
  var _ArrowDropDown = interopRequireDefault(ArrowDropDown_1);
  var _Input = interopRequireDefault(Input);
  var _NativeSelectInput = interopRequireDefault(NativeSelectInput_1);
  var styles = NativeSelect_1.styles;
  exports.styles = styles;
  function Select(props) {
    var autoWidth = props.autoWidth,
      children = props.children,
      classes = props.classes,
      displayEmpty = props.displayEmpty,
      IconComponent = props.IconComponent,
      input = props.input,
      inputProps = props.inputProps,
      MenuProps = props.MenuProps,
      muiFormControl = props.muiFormControl,
      multiple = props.multiple,
      native = props.native,
      onClose = props.onClose,
      onOpen = props.onOpen,
      open = props.open,
      renderValue = props.renderValue,
      SelectDisplayProps = props.SelectDisplayProps,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, [
        'autoWidth',
        'children',
        'classes',
        'displayEmpty',
        'IconComponent',
        'input',
        'inputProps',
        'MenuProps',
        'muiFormControl',
        'multiple',
        'native',
        'onClose',
        'onOpen',
        'open',
        'renderValue',
        'SelectDisplayProps',
        'variant',
      ]);
    var inputComponent = native ? _NativeSelectInput.default : _SelectInput.default;
    var fcs = (0, _formControlState.default)({
      props: props,
      muiFormControl: muiFormControl,
      states: ['variant'],
    });
    return _react.default.cloneElement(
      input,
      (0, _extends2.default)(
        {
          inputComponent: inputComponent,
          inputProps: (0, _extends2.default)(
            {
              children: children,
              IconComponent: IconComponent,
              variant: fcs.variant,
              type: undefined,
              multiple: multiple,
            },
            native
              ? {}
              : {
                  autoWidth: autoWidth,
                  displayEmpty: displayEmpty,
                  MenuProps: MenuProps,
                  onClose: onClose,
                  onOpen: onOpen,
                  open: open,
                  renderValue: renderValue,
                  SelectDisplayProps: SelectDisplayProps,
                },
            inputProps,
            {
              classes: inputProps
                ? (0, _mergeClasses.default)({
                    baseClasses: classes,
                    newClasses: inputProps.classes,
                    Component: Select,
                  })
                : classes,
            },
            input ? input.props.inputProps : {},
          ),
        },
        other,
      ),
    );
  }
  Select.propTypes = {
    autoWidth: _propTypes.default.bool,
    children: _propTypes.default.node,
    classes: _propTypes.default.object.isRequired,
    displayEmpty: _propTypes.default.bool,
    IconComponent: index_es.componentPropType,
    input: _propTypes.default.element,
    inputProps: _propTypes.default.object,
    MenuProps: _propTypes.default.object,
    multiple: _propTypes.default.bool,
    native: _propTypes.default.bool,
    onChange: _propTypes.default.func,
    onClose: _propTypes.default.func,
    onOpen: _propTypes.default.func,
    open: _propTypes.default.bool,
    renderValue: _propTypes.default.func,
    SelectDisplayProps: _propTypes.default.object,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.object,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.bool,
          _propTypes.default.object,
        ]),
      ),
    ]),
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  Select.defaultProps = {
    autoWidth: false,
    displayEmpty: false,
    IconComponent: _ArrowDropDown.default,
    input: _react.default.createElement(_Input.default, null),
    multiple: false,
    native: false,
  };
  Select.muiName = 'Select';
  var _default = (0, _withStyles.default)(styles, {
    name: 'MuiSelect',
  })((0, _withFormControlContext.default)(Select));
  exports.default = _default;
});
unwrapExports(Select_1);
var Select_2 = Select_1.styles;
var Select = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _Select.default;
    },
  });
  var _Select = interopRequireDefault(Select_1);
});
unwrapExports(Select);
var TextField_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  exports.default = void 0;
  var _extends2 = interopRequireDefault(_extends_1);
  var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);
  var _classCallCheck2 = interopRequireDefault(classCallCheck);
  var _createClass2 = interopRequireDefault(createClass);
  var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);
  var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);
  var _inherits2 = interopRequireDefault(inherits);
  var _react = interopRequireDefault(react);
  var _reactDom = interopRequireDefault(reactDom);
  var _warning = interopRequireDefault(warning_1);
  var _propTypes = interopRequireDefault(propTypes);
  var _Input = interopRequireDefault(Input);
  var _FilledInput = interopRequireDefault(FilledInput);
  var _OutlinedInput = interopRequireDefault(OutlinedInput);
  var _InputLabel = interopRequireDefault(InputLabel);
  var _FormControl = interopRequireDefault(FormControl);
  var _FormHelperText = interopRequireDefault(FormHelperText);
  var _Select = interopRequireDefault(Select);
  var variantComponent = {
    standard: _Input.default,
    filled: _FilledInput.default,
    outlined: _OutlinedInput.default,
  };
  var TextField = (function (_React$Component) {
    (0, _inherits2.default)(TextField, _React$Component);
    function TextField(props) {
      var _this;
      (0, _classCallCheck2.default)(this, TextField);
      _this = (0, _possibleConstructorReturn2.default)(
        this,
        (0, _getPrototypeOf2.default)(TextField).call(this, props),
      );
      _this.labelRef = _react.default.createRef();
      return _this;
    }
    (0, _createClass2.default)(TextField, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (this.props.variant === 'outlined') {
            this.labelNode = _reactDom.default.findDOMNode(this.labelRef.current);
            this.forceUpdate();
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            autoComplete = _this$props.autoComplete,
            autoFocus = _this$props.autoFocus,
            children = _this$props.children,
            className = _this$props.className,
            defaultValue = _this$props.defaultValue,
            error = _this$props.error,
            FormHelperTextProps = _this$props.FormHelperTextProps,
            fullWidth = _this$props.fullWidth,
            helperText = _this$props.helperText,
            id = _this$props.id,
            InputLabelProps = _this$props.InputLabelProps,
            inputProps = _this$props.inputProps,
            InputProps = _this$props.InputProps,
            inputRef = _this$props.inputRef,
            label = _this$props.label,
            multiline = _this$props.multiline,
            name = _this$props.name,
            onBlur = _this$props.onBlur,
            onChange = _this$props.onChange,
            onFocus = _this$props.onFocus,
            placeholder = _this$props.placeholder,
            required = _this$props.required,
            rows = _this$props.rows,
            rowsMax = _this$props.rowsMax,
            select = _this$props.select,
            SelectProps = _this$props.SelectProps,
            type = _this$props.type,
            value = _this$props.value,
            variant = _this$props.variant,
            other = (0, _objectWithoutProperties2.default)(_this$props, [
              'autoComplete',
              'autoFocus',
              'children',
              'className',
              'defaultValue',
              'error',
              'FormHelperTextProps',
              'fullWidth',
              'helperText',
              'id',
              'InputLabelProps',
              'inputProps',
              'InputProps',
              'inputRef',
              'label',
              'multiline',
              'name',
              'onBlur',
              'onChange',
              'onFocus',
              'placeholder',
              'required',
              'rows',
              'rowsMax',
              'select',
              'SelectProps',
              'type',
              'value',
              'variant',
            ]);
          (0, _warning.default)(
            !select || Boolean(children),
            'Material-UI: `children` must be passed when using the `TextField` component with `select`.',
          );
          var InputMore = {};
          if (variant === 'outlined') {
            if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
              InputMore.notched = InputLabelProps.shrink;
            }
            InputMore.labelWidth = (this.labelNode && this.labelNode.offsetWidth) || 0;
          }
          var helperTextId = helperText && id ? ''.concat(id, '-helper-text') : undefined;
          var InputComponent = variantComponent[variant];
          var InputElement = _react.default.createElement(
            InputComponent,
            (0, _extends2.default)(
              {
                'aria-describedby': helperTextId,
                autoComplete: autoComplete,
                autoFocus: autoFocus,
                defaultValue: defaultValue,
                fullWidth: fullWidth,
                multiline: multiline,
                name: name,
                rows: rows,
                rowsMax: rowsMax,
                type: type,
                value: value,
                id: id,
                inputRef: inputRef,
                onBlur: onBlur,
                onChange: onChange,
                onFocus: onFocus,
                placeholder: placeholder,
                inputProps: inputProps,
              },
              InputMore,
              InputProps,
            ),
          );
          return _react.default.createElement(
            _FormControl.default,
            (0, _extends2.default)(
              {
                className: className,
                error: error,
                fullWidth: fullWidth,
                required: required,
                variant: variant,
              },
              other,
            ),
            label &&
              _react.default.createElement(
                _InputLabel.default,
                (0, _extends2.default)(
                  {
                    htmlFor: id,
                    ref: this.labelRef,
                  },
                  InputLabelProps,
                ),
                label,
              ),
            select
              ? _react.default.createElement(
                  _Select.default,
                  (0, _extends2.default)(
                    {
                      'aria-describedby': helperTextId,
                      value: value,
                      input: InputElement,
                    },
                    SelectProps,
                  ),
                  children,
                )
              : InputElement,
            helperText &&
              _react.default.createElement(
                _FormHelperText.default,
                (0, _extends2.default)(
                  {
                    id: helperTextId,
                  },
                  FormHelperTextProps,
                ),
                helperText,
              ),
          );
        },
      },
    ]);
    return TextField;
  })(_react.default.Component);
  TextField.propTypes = {
    autoComplete: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    disabled: _propTypes.default.bool,
    error: _propTypes.default.bool,
    FormHelperTextProps: _propTypes.default.object,
    fullWidth: _propTypes.default.bool,
    helperText: _propTypes.default.node,
    id: _propTypes.default.string,
    InputLabelProps: _propTypes.default.object,
    InputProps: _propTypes.default.object,
    inputProps: _propTypes.default.object,
    inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    label: _propTypes.default.node,
    margin: _propTypes.default.oneOf(['none', 'dense', 'normal']),
    multiline: _propTypes.default.bool,
    name: _propTypes.default.string,
    onBlur: _propTypes.default.func,
    onChange: _propTypes.default.func,
    onFocus: _propTypes.default.func,
    placeholder: _propTypes.default.string,
    required: _propTypes.default.bool,
    rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    select: _propTypes.default.bool,
    SelectProps: _propTypes.default.object,
    type: _propTypes.default.string,
    value: _propTypes.default.oneOfType([
      _propTypes.default.string,
      _propTypes.default.number,
      _propTypes.default.bool,
      _propTypes.default.arrayOf(
        _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      ),
    ]),
    variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  };
  TextField.defaultProps = {
    required: false,
    select: false,
    variant: 'standard',
  };
  var _default = TextField;
  exports.default = _default;
});
unwrapExports(TextField_1);
var TextField = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true,
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _TextField.default;
    },
  });
  var _TextField = interopRequireDefault(TextField_1);
});
var TextField$1 = unwrapExports(TextField);
var nativeCeil = Math.ceil,
  nativeMax = Math.max;
function baseRange(start, end, step, fromRight) {
  var index = -1,
    length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
    result = Array(length);
  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}
var _baseRange = baseRange;
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}
var eq_1 = eq;
var freeGlobal =
  typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal;
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
var root$1 = _freeGlobal || freeSelf || Function('return this')();
var _root = root$1;
var Symbol$1 = _root.Symbol;
var _Symbol = Symbol$1;
var objectProto = Object.prototype;
var hasOwnProperty$2 = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
function getRawTag(value) {
  var isOwn = hasOwnProperty$2.call(value, symToStringTag),
    tag = value[symToStringTag];
  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var _getRawTag = getRawTag;
var objectProto$1 = Object.prototype;
var nativeObjectToString$1 = objectProto$1.toString;
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}
var _objectToString = objectToString;
var nullTag = '[object Null]',
  undefinedTag = '[object Undefined]';
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
}
var _baseGetTag = baseGetTag;
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}
var isObject_1 = isObject;
var asyncTag = '[object AsyncFunction]',
  funcTag = '[object Function]',
  genTag = '[object GeneratorFunction]',
  proxyTag = '[object Proxy]';
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength;
function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}
var isArrayLike_1 = isArrayLike;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return (
    !!length &&
    (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
    value > -1 &&
    value % 1 == 0 &&
    value < length
  );
}
var _isIndex = isIndex;
function isIterateeCall(value, index, object) {
  if (!isObject_1(object)) {
    return false;
  }
  var type = typeof index;
  if (
    type == 'number' ? isArrayLike_1(object) && _isIndex(index, object.length) : type == 'string' && index in object
  ) {
    return eq_1(object[index], value);
  }
  return false;
}
var _isIterateeCall = isIterateeCall;
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}
var isObjectLike_1 = isObjectLike;
var symbolTag = '[object Symbol]';
function isSymbol(value) {
  return typeof value == 'symbol' || (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
}
var isSymbol_1 = isSymbol;
var NAN = 0 / 0;
var reTrim = /^\s+|\s+$/g;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol_1(value)) {
    return NAN;
  }
  if (isObject_1(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject_1(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value)
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : reIsBadHex.test(value)
    ? NAN
    : +value;
}
var toNumber_1 = toNumber;
var INFINITY = 1 / 0,
  MAX_INTEGER = 1.7976931348623157e308;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_1(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_1 = toFinite;
function createRange(fromRight) {
  return function (start, end, step) {
    if (step && typeof step != 'number' && _isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    start = toFinite_1(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite_1(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite_1(step);
    return _baseRange(start, end, step, fromRight);
  };
}
var _createRange = createRange;
var range = _createRange();
var range_1 = range;
const { NChoice: NChoice } = _dll_pie_lib__config_ui;
const { InputCheckbox: InputCheckbox$1 } = _dll_pie_lib__config_ui;
const _jsxFileName$2 =
  '/home/ede/dev/github/pie-framework/pie-elements/packages/text-entry/configure/src/model-config.jsx';
class RawModelConfig extends react.Component {
  constructor(...args) {
    super(...args);
    RawModelConfig.prototype.__init.call(this);
    RawModelConfig.prototype.__init2.call(this);
    RawModelConfig.prototype.__init3.call(this);
    RawModelConfig.prototype.__init4.call(this);
  }
  static __initStatic() {
    this.propTypes = {
      config: propTypes.object,
      onChange: propTypes.func.isRequired,
      classes: propTypes.object,
    };
  }
  __init() {
    this.onChange = (key) => (event) => {
      this.props.config[key] = event.target.checked;
      this.props.onChange(this.props.config);
    };
  }
  __init2() {
    this.onPromptChange = (event) => {
      this.props.config.prompt = event.target.value;
      this.props.onChange(this.props.config);
    };
  }
  __init3() {
    this.onAlignmentChange = (alignment) => {
      this.props.config.answerAlignment = alignment;
      this.props.onChange(this.props.config);
    };
  }
  __init4() {
    this.onAnswerSizeChange = (size) => {
      this.props.config.answerBlankSize = size;
      this.props.onChange(this.props.config);
    };
  }
  render() {
    const { config, classes } = this.props;
    const { allowIntegersOnly } = config;
    const sizeOpts = range_1(2, 14, 2).map((v) => ({
      label: v.toString(),
      value: v.toString(),
    }));
    return react.createElement(
      Box,
      {
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 48,
        },
      },
      react.createElement(
        Typography$1,
        {
          __self: this,
          __source: {
            fileName: _jsxFileName$2,
            lineNumber: 49,
          },
        },
        'Options',
      ),
      react.createElement('br', {
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 50,
        },
      }),
      react.createElement(TextField$1, {
        classes: {
          root: classes.promptInput,
        },
        label: 'Prompt',
        multiline: true,
        onChange: this.onPromptChange,
        value: config.prompt || '',
        placeholder: 'Enter Value',
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 51,
        },
      }),
      react.createElement('br', {
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 61,
        },
      }),
      react.createElement(
        'div',
        {
          className: classes.numberOpts,
          __self: this,
          __source: {
            fileName: _jsxFileName$2,
            lineNumber: 62,
          },
        },
        react.createElement(InputCheckbox$1, {
          label: 'Numbers only',
          checked: allowIntegersOnly,
          onChange: this.onChange('allowIntegersOnly'),
          __self: this,
          __source: {
            fileName: _jsxFileName$2,
            lineNumber: 63,
          },
        }),
        allowIntegersOnly &&
          react.createElement(InputCheckbox$1, {
            label: 'Decimals',
            checked: config.allowDecimal,
            onChange: this.onChange('allowDecimal'),
            __self: this,
            __source: {
              fileName: _jsxFileName$2,
              lineNumber: 70,
            },
          }),
        allowIntegersOnly &&
          react.createElement(InputCheckbox$1, {
            label: 'Thousands separator',
            checked: config.allowThousandsSeparator,
            onChange: this.onChange('allowThousandsSeparator'),
            __self: this,
            __source: {
              fileName: _jsxFileName$2,
              lineNumber: 77,
            },
          }),
        allowIntegersOnly &&
          react.createElement(InputCheckbox$1, {
            label: 'Negative',
            checked: config.allowNegative || false,
            onChange: this.onChange('allowNegative'),
            __self: this,
            __source: {
              fileName: _jsxFileName$2,
              lineNumber: 84,
            },
          }),
      ),
      react.createElement(NChoice, {
        header: 'Answer Size',
        value: config.answerBlankSize,
        opts: sizeOpts,
        onChange: this.onAnswerSizeChange,
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 91,
        },
      }),
      react.createElement(NChoice, {
        header: 'Answer Alignment',
        value: config.answerAlignment,
        opts: [
          {
            label: 'left',
            value: 'left',
          },
          {
            label: 'center',
            value: 'center',
          },
          {
            label: 'right',
            value: 'right',
          },
        ],
        onChange: this.onAlignmentChange,
        __self: this,
        __source: {
          fileName: _jsxFileName$2,
          lineNumber: 97,
        },
      }),
    );
  }
}
RawModelConfig.__initStatic();
const ModelConfig = styles_6(() => ({
  numberOpts: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  promptInput: {
    width: '100%',
    marginBottom: '10px',
  },
}))(RawModelConfig);
const { InputContainer: InputContainer } = _dll_pie_lib__config_ui;
const { NumberTextField: NumberTextField } = _dll_pie_lib__config_ui;
const { FeedbackConfig: FeedbackConfig } = _dll_pie_lib__config_ui;
const EditableHtml = _dll_pie_lib__editable_html;
const _jsxFileName$3 =
  '/home/ede/dev/github/pie-framework/pie-elements/packages/text-entry/configure/src/configure.jsx';
const log$1 = browser$2('@pie-element:text-entry:configure');
const styles$1 = (theme) => ({
  award: {
    width: '100%',
  },
  inputHolder: {
    width: '100%',
    paddingBottom: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2,
    marginTop: theme.spacing.unit * 2,
  },
  input: {
    paddingTop: theme.spacing.unit * 2,
    width: '100%',
  },
});
class Configure extends react.Component {
  constructor(...args) {
    super(...args);
    Configure.prototype.__init.call(this);
    Configure.prototype.__init2.call(this);
    Configure.prototype.__init3.call(this);
    Configure.prototype.__init4.call(this);
    Configure.prototype.__init5.call(this);
    Configure.prototype.__init6.call(this);
    Configure.prototype.__init7.call(this);
  }
  static __initStatic() {
    this.propTypes = {
      model: propTypes.object,
      configuration: propTypes.object,
      imageSupport: propTypes.object,
      onModelChanged: propTypes.func.isRequired,
      onConfigurationChanged: propTypes.func.isRequired,
      classes: propTypes.object.isRequired,
    };
  }
  __init() {
    this.updateResponses = (name) => (responses) => {
      const { model } = this.props;
      model[name] = responses;
      log$1('[updateResponses]', name, 'responses: ', responses);
      this.props.onModelChanged(model);
    };
  }
  __init2() {
    this.onCorrectResponsesChanged = this.updateResponses('correctResponses');
  }
  __init3() {
    this.onPartialResponsesChanged = this.updateResponses('partialResponses');
  }
  __init4() {
    this.onModelConfigChange = (cfg) => {
      const { model, onModelChanged } = this.props;
      const update = {
        ...model,
        ...cfg,
      };
      onModelChanged(update);
    };
  }
  __init5() {
    this.onFeedbackChange = (feedback) => {
      const { model, onModelChanged } = this.props;
      model.feedback = feedback;
      onModelChanged(model);
    };
  }
  __init6() {
    this.onTeacherInstructionsChange = (teacherInstructions) => {
      const { model, onModelChanged } = this.props;
      model.teacherInstructions = teacherInstructions;
      onModelChanged(model);
    };
  }
  __init7() {
    this.onAwardPercentageChange = (event, percent) => {
      const { model, onModelChanged } = this.props;
      model.partialResponses.awardPercentage = percent;
      onModelChanged(model);
    };
  }
  render() {
    const { classes, model, configuration, imageSupport } = this.props;
    const { teacherInstructions = {} } = configuration || {};
    const { teacherInstructionsEnabled } = model || {};
    log$1('[render] model', model);
    return react.createElement(
      'div',
      {
        __self: this,
        __source: {
          fileName: _jsxFileName$3,
          lineNumber: 88,
        },
      },
      react.createElement(
        Typography$1,
        {
          __self: this,
          __source: {
            fileName: _jsxFileName$3,
            lineNumber: 89,
          },
        },
        'Students will respond to a prompt (e.g., calculate, identify, compute), and the answer will be evaluated.',
      ),
      teacherInstructionsEnabled &&
        react.createElement(
          InputContainer,
          {
            label: teacherInstructions.label,
            className: classes.inputHolder,
            __self: this,
            __source: {
              fileName: _jsxFileName$3,
              lineNumber: 95,
            },
          },
          react.createElement(EditableHtml, {
            className: classes.input,
            markup: model.teacherInstructions || '',
            onChange: this.onTeacherInstructionsChange,
            imageSupport: imageSupport,
            nonEmpty: false,
            __self: this,
            __source: {
              fileName: _jsxFileName$3,
              lineNumber: 96,
            },
          }),
        ),
      react.createElement(Responses, {
        label: 'Correct Answers',
        subHeader: 'Additional correct answers may be added by clicking enter/return between answers.',
        responses: model.correctResponses,
        onChange: this.onCorrectResponsesChanged,
        __self: this,
        __source: {
          fileName: _jsxFileName$3,
          lineNumber: 106,
        },
      }),
      react.createElement(
        Responses,
        {
          label: 'Partial Correct Answers (optional)',
          subHeader: 'Additional partially correct answers may be added by clicking enter/return between answers.',
          responses: model.partialResponses,
          onChange: this.onPartialResponsesChanged,
          __self: this,
          __source: {
            fileName: _jsxFileName$3,
            lineNumber: 112,
          },
        },
        react.createElement(
          'div',
          {
            __self: this,
            __source: {
              fileName: _jsxFileName$3,
              lineNumber: 118,
            },
          },
          react.createElement(NumberTextField, {
            label: 'Award % for partially correct answer',
            min: 0,
            max: 100,
            className: classes.award,
            value: parseInt(model.partialResponses.awardPercentage, 10),
            onChange: this.onAwardPercentageChange,
            __self: this,
            __source: {
              fileName: _jsxFileName$3,
              lineNumber: 119,
            },
          }),
        ),
      ),
      react.createElement(ModelConfig, {
        config: model,
        onChange: this.onModelConfigChange,
        __self: this,
        __source: {
          fileName: _jsxFileName$3,
          lineNumber: 129,
        },
      }),
      react.createElement(FeedbackConfig, {
        feedback: model.feedback,
        onChange: this.onFeedbackChange,
        __self: this,
        __source: {
          fileName: _jsxFileName$3,
          lineNumber: 130,
        },
      }),
    );
  }
}
Configure.__initStatic();
const ConfigureMain = styles_6(styles$1)(Configure);
class StateWrapper extends react.Component {
  static __initStatic2() {
    this.propTypes = {
      model: propTypes.object,
      configuration: propTypes.object,
      imageSupport: propTypes.object,
      onModelChanged: propTypes.func.isRequired,
      onConfigurationChanged: propTypes.func.isRequired,
    };
  }
  constructor(props) {
    super(props);
    this.state = {
      model: props.model,
    };
    this.onModelChanged = (m) => {
      this.setState(
        {
          model: m,
        },
        () => {
          this.props.onModelChanged(this.state.model);
        },
      );
    };
  }
  render() {
    const { model } = this.state;
    const { configuration, onConfigurationChanged, imageSupport } = this.props;
    return react.createElement(ConfigureMain, {
      model: model,
      onModelChanged: this.onModelChanged,
      configuration: configuration,
      onConfigurationChanged: onConfigurationChanged,
      imageSupport: imageSupport,
      __self: this,
      __source: {
        fileName: _jsxFileName$3,
        lineNumber: 167,
      },
    });
  }
}
StateWrapper.__initStatic2();
var defaults = {
  model: {
    correctResponses: {
      values: ['correct response'],
      ignoreWhitespace: false,
      ignoreCase: false,
    },
    partialResponses: {
      values: ['partial response'],
      ignoreWhitespace: false,
      ignoreCase: false,
      awardPercentage: '50',
    },
    answerBlankSize: '10',
    answerAlignment: 'left',
    prompt: 'Question Prompt goes here',
    allowDecimal: false,
    allowThousandsSeparator: false,
    rationaleEnabled: true,
    teacherInstructionsEnabled: true,
    studentInstructionsEnabled: true,
  },
  configuration: {
    teacherInstructions: {
      settings: true,
      label: 'Teacher Instructions',
    },
  },
};
const { DeleteImageEvent: DeleteImageEvent } = _dll_pie_framework__pie_configure_events;
const { InsertImageEvent: InsertImageEvent } = _dll_pie_framework__pie_configure_events;
const { ModelUpdatedEvent: ModelUpdatedEvent } = _dll_pie_framework__pie_configure_events;
const log$2 = browser$2('pie-elements:text-entry:configure');
class TextEntryConfigure extends HTMLElement {
  static __initStatic() {
    this.createDefaultModel = (model = {}) => ({
      ...defaults.model,
      ...model,
    });
  }
  constructor() {
    super();
    this._model = TextEntryConfigure.createDefaultModel();
    this._configuration = defaults.configuration;
  }
  set model(m) {
    this._model = TextEntryConfigure.createDefaultModel(m);
    this._render();
  }
  set configuration(c) {
    this._configuration = c;
    this.render();
  }
  onModelChanged(model) {
    this._model = model;
    log$2('[onModelChanged]: ', this._model);
    this.dispatchEvent(new ModelUpdatedEvent(this._model));
  }
  onConfigurationChanged(c) {
    this._configuration = c;
    this.render();
  }
  insertImage(handler) {
    this.dispatchEvent(new InsertImageEvent(handler));
  }
  onDeleteImage(src, done) {
    this.dispatchEvent(new DeleteImageEvent(src, done));
  }
  _render() {
    if (this._model) {
      const el = react.createElement(StateWrapper, {
        onModelChanged: this.onModelChanged.bind(this),
        onConfigurationChanged: this.onConfigurationChanged.bind(this),
        model: this._model,
        configuration: this._configuration,
      });
      reactDom.render(el, this);
    }
  }
}
TextEntryConfigure.__initStatic();
export default TextEntryConfigure;
